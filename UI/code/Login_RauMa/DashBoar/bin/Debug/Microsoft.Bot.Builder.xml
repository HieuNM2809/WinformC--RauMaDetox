<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Bot.Builder</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Bot.Builder.ActivityFactory">
            <summary>
            The ActivityFactory
            to generate text and then uses simple markdown semantics like chatdown to create Activity.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Builder.ActivityFactory.FromObject(System.Object)">
            <summary>
            Generate the activity.
            Support Both string LG result and structured LG result.
            </summary>
            <param name="lgResult">lg result from languageGenerator.</param>
            <returns>activity.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.ActivityFactory.BuildActivityFromText(System.String)">
            <summary>
            Given a lg result, create a text activity.
            </summary>
            This method will create a MessageActivity from text.
            <param name="text">lg text output.</param>
            <returns>activity with text.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.ActivityFactory.BuildActivityFromLGStructuredResult(Newtonsoft.Json.Linq.JObject)">
            <summary>
            Given a structured lg result, create an activity.
            </summary>
            This method will create an MessageActivity from JToken
            <param name="lgJObj">lg output.</param>
            <returns>Activity for it.</returns>
        </member>
        <member name="T:Microsoft.Bot.Builder.ActivityHandler">
            <summary>
            An implementation of the <see cref="T:Microsoft.Bot.Builder.IBot"/> interface, intended for further subclassing.
            </summary>
            <remarks>
            Derive from this class to plug in code to handle particular activity types.
            Pre- and post-processing of <see cref="T:Microsoft.Bot.Schema.Activity"/> objects can be added by calling
            the base class implementation from the derived class.
            </remarks>
        </member>
        <member name="M:Microsoft.Bot.Builder.ActivityHandler.OnTurnAsync(Microsoft.Bot.Builder.ITurnContext,System.Threading.CancellationToken)">
             <summary>
             Called by the adapter (for example, a <see cref="T:Microsoft.Bot.Builder.BotFrameworkAdapter"/>)
             at runtime in order to process an inbound <see cref="T:Microsoft.Bot.Schema.Activity"/>.
             </summary>
             <param name="turnContext">The context object for this turn.</param>
             <param name="cancellationToken">A cancellation token that can be used by other objects
             or threads to receive notice of cancellation.</param>
             <returns>A task that represents the work queued to execute.</returns>
             <remarks>
             This method calls other methods in this class based on the type of the activity to
             process, which allows a derived class to provide type-specific logic in a controlled way.
            
             In a derived class, override this method to add logic that applies to all activity types.
             Add logic to apply before the type-specific logic before the call to the base class
             <see cref="M:Microsoft.Bot.Builder.ActivityHandler.OnTurnAsync(Microsoft.Bot.Builder.ITurnContext,System.Threading.CancellationToken)"/> method.
             Add logic to apply after the type-specific logic after the call to the base class
             <see cref="M:Microsoft.Bot.Builder.ActivityHandler.OnTurnAsync(Microsoft.Bot.Builder.ITurnContext,System.Threading.CancellationToken)"/> method.
             </remarks>
             <seealso cref="M:Microsoft.Bot.Builder.ActivityHandler.OnMessageActivityAsync(Microsoft.Bot.Builder.ITurnContext{Microsoft.Bot.Schema.IMessageActivity},System.Threading.CancellationToken)"/>
             <seealso cref="M:Microsoft.Bot.Builder.ActivityHandler.OnConversationUpdateActivityAsync(Microsoft.Bot.Builder.ITurnContext{Microsoft.Bot.Schema.IConversationUpdateActivity},System.Threading.CancellationToken)"/>
             <seealso cref="M:Microsoft.Bot.Builder.ActivityHandler.OnMessageReactionActivityAsync(Microsoft.Bot.Builder.ITurnContext{Microsoft.Bot.Schema.IMessageReactionActivity},System.Threading.CancellationToken)"/>
             <seealso cref="M:Microsoft.Bot.Builder.ActivityHandler.OnEventActivityAsync(Microsoft.Bot.Builder.ITurnContext{Microsoft.Bot.Schema.IEventActivity},System.Threading.CancellationToken)"/>
             <seealso cref="M:Microsoft.Bot.Builder.ActivityHandler.OnUnrecognizedActivityTypeAsync(Microsoft.Bot.Builder.ITurnContext,System.Threading.CancellationToken)"/>
             <seealso cref="P:Microsoft.Bot.Schema.Activity.Type"/>
             <seealso cref="T:Microsoft.Bot.Schema.ActivityTypes"/>
        </member>
        <member name="M:Microsoft.Bot.Builder.ActivityHandler.CreateInvokeResponse(System.Object)">
            <summary>
            An <see cref="T:Microsoft.Bot.Builder.InvokeResponse"/> factory that initializes the body to the parameter passed and status equal to OK.
            </summary>
            <param name="body">JSON serialized content from a POST response.</param>
            <returns>A new <see cref="T:Microsoft.Bot.Builder.InvokeResponse"/> object.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.ActivityHandler.OnMessageActivityAsync(Microsoft.Bot.Builder.ITurnContext{Microsoft.Bot.Schema.IMessageActivity},System.Threading.CancellationToken)">
            <summary>
            Override this in a derived class to provide logic specific to
            <see cref="F:Microsoft.Bot.Schema.ActivityTypes.Message"/> activities, such as the conversational logic.
            </summary>
            <param name="turnContext">A strongly-typed context object for this turn.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <remarks>
            When the <see cref="M:Microsoft.Bot.Builder.ActivityHandler.OnTurnAsync(Microsoft.Bot.Builder.ITurnContext,System.Threading.CancellationToken)"/>
            method receives a message activity, it calls this method.
            </remarks>
            <seealso cref="M:Microsoft.Bot.Builder.ActivityHandler.OnTurnAsync(Microsoft.Bot.Builder.ITurnContext,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:Microsoft.Bot.Builder.ActivityHandler.OnConversationUpdateActivityAsync(Microsoft.Bot.Builder.ITurnContext{Microsoft.Bot.Schema.IConversationUpdateActivity},System.Threading.CancellationToken)">
             <summary>
             Invoked when a conversation update activity is received from the channel when the base behavior of
             <see cref="M:Microsoft.Bot.Builder.ActivityHandler.OnTurnAsync(Microsoft.Bot.Builder.ITurnContext,System.Threading.CancellationToken)"/> is used.
             Conversation update activities are useful when it comes to responding to users being added to or removed from the conversation.
             For example, a bot could respond to a user being added by greeting the user.
             By default, this method will call <see cref="M:Microsoft.Bot.Builder.ActivityHandler.OnMembersAddedAsync(System.Collections.Generic.IList{Microsoft.Bot.Schema.ChannelAccount},Microsoft.Bot.Builder.ITurnContext{Microsoft.Bot.Schema.IConversationUpdateActivity},System.Threading.CancellationToken)"/>
             if any users have been added or <see cref="M:Microsoft.Bot.Builder.ActivityHandler.OnMembersRemovedAsync(System.Collections.Generic.IList{Microsoft.Bot.Schema.ChannelAccount},Microsoft.Bot.Builder.ITurnContext{Microsoft.Bot.Schema.IConversationUpdateActivity},System.Threading.CancellationToken)"/>
             if any users have been removed. The method checks the member ID so that it only responds to updates regarding members other than the bot itself.
             </summary>
             <param name="turnContext">A strongly-typed context object for this turn.</param>
             <param name="cancellationToken">A cancellation token that can be used by other objects
             or threads to receive notice of cancellation.</param>
             <returns>A task that represents the work queued to execute.</returns>
             <remarks>
             When the <see cref="M:Microsoft.Bot.Builder.ActivityHandler.OnTurnAsync(Microsoft.Bot.Builder.ITurnContext,System.Threading.CancellationToken)"/>
             method receives a conversation update activity, it calls this method.
             If the conversation update activity indicates that members other than the bot joined the conversation, it calls
             <see cref="M:Microsoft.Bot.Builder.ActivityHandler.OnMembersAddedAsync(System.Collections.Generic.IList{Microsoft.Bot.Schema.ChannelAccount},Microsoft.Bot.Builder.ITurnContext{Microsoft.Bot.Schema.IConversationUpdateActivity},System.Threading.CancellationToken)"/>.
             If the conversation update activity indicates that members other than the bot left the conversation, it calls
             <see cref="M:Microsoft.Bot.Builder.ActivityHandler.OnMembersRemovedAsync(System.Collections.Generic.IList{Microsoft.Bot.Schema.ChannelAccount},Microsoft.Bot.Builder.ITurnContext{Microsoft.Bot.Schema.IConversationUpdateActivity},System.Threading.CancellationToken)"/>.
            
             In a derived class, override this method to add logic that applies to all conversation update activities.
             Add logic to apply before the member added or removed logic before the call to the base class
             <see cref="M:Microsoft.Bot.Builder.ActivityHandler.OnConversationUpdateActivityAsync(Microsoft.Bot.Builder.ITurnContext{Microsoft.Bot.Schema.IConversationUpdateActivity},System.Threading.CancellationToken)"/> method.
             Add logic to apply after the member added or removed logic after the call to the base class
             <see cref="M:Microsoft.Bot.Builder.ActivityHandler.OnConversationUpdateActivityAsync(Microsoft.Bot.Builder.ITurnContext{Microsoft.Bot.Schema.IConversationUpdateActivity},System.Threading.CancellationToken)"/> method.
             </remarks>
             <seealso cref="M:Microsoft.Bot.Builder.ActivityHandler.OnTurnAsync(Microsoft.Bot.Builder.ITurnContext,System.Threading.CancellationToken)"/>
             <seealso cref="M:Microsoft.Bot.Builder.ActivityHandler.OnMembersAddedAsync(System.Collections.Generic.IList{Microsoft.Bot.Schema.ChannelAccount},Microsoft.Bot.Builder.ITurnContext{Microsoft.Bot.Schema.IConversationUpdateActivity},System.Threading.CancellationToken)"/>
             <seealso cref="M:Microsoft.Bot.Builder.ActivityHandler.OnMembersRemovedAsync(System.Collections.Generic.IList{Microsoft.Bot.Schema.ChannelAccount},Microsoft.Bot.Builder.ITurnContext{Microsoft.Bot.Schema.IConversationUpdateActivity},System.Threading.CancellationToken)"/>
        </member>
        <member name="M:Microsoft.Bot.Builder.ActivityHandler.OnMembersAddedAsync(System.Collections.Generic.IList{Microsoft.Bot.Schema.ChannelAccount},Microsoft.Bot.Builder.ITurnContext{Microsoft.Bot.Schema.IConversationUpdateActivity},System.Threading.CancellationToken)">
            <summary>
            Override this in a derived class to provide logic for when members other than the bot
            join the conversation, such as your bot's welcome logic.
            </summary>
            <param name="membersAdded">A list of all the members added to the conversation, as
            described by the conversation update activity.</param>
            <param name="turnContext">A strongly-typed context object for this turn.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <remarks>
            When the <see cref="M:Microsoft.Bot.Builder.ActivityHandler.OnConversationUpdateActivityAsync(Microsoft.Bot.Builder.ITurnContext{Microsoft.Bot.Schema.IConversationUpdateActivity},System.Threading.CancellationToken)"/>
            method receives a conversation update activity that indicates one or more users other than the bot
            are joining the conversation, it calls this method.
            </remarks>
            <seealso cref="M:Microsoft.Bot.Builder.ActivityHandler.OnConversationUpdateActivityAsync(Microsoft.Bot.Builder.ITurnContext{Microsoft.Bot.Schema.IConversationUpdateActivity},System.Threading.CancellationToken)"/>
        </member>
        <member name="M:Microsoft.Bot.Builder.ActivityHandler.OnMembersRemovedAsync(System.Collections.Generic.IList{Microsoft.Bot.Schema.ChannelAccount},Microsoft.Bot.Builder.ITurnContext{Microsoft.Bot.Schema.IConversationUpdateActivity},System.Threading.CancellationToken)">
            <summary>
            Override this in a derived class to provide logic for when members other than the bot
            leave the conversation, such as your bot's good-bye logic.
            </summary>
            <param name="membersRemoved">A list of all the members removed from the conversation, as
            described by the conversation update activity.</param>
            <param name="turnContext">A strongly-typed context object for this turn.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <remarks>
            When the <see cref="M:Microsoft.Bot.Builder.ActivityHandler.OnConversationUpdateActivityAsync(Microsoft.Bot.Builder.ITurnContext{Microsoft.Bot.Schema.IConversationUpdateActivity},System.Threading.CancellationToken)"/>
            method receives a conversation update activity that indicates one or more users other than the bot
            are leaving the conversation, it calls this method.
            </remarks>
            <seealso cref="M:Microsoft.Bot.Builder.ActivityHandler.OnConversationUpdateActivityAsync(Microsoft.Bot.Builder.ITurnContext{Microsoft.Bot.Schema.IConversationUpdateActivity},System.Threading.CancellationToken)"/>
        </member>
        <member name="M:Microsoft.Bot.Builder.ActivityHandler.OnMessageReactionActivityAsync(Microsoft.Bot.Builder.ITurnContext{Microsoft.Bot.Schema.IMessageReactionActivity},System.Threading.CancellationToken)">
             <summary>
             Invoked when an event activity is received from the connector when the base behavior of
             <see cref="M:Microsoft.Bot.Builder.ActivityHandler.OnTurnAsync(Microsoft.Bot.Builder.ITurnContext,System.Threading.CancellationToken)"/> is used.
             Message reactions correspond to the user adding a 'like' or 'sad' etc. (often an emoji) to a
             previously sent activity. Message reactions are only supported by a few channels.
             The activity that the message reaction corresponds to is indicated in the replyToId property.
             The value of this property is the activity id of a previously sent activity given back to the
             bot as the response from a send call.
             </summary>
             <param name="turnContext">A strongly-typed context object for this turn.</param>
             <param name="cancellationToken">A cancellation token that can be used by other objects
             or threads to receive notice of cancellation.</param>
             <returns>A task that represents the work queued to execute.</returns>
             <remarks>
             When the <see cref="M:Microsoft.Bot.Builder.ActivityHandler.OnTurnAsync(Microsoft.Bot.Builder.ITurnContext,System.Threading.CancellationToken)"/>
             method receives a message reaction activity, it calls this method.
             If the message reaction indicates that reactions were added to a message, it calls
             <see cref="M:Microsoft.Bot.Builder.ActivityHandler.OnReactionsAddedAsync(System.Collections.Generic.IList{Microsoft.Bot.Schema.MessageReaction},Microsoft.Bot.Builder.ITurnContext{Microsoft.Bot.Schema.IMessageReactionActivity},System.Threading.CancellationToken)"/>.
             If the message reaction indicates that reactions were removed from a message, it calls
             <see cref="M:Microsoft.Bot.Builder.ActivityHandler.OnReactionsRemovedAsync(System.Collections.Generic.IList{Microsoft.Bot.Schema.MessageReaction},Microsoft.Bot.Builder.ITurnContext{Microsoft.Bot.Schema.IMessageReactionActivity},System.Threading.CancellationToken)"/>.
            
             In a derived class, override this method to add logic that applies to all message reaction activities.
             Add logic to apply before the reactions added or removed logic before the call to the base class
             <see cref="M:Microsoft.Bot.Builder.ActivityHandler.OnMessageReactionActivityAsync(Microsoft.Bot.Builder.ITurnContext{Microsoft.Bot.Schema.IMessageReactionActivity},System.Threading.CancellationToken)"/> method.
             Add logic to apply after the reactions added or removed logic after the call to the base class
             <see cref="M:Microsoft.Bot.Builder.ActivityHandler.OnMessageReactionActivityAsync(Microsoft.Bot.Builder.ITurnContext{Microsoft.Bot.Schema.IMessageReactionActivity},System.Threading.CancellationToken)"/> method.
            
             </remarks>
             <seealso cref="M:Microsoft.Bot.Builder.ActivityHandler.OnTurnAsync(Microsoft.Bot.Builder.ITurnContext,System.Threading.CancellationToken)"/>
             <seealso cref="M:Microsoft.Bot.Builder.ActivityHandler.OnReactionsAddedAsync(System.Collections.Generic.IList{Microsoft.Bot.Schema.MessageReaction},Microsoft.Bot.Builder.ITurnContext{Microsoft.Bot.Schema.IMessageReactionActivity},System.Threading.CancellationToken)"/>
             <seealso cref="M:Microsoft.Bot.Builder.ActivityHandler.OnReactionsRemovedAsync(System.Collections.Generic.IList{Microsoft.Bot.Schema.MessageReaction},Microsoft.Bot.Builder.ITurnContext{Microsoft.Bot.Schema.IMessageReactionActivity},System.Threading.CancellationToken)"/>
        </member>
        <member name="M:Microsoft.Bot.Builder.ActivityHandler.OnReactionsAddedAsync(System.Collections.Generic.IList{Microsoft.Bot.Schema.MessageReaction},Microsoft.Bot.Builder.ITurnContext{Microsoft.Bot.Schema.IMessageReactionActivity},System.Threading.CancellationToken)">
            <summary>
            Override this in a derived class to provide logic for when reactions to a previous activity
            are added to the conversation.
            </summary>
            <param name="messageReactions">The list of reactions added.</param>
            <param name="turnContext">A strongly-typed context object for this turn.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <remarks>
            Message reactions correspond to the user adding a 'like' or 'sad' etc. (often an emoji) to a
            previously sent message on the conversation. Message reactions are supported by only a few channels.
            The activity that the message is in reaction to is identified by the activity's
            <see cref="P:Microsoft.Bot.Schema.Activity.ReplyToId"/> property. The value of this property is the activity ID
            of a previously sent activity. When the bot sends an activity, the channel assigns an ID to it,
            which is available in the <see cref="P:Microsoft.Bot.Schema.ResourceResponse.Id"/> of the result.
            </remarks>
            <seealso cref="M:Microsoft.Bot.Builder.ActivityHandler.OnMessageReactionActivityAsync(Microsoft.Bot.Builder.ITurnContext{Microsoft.Bot.Schema.IMessageReactionActivity},System.Threading.CancellationToken)"/>
            <seealso cref="P:Microsoft.Bot.Schema.Activity.Id"/>
            <seealso cref="M:Microsoft.Bot.Builder.ITurnContext.SendActivityAsync(Microsoft.Bot.Schema.IActivity,System.Threading.CancellationToken)"/>
            <seealso cref="P:Microsoft.Bot.Schema.ResourceResponse.Id"/>
        </member>
        <member name="M:Microsoft.Bot.Builder.ActivityHandler.OnReactionsRemovedAsync(System.Collections.Generic.IList{Microsoft.Bot.Schema.MessageReaction},Microsoft.Bot.Builder.ITurnContext{Microsoft.Bot.Schema.IMessageReactionActivity},System.Threading.CancellationToken)">
            <summary>
            Override this in a derived class to provide logic for when reactions to a previous activity
            are removed from the conversation.
            </summary>
            <param name="messageReactions">The list of reactions removed.</param>
            <param name="turnContext">A strongly-typed context object for this turn.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <remarks>
            Message reactions correspond to the user adding a 'like' or 'sad' etc. (often an emoji) to a
            previously sent message on the conversation. Message reactions are supported by only a few channels.
            The activity that the message is in reaction to is identified by the activity's
            <see cref="P:Microsoft.Bot.Schema.Activity.ReplyToId"/> property. The value of this property is the activity ID
            of a previously sent activity. When the bot sends an activity, the channel assigns an ID to it,
            which is available in the <see cref="P:Microsoft.Bot.Schema.ResourceResponse.Id"/> of the result.
            </remarks>
            <seealso cref="M:Microsoft.Bot.Builder.ActivityHandler.OnMessageReactionActivityAsync(Microsoft.Bot.Builder.ITurnContext{Microsoft.Bot.Schema.IMessageReactionActivity},System.Threading.CancellationToken)"/>
            <seealso cref="P:Microsoft.Bot.Schema.Activity.Id"/>
            <seealso cref="M:Microsoft.Bot.Builder.ITurnContext.SendActivityAsync(Microsoft.Bot.Schema.IActivity,System.Threading.CancellationToken)"/>
            <seealso cref="P:Microsoft.Bot.Schema.ResourceResponse.Id"/>
        </member>
        <member name="M:Microsoft.Bot.Builder.ActivityHandler.OnEventActivityAsync(Microsoft.Bot.Builder.ITurnContext{Microsoft.Bot.Schema.IEventActivity},System.Threading.CancellationToken)">
             <summary>
             Invoked when an event activity is received from the connector when the base behavior of
             <see cref="M:Microsoft.Bot.Builder.ActivityHandler.OnTurnAsync(Microsoft.Bot.Builder.ITurnContext,System.Threading.CancellationToken)"/> is used.
             Event activities can be used to communicate many different things.
             By default, this method will call <see cref="M:Microsoft.Bot.Builder.ActivityHandler.OnTokenResponseEventAsync(Microsoft.Bot.Builder.ITurnContext{Microsoft.Bot.Schema.IEventActivity},System.Threading.CancellationToken)"/> if the
             activity's name is <c>tokens/response</c> or <see cref="M:Microsoft.Bot.Builder.ActivityHandler.OnEventAsync(Microsoft.Bot.Builder.ITurnContext{Microsoft.Bot.Schema.IEventActivity},System.Threading.CancellationToken)"/> otherwise.
             A <c>tokens/response</c> event can be triggered by an <see cref="T:Microsoft.Bot.Schema.OAuthCard"/>.
             </summary>
             <param name="turnContext">A strongly-typed context object for this turn.</param>
             <param name="cancellationToken">A cancellation token that can be used by other objects
             or threads to receive notice of cancellation.</param>
             <returns>A task that represents the work queued to execute.</returns>
             <remarks>
             When the <see cref="M:Microsoft.Bot.Builder.ActivityHandler.OnTurnAsync(Microsoft.Bot.Builder.ITurnContext,System.Threading.CancellationToken)"/>
             method receives an event activity, it calls this method.
             If the event <see cref="P:Microsoft.Bot.Schema.IEventActivity.Name"/> is `tokens/response`, it calls
             <see cref="M:Microsoft.Bot.Builder.ActivityHandler.OnTokenResponseEventAsync(Microsoft.Bot.Builder.ITurnContext{Microsoft.Bot.Schema.IEventActivity},System.Threading.CancellationToken)"/>;
             otherwise, it calls <see cref="M:Microsoft.Bot.Builder.ActivityHandler.OnEventAsync(Microsoft.Bot.Builder.ITurnContext{Microsoft.Bot.Schema.IEventActivity},System.Threading.CancellationToken)"/>.
            
             In a derived class, override this method to add logic that applies to all event activities.
             Add logic to apply before the specific event-handling logic before the call to the base class
             <see cref="M:Microsoft.Bot.Builder.ActivityHandler.OnEventActivityAsync(Microsoft.Bot.Builder.ITurnContext{Microsoft.Bot.Schema.IEventActivity},System.Threading.CancellationToken)"/> method.
             Add logic to apply after the specific event-handling logic after the call to the base class
             <see cref="M:Microsoft.Bot.Builder.ActivityHandler.OnEventActivityAsync(Microsoft.Bot.Builder.ITurnContext{Microsoft.Bot.Schema.IEventActivity},System.Threading.CancellationToken)"/> method.
            
             Event activities communicate programmatic information from a client or channel to a bot.
             The meaning of an event activity is defined by the <see cref="P:Microsoft.Bot.Schema.IEventActivity.Name"/> property,
             which is meaningful within the scope of a channel.
             A `tokens/response` event can be triggered by an <see cref="T:Microsoft.Bot.Schema.OAuthCard"/> or an OAuth prompt.
             </remarks>
             <seealso cref="M:Microsoft.Bot.Builder.ActivityHandler.OnTurnAsync(Microsoft.Bot.Builder.ITurnContext,System.Threading.CancellationToken)"/>
             <seealso cref="M:Microsoft.Bot.Builder.ActivityHandler.OnTokenResponseEventAsync(Microsoft.Bot.Builder.ITurnContext{Microsoft.Bot.Schema.IEventActivity},System.Threading.CancellationToken)"/>
             <seealso cref="M:Microsoft.Bot.Builder.ActivityHandler.OnEventAsync(Microsoft.Bot.Builder.ITurnContext{Microsoft.Bot.Schema.IEventActivity},System.Threading.CancellationToken)"/>
        </member>
        <member name="M:Microsoft.Bot.Builder.ActivityHandler.OnTokenResponseEventAsync(Microsoft.Bot.Builder.ITurnContext{Microsoft.Bot.Schema.IEventActivity},System.Threading.CancellationToken)">
             <summary>
             Invoked when a <c>tokens/response</c> event is received when the base behavior of
             <see cref="M:Microsoft.Bot.Builder.ActivityHandler.OnEventActivityAsync(Microsoft.Bot.Builder.ITurnContext{Microsoft.Bot.Schema.IEventActivity},System.Threading.CancellationToken)"/> is used.
             If using an <c>OAuthPrompt</c>, override this method to forward this <see cref="T:Microsoft.Bot.Schema.Activity"/> to the current dialog.
             By default, this method does nothing.
             </summary>
             <param name="turnContext">A strongly-typed context object for this turn.</param>
             <param name="cancellationToken">A cancellation token that can be used by other objects
             or threads to receive notice of cancellation.</param>
             <returns>A task that represents the work queued to execute.</returns>
             <remarks>
             When the <see cref="M:Microsoft.Bot.Builder.ActivityHandler.OnEventActivityAsync(Microsoft.Bot.Builder.ITurnContext{Microsoft.Bot.Schema.IEventActivity},System.Threading.CancellationToken)"/>
             method receives an event with a <see cref="P:Microsoft.Bot.Schema.IEventActivity.Name"/> of `tokens/response`,
             it calls this method.
            
             If your bot uses the <c>OAuthPrompt</c>, forward the incoming <see cref="T:Microsoft.Bot.Schema.Activity"/> to
             the current dialog.
             </remarks>
             <seealso cref="M:Microsoft.Bot.Builder.ActivityHandler.OnEventActivityAsync(Microsoft.Bot.Builder.ITurnContext{Microsoft.Bot.Schema.IEventActivity},System.Threading.CancellationToken)"/>
             <seealso cref="M:Microsoft.Bot.Builder.ActivityHandler.OnEventAsync(Microsoft.Bot.Builder.ITurnContext{Microsoft.Bot.Schema.IEventActivity},System.Threading.CancellationToken)"/>
        </member>
        <member name="M:Microsoft.Bot.Builder.ActivityHandler.OnEventAsync(Microsoft.Bot.Builder.ITurnContext{Microsoft.Bot.Schema.IEventActivity},System.Threading.CancellationToken)">
            <summary>
            Invoked when an event other than <c>tokens/response</c> is received when the base behavior of
            <see cref="M:Microsoft.Bot.Builder.ActivityHandler.OnEventActivityAsync(Microsoft.Bot.Builder.ITurnContext{Microsoft.Bot.Schema.IEventActivity},System.Threading.CancellationToken)"/> is used.
            This method could optionally be overridden if the bot is meant to handle miscellaneous events.
            By default, this method does nothing.
            </summary>
            <param name="turnContext">A strongly-typed context object for this turn.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <remarks>
            When the <see cref="M:Microsoft.Bot.Builder.ActivityHandler.OnEventActivityAsync(Microsoft.Bot.Builder.ITurnContext{Microsoft.Bot.Schema.IEventActivity},System.Threading.CancellationToken)"/>
            method receives an event with a <see cref="P:Microsoft.Bot.Schema.IEventActivity.Name"/> other than `tokens/response`,
            it calls this method.
            </remarks>
            <seealso cref="M:Microsoft.Bot.Builder.ActivityHandler.OnEventActivityAsync(Microsoft.Bot.Builder.ITurnContext{Microsoft.Bot.Schema.IEventActivity},System.Threading.CancellationToken)"/>
            <seealso cref="M:Microsoft.Bot.Builder.ActivityHandler.OnTokenResponseEventAsync(Microsoft.Bot.Builder.ITurnContext{Microsoft.Bot.Schema.IEventActivity},System.Threading.CancellationToken)"/>
        </member>
        <member name="M:Microsoft.Bot.Builder.ActivityHandler.OnInvokeActivityAsync(Microsoft.Bot.Builder.ITurnContext{Microsoft.Bot.Schema.IInvokeActivity},System.Threading.CancellationToken)">
            <summary>
            Invoked when an invoke activity is received from the connector when the base behavior of
            <see cref="M:Microsoft.Bot.Builder.ActivityHandler.OnTurnAsync(Microsoft.Bot.Builder.ITurnContext,System.Threading.CancellationToken)"/> is used.
            Invoke activities can be used to communicate many different things.
            By default, this method will call <see cref="M:Microsoft.Bot.Builder.ActivityHandler.OnSignInInvokeAsync(Microsoft.Bot.Builder.ITurnContext{Microsoft.Bot.Schema.IInvokeActivity},System.Threading.CancellationToken)"/> if the
            activity's name is <c>signin/verifyState</c> or <c>signin/tokenExchange</c>.
            A <c>signin/verifyState</c> or <c>signin/tokenExchange</c> invoke can be triggered by an <see cref="T:Microsoft.Bot.Schema.OAuthCard"/>.
            </summary>
            <param name="turnContext">A strongly-typed context object for this turn.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <remarks>
            When the <see cref="M:Microsoft.Bot.Builder.ActivityHandler.OnTurnAsync(Microsoft.Bot.Builder.ITurnContext,System.Threading.CancellationToken)"/>
            method receives an invoke activity, it calls this method.
            If the event <see cref="P:Microsoft.Bot.Schema.IInvokeActivity.Name"/> is `signin/verifyState` or `signin/tokenExchange`, it calls
            <see cref="M:Microsoft.Bot.Builder.ActivityHandler.OnSignInInvokeAsync(Microsoft.Bot.Builder.ITurnContext{Microsoft.Bot.Schema.IInvokeActivity},System.Threading.CancellationToken)"/>
            Invoke activities communicate programmatic commands from a client or channel to a bot.
            The meaning of an invoke activity is defined by the <see cref="P:Microsoft.Bot.Schema.IInvokeActivity.Name"/> property,
            which is meaningful within the scope of a channel.
            A `signin/verifyState` or `signin/tokenExchange` invoke can be triggered by an <see cref="T:Microsoft.Bot.Schema.OAuthCard"/> or an OAuth prompt.
            </remarks>
            <seealso cref="M:Microsoft.Bot.Builder.ActivityHandler.OnTurnAsync(Microsoft.Bot.Builder.ITurnContext,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:Microsoft.Bot.Builder.ActivityHandler.OnSignInInvokeAsync(Microsoft.Bot.Builder.ITurnContext{Microsoft.Bot.Schema.IInvokeActivity},System.Threading.CancellationToken)">
             <summary>
             Invoked when a <c>signin/verifyState</c> or <c>signin/tokenExchange</c> event is received when the base behavior of
             <see cref="M:Microsoft.Bot.Builder.ActivityHandler.OnInvokeActivityAsync(Microsoft.Bot.Builder.ITurnContext{Microsoft.Bot.Schema.IInvokeActivity},System.Threading.CancellationToken)"/> is used.
             If using an <c>OAuthPrompt</c>, override this method to forward this <see cref="T:Microsoft.Bot.Schema.Activity"/> to the current dialog.
             By default, this method does nothing.
             </summary>
             <param name="turnContext">A strongly-typed context object for this turn.</param>
             <param name="cancellationToken">A cancellation token that can be used by other objects
             or threads to receive notice of cancellation.</param>
             <returns>A task that represents the work queued to execute.</returns>
             <remarks>
             When the <see cref="M:Microsoft.Bot.Builder.ActivityHandler.OnInvokeActivityAsync(Microsoft.Bot.Builder.ITurnContext{Microsoft.Bot.Schema.IInvokeActivity},System.Threading.CancellationToken)"/>
             method receives an Invoke with a <see cref="P:Microsoft.Bot.Schema.IInvokeActivity.Name"/> of `tokens/response`,
             it calls this method.
            
             If your bot uses the <c>OAuthPrompt</c>, forward the incoming <see cref="T:Microsoft.Bot.Schema.Activity"/> to
             the current dialog.
             </remarks>
             <seealso cref="M:Microsoft.Bot.Builder.ActivityHandler.OnInvokeActivityAsync(Microsoft.Bot.Builder.ITurnContext{Microsoft.Bot.Schema.IInvokeActivity},System.Threading.CancellationToken)"/>
        </member>
        <member name="M:Microsoft.Bot.Builder.ActivityHandler.OnAdaptiveCardInvokeAsync(Microsoft.Bot.Builder.ITurnContext{Microsoft.Bot.Schema.IInvokeActivity},Microsoft.Bot.Schema.AdaptiveCardInvokeValue,System.Threading.CancellationToken)">
            <summary>
            Invoked when the bot is sent an Adaptive Card Action Execute.
            </summary>
            <param name="turnContext">A strongly-typed context object for this turn.</param>
            <param name="invokeValue">A stringly-typed object from the incoming activity's Value.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <remarks>
            When the <see cref="M:Microsoft.Bot.Builder.ActivityHandler.OnInvokeActivityAsync(Microsoft.Bot.Builder.ITurnContext{Microsoft.Bot.Schema.IInvokeActivity},System.Threading.CancellationToken)"/>
            method receives an Invoke with a <see cref="P:Microsoft.Bot.Schema.IInvokeActivity.Name"/> of `adaptiveCard/action`,
            it calls this method.
            </remarks>
            <seealso cref="M:Microsoft.Bot.Builder.ActivityHandler.OnInvokeActivityAsync(Microsoft.Bot.Builder.ITurnContext{Microsoft.Bot.Schema.IInvokeActivity},System.Threading.CancellationToken)"/>
        </member>
        <member name="M:Microsoft.Bot.Builder.ActivityHandler.OnEndOfConversationActivityAsync(Microsoft.Bot.Builder.ITurnContext{Microsoft.Bot.Schema.IEndOfConversationActivity},System.Threading.CancellationToken)">
            <summary>
            Override this in a derived class to provide logic specific to
            <see cref="F:Microsoft.Bot.Schema.ActivityTypes.EndOfConversation"/> activities, such as the conversational logic.
            </summary>
            <param name="turnContext">A strongly-typed context object for this turn.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <remarks>
            When the <see cref="M:Microsoft.Bot.Builder.ActivityHandler.OnTurnAsync(Microsoft.Bot.Builder.ITurnContext,System.Threading.CancellationToken)"/>
            method receives a message activity, it calls this method.
            </remarks>
            <seealso cref="M:Microsoft.Bot.Builder.ActivityHandler.OnTurnAsync(Microsoft.Bot.Builder.ITurnContext,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:Microsoft.Bot.Builder.ActivityHandler.OnTypingActivityAsync(Microsoft.Bot.Builder.ITurnContext{Microsoft.Bot.Schema.ITypingActivity},System.Threading.CancellationToken)">
            <summary>
            Override this in a derived class to provide logic specific to
            <see cref="F:Microsoft.Bot.Schema.ActivityTypes.Typing"/> activities, such as the conversational logic.
            </summary>
            <param name="turnContext">A strongly-typed context object for this turn.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <remarks>
            When the <see cref="M:Microsoft.Bot.Builder.ActivityHandler.OnTurnAsync(Microsoft.Bot.Builder.ITurnContext,System.Threading.CancellationToken)"/>
            method receives a message activity, it calls this method.
            </remarks>
            <seealso cref="M:Microsoft.Bot.Builder.ActivityHandler.OnTurnAsync(Microsoft.Bot.Builder.ITurnContext,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:Microsoft.Bot.Builder.ActivityHandler.OnInstallationUpdateActivityAsync(Microsoft.Bot.Builder.ITurnContext{Microsoft.Bot.Schema.IInstallationUpdateActivity},System.Threading.CancellationToken)">
            <summary>
            Override this in a derived class to provide logic specific to
            <see cref="F:Microsoft.Bot.Schema.ActivityTypes.InstallationUpdate"/> activities.
            </summary>
            <param name="turnContext">A strongly-typed context object for this turn.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <remarks>
            When the <see cref="M:Microsoft.Bot.Builder.ActivityHandler.OnTurnAsync(Microsoft.Bot.Builder.ITurnContext,System.Threading.CancellationToken)"/>
            method receives a installation update activity, it calls this method.
            </remarks>
            <seealso cref="M:Microsoft.Bot.Builder.ActivityHandler.OnTurnAsync(Microsoft.Bot.Builder.ITurnContext,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:Microsoft.Bot.Builder.ActivityHandler.OnInstallationUpdateAddAsync(Microsoft.Bot.Builder.ITurnContext{Microsoft.Bot.Schema.IInstallationUpdateActivity},System.Threading.CancellationToken)">
            <summary>
            Override this in a derived class to provide logic specific to
            <see cref="F:Microsoft.Bot.Schema.ActivityTypes.InstallationUpdate"/> activities with 'action' set to 'add'.
            </summary>
            <param name="turnContext">A strongly-typed context object for this turn.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <remarks>
            When the <see cref="M:Microsoft.Bot.Builder.ActivityHandler.OnTurnAsync(Microsoft.Bot.Builder.ITurnContext,System.Threading.CancellationToken)"/>
            method receives a installation update activity, it calls this method.
            </remarks>
            <seealso cref="M:Microsoft.Bot.Builder.ActivityHandler.OnTurnAsync(Microsoft.Bot.Builder.ITurnContext,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:Microsoft.Bot.Builder.ActivityHandler.OnInstallationUpdateRemoveAsync(Microsoft.Bot.Builder.ITurnContext{Microsoft.Bot.Schema.IInstallationUpdateActivity},System.Threading.CancellationToken)">
            <summary>
            Override this in a derived class to provide logic specific to
            <see cref="F:Microsoft.Bot.Schema.ActivityTypes.InstallationUpdate"/> activities with 'action' set to 'remove'.
            </summary>
            <param name="turnContext">A strongly-typed context object for this turn.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <remarks>
            When the <see cref="M:Microsoft.Bot.Builder.ActivityHandler.OnTurnAsync(Microsoft.Bot.Builder.ITurnContext,System.Threading.CancellationToken)"/>
            method receives a installation update activity, it calls this method.
            </remarks>
            <seealso cref="M:Microsoft.Bot.Builder.ActivityHandler.OnTurnAsync(Microsoft.Bot.Builder.ITurnContext,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:Microsoft.Bot.Builder.ActivityHandler.OnCommandActivityAsync(Microsoft.Bot.Builder.ITurnContext{Microsoft.Bot.Schema.ICommandActivity},System.Threading.CancellationToken)">
             <summary>
             Invoked when a command activity is received when the base behavior of
             <see cref="M:Microsoft.Bot.Builder.ActivityHandler.OnTurnAsync(Microsoft.Bot.Builder.ITurnContext,System.Threading.CancellationToken)"/> is used.
             Commands are requests to perform an action and receivers typically respond with
             one or more commandResult activities. Receivers are also expected to explicitly
             reject unsupported command activities.
             </summary>
             <param name="turnContext">A strongly-typed context object for this turn.</param>
             <param name="cancellationToken">A cancellation token that can be used by other objects
             or threads to receive notice of cancellation.</param>
             <returns>A task that represents the work queued to execute.</returns>
             <remarks>
             When the <see cref="M:Microsoft.Bot.Builder.ActivityHandler.OnTurnAsync(Microsoft.Bot.Builder.ITurnContext,System.Threading.CancellationToken)"/>
             method receives a command activity, it calls this method.
             
             In a derived class, override this method to add logic that applies to all comand activities.
             Add logic to apply before the specific command-handling logic before the call to the base class
             <see cref="M:Microsoft.Bot.Builder.ActivityHandler.OnCommandActivityAsync(Microsoft.Bot.Builder.ITurnContext{Microsoft.Bot.Schema.ICommandActivity},System.Threading.CancellationToken)"/> method.
             Add logic to apply after the specific command-handling logic after the call to the base class
             <see cref="M:Microsoft.Bot.Builder.ActivityHandler.OnCommandActivityAsync(Microsoft.Bot.Builder.ITurnContext{Microsoft.Bot.Schema.ICommandActivity},System.Threading.CancellationToken)"/> method.
            
             Command activities communicate programmatic information from a client or channel to a bot.
             The meaning of an command activity is defined by the <see cref="P:Microsoft.Bot.Schema.ICommandActivity.Name"/> property,
             which is meaningful within the scope of a channel.
             </remarks>
             <seealso cref="M:Microsoft.Bot.Builder.ActivityHandler.OnTurnAsync(Microsoft.Bot.Builder.ITurnContext,System.Threading.CancellationToken)"/>
             <seealso cref="M:Microsoft.Bot.Builder.ActivityHandler.OnCommandActivityAsync(Microsoft.Bot.Builder.ITurnContext{Microsoft.Bot.Schema.ICommandActivity},System.Threading.CancellationToken)"/>
        </member>
        <member name="M:Microsoft.Bot.Builder.ActivityHandler.OnCommandResultActivityAsync(Microsoft.Bot.Builder.ITurnContext{Microsoft.Bot.Schema.ICommandResultActivity},System.Threading.CancellationToken)">
             <summary>
             Invoked when a CommandResult activity is received when the base behavior of
             <see cref="M:Microsoft.Bot.Builder.ActivityHandler.OnTurnAsync(Microsoft.Bot.Builder.ITurnContext,System.Threading.CancellationToken)"/> is used.
             CommandResult activities can be used to communicate the result of a command execution.
             </summary>
             <param name="turnContext">A strongly-typed context object for this turn.</param>
             <param name="cancellationToken">A cancellation token that can be used by other objects
             or threads to receive notice of cancellation.</param>
             <returns>A task that represents the work queued to execute.</returns>
             <remarks>
             When the <see cref="M:Microsoft.Bot.Builder.ActivityHandler.OnTurnAsync(Microsoft.Bot.Builder.ITurnContext,System.Threading.CancellationToken)"/>
             method receives a CommandResult activity, it calls this method.
             
             In a derived class, override this method to add logic that applies to all comand activities.
             Add logic to apply before the specific CommandResult-handling logic before the call to the base class
             <see cref="M:Microsoft.Bot.Builder.ActivityHandler.OnCommandResultActivityAsync(Microsoft.Bot.Builder.ITurnContext{Microsoft.Bot.Schema.ICommandResultActivity},System.Threading.CancellationToken)"/> method.
             Add logic to apply after the specific CommandResult-handling logic after the call to the base class
             <see cref="M:Microsoft.Bot.Builder.ActivityHandler.OnCommandResultActivityAsync(Microsoft.Bot.Builder.ITurnContext{Microsoft.Bot.Schema.ICommandResultActivity},System.Threading.CancellationToken)"/> method.
            
             CommandResult activities communicate programmatic information from a client or channel to a bot.
             The meaning of an CommandResult activity is defined by the <see cref="P:Microsoft.Bot.Schema.ICommandResultActivity.Name"/> property,
             which is meaningful within the scope of a channel.
             </remarks>
             <seealso cref="M:Microsoft.Bot.Builder.ActivityHandler.OnTurnAsync(Microsoft.Bot.Builder.ITurnContext,System.Threading.CancellationToken)"/>
             <seealso cref="M:Microsoft.Bot.Builder.ActivityHandler.OnCommandResultActivityAsync(Microsoft.Bot.Builder.ITurnContext{Microsoft.Bot.Schema.ICommandResultActivity},System.Threading.CancellationToken)"/>
        </member>
        <member name="M:Microsoft.Bot.Builder.ActivityHandler.OnUnrecognizedActivityTypeAsync(Microsoft.Bot.Builder.ITurnContext,System.Threading.CancellationToken)">
            <summary>
            Invoked when an activity other than a message, conversation update, or event is received when the base behavior of
            <see cref="M:Microsoft.Bot.Builder.ActivityHandler.OnTurnAsync(Microsoft.Bot.Builder.ITurnContext,System.Threading.CancellationToken)"/> is used.
            If overridden, this could potentially respond to any of the other activity types like
            <see cref="F:Microsoft.Bot.Schema.ActivityTypes.ContactRelationUpdate"/> or <see cref="F:Microsoft.Bot.Schema.ActivityTypes.EndOfConversation"/>.
            By default, this method does nothing.
            </summary>
            <param name="turnContext">The context object for this turn.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <remarks>
            When the <see cref="M:Microsoft.Bot.Builder.ActivityHandler.OnTurnAsync(Microsoft.Bot.Builder.ITurnContext,System.Threading.CancellationToken)"/>
            method receives an activity that is not a message, conversation update, message reaction,
            or event activity, it calls this method.
            </remarks>
            <seealso cref="M:Microsoft.Bot.Builder.ActivityHandler.OnTurnAsync(Microsoft.Bot.Builder.ITurnContext,System.Threading.CancellationToken)"/>
            <seealso cref="M:Microsoft.Bot.Builder.ActivityHandler.OnMessageActivityAsync(Microsoft.Bot.Builder.ITurnContext{Microsoft.Bot.Schema.IMessageActivity},System.Threading.CancellationToken)"/>
            <seealso cref="M:Microsoft.Bot.Builder.ActivityHandler.OnConversationUpdateActivityAsync(Microsoft.Bot.Builder.ITurnContext{Microsoft.Bot.Schema.IConversationUpdateActivity},System.Threading.CancellationToken)"/>
            <seealso cref="M:Microsoft.Bot.Builder.ActivityHandler.OnMessageReactionActivityAsync(Microsoft.Bot.Builder.ITurnContext{Microsoft.Bot.Schema.IMessageReactionActivity},System.Threading.CancellationToken)"/>
            <seealso cref="M:Microsoft.Bot.Builder.ActivityHandler.OnEventActivityAsync(Microsoft.Bot.Builder.ITurnContext{Microsoft.Bot.Schema.IEventActivity},System.Threading.CancellationToken)"/>
            <seealso cref="P:Microsoft.Bot.Schema.Activity.Type"/>
            <seealso cref="T:Microsoft.Bot.Schema.ActivityTypes"/>
        </member>
        <member name="T:Microsoft.Bot.Builder.ActivityHandler.InvokeResponseException">
            <summary>
            A custom exception for invoke response errors.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Builder.ActivityHandler.InvokeResponseException.#ctor(System.Net.HttpStatusCode,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Builder.ActivityHandler.InvokeResponseException"/> class.
            </summary>
            <param name="statusCode">The Http status code of the error.</param>
            <param name="body">The body of the exception. Default is null.</param>
        </member>
        <member name="M:Microsoft.Bot.Builder.ActivityHandler.InvokeResponseException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Builder.ActivityHandler.InvokeResponseException"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Builder.ActivityHandler.InvokeResponseException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Builder.ActivityHandler.InvokeResponseException"/> class.
            </summary>
            <param name="message">The message that explains the reason for the exception, or an empty string.</param>
        </member>
        <member name="M:Microsoft.Bot.Builder.ActivityHandler.InvokeResponseException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Builder.ActivityHandler.InvokeResponseException"/> class.
            </summary>
            <param name="message">The message that explains the reason for the exception, or an empty string.</param>
            <param name="innerException">Gets the System.Exception instance that caused the current exception.</param>
        </member>
        <member name="M:Microsoft.Bot.Builder.ActivityHandler.InvokeResponseException.CreateInvokeResponse">
            <summary>
            A factory method that creates a new <see cref="T:Microsoft.Bot.Builder.InvokeResponse"/> object with the status code and body of the current object..
            </summary>
            <returns>A new <see cref="T:Microsoft.Bot.Builder.InvokeResponse"/> object.</returns>
        </member>
        <member name="T:Microsoft.Bot.Builder.AdapterExtensions">
            <summary>
            Defines extension methods for the <see cref="T:Microsoft.Bot.Builder.BotAdapter"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Builder.AdapterExtensions.UseStorage(Microsoft.Bot.Builder.BotAdapter,Microsoft.Bot.Builder.IStorage)">
            <summary>
            Adds middleware to the adapter to register an <see cref="T:Microsoft.Bot.Builder.IStorage"/> object on the turn context.
            The middleware registers the state objects on the turn context at the start of each turn.
            </summary>
            <param name="botAdapter">The adapter on which to register the storage object.</param>
            <param name="storage">The storage object to register.</param>
            <returns>The updated adapter.</returns>
            <remarks>
            To get the storage object, use the turn context's <see cref="P:Microsoft.Bot.Builder.ITurnContext.TurnState"/>
            property's <see cref="M:Microsoft.Bot.Builder.TurnContextStateCollection.Get``1"/> method.
            </remarks>
        </member>
        <member name="M:Microsoft.Bot.Builder.AdapterExtensions.UseBotState(Microsoft.Bot.Builder.BotAdapter,Microsoft.Bot.Builder.BotState[])">
            <summary>
            Adds middleware to the adapter to register one or more <see cref="T:Microsoft.Bot.Builder.BotState"/> objects on the turn context.
            The middleware registers the state objects on the turn context at the start of each turn.
            </summary>
            <param name="botAdapter">The adapter on which to register the state objects.</param>
            <param name="botStates">The state objects to register.</param>
            <returns>The updated adapter.</returns>
            <remarks>
            To get the state objects, use the turn context's <see cref="P:Microsoft.Bot.Builder.ITurnContext.TurnState"/>
            property's <see cref="M:Microsoft.Bot.Builder.TurnContextStateCollection.Get``1(System.String)"/> method, where the `key`
            parameter is the fully qualified name of the type of bot state to get.
            </remarks>
        </member>
        <member name="M:Microsoft.Bot.Builder.AdapterExtensions.UseState(Microsoft.Bot.Builder.BotAdapter,Microsoft.Bot.Builder.UserState,Microsoft.Bot.Builder.ConversationState,System.Boolean)">
            <summary>
            Registers user and conversation state objects with the adapter. These objects will be available via the turn context's
            <see cref="P:Microsoft.Bot.Builder.TurnContext.TurnState"/>.<see cref="M:Microsoft.Bot.Builder.TurnContextStateCollection.Get``1"/> method.
            </summary>
            <param name="botAdapter">The <see cref="T:Microsoft.Bot.Builder.BotAdapter"/> on which to register the objects.</param>
            <param name="userState">The <see cref="T:Microsoft.Bot.Builder.UserState"/> object to register.</param>
            <param name="conversationState">The <see cref="T:Microsoft.Bot.Builder.ConversationState"/> object to register.</param>
            <param name="auto">`true` to automatically persist state each turn; otherwise, `false`.
            When false, it is your responsibility to persist state each turn.</param>
            <returns>The updated adapter.</returns>
            <remarks>
            This adds <see cref="T:Microsoft.Bot.Builder.IMiddleware"/> to register the user and conversation state management objects.
            If <paramref name="auto"/> is true, this also adds middleware to automatically persist state before each turn ends.
            </remarks>
        </member>
        <member name="T:Microsoft.Bot.Builder.Adapters.TestAdapter">
            <summary>
            A mock adapter that can be used for unit testing of bot logic.
            </summary>
            <seealso cref="T:Microsoft.Bot.Builder.Adapters.TestFlow"/>
        </member>
        <member name="M:Microsoft.Bot.Builder.Adapters.TestAdapter.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Builder.Adapters.TestAdapter"/> class.
            </summary>
            <param name="channelId">The target <see cref="T:Microsoft.Bot.Connector.Channels"/> for the test the will be passed to the bot.</param>
            <param name="sendTraceActivity">Indicates whether the adapter should add to its <see cref="P:Microsoft.Bot.Builder.Adapters.TestAdapter.ActiveQueue"/>
            any trace activities generated by the bot.</param>
        </member>
        <member name="M:Microsoft.Bot.Builder.Adapters.TestAdapter.#ctor(Microsoft.Bot.Schema.ConversationReference,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Builder.Adapters.TestAdapter"/> class.
            </summary>
            <param name="conversation">A reference to the conversation to begin the adapter state with.</param>
            <param name="sendTraceActivity">Indicates whether the adapter should add to its <see cref="P:Microsoft.Bot.Builder.Adapters.TestAdapter.ActiveQueue"/>
            any trace activities generated by the bot.</param>
        </member>
        <member name="P:Microsoft.Bot.Builder.Adapters.TestAdapter.EnableTrace">
            <summary>
            Gets or sets a value indicating whether to send trace activities.
            </summary>
            <value>
            A value indicating whether to send trace activities.
            </value>
        </member>
        <member name="P:Microsoft.Bot.Builder.Adapters.TestAdapter.Locale">
            <summary>
            Gets or sets the locale for the conversation.
            </summary>
            <value>
            The locale for the conversation.
            </value>
        </member>
        <member name="P:Microsoft.Bot.Builder.Adapters.TestAdapter.ActiveQueue">
            <summary>
            Gets the queue of responses from the bot.
            </summary>
            <value>The queue of responses from the bot.</value>
        </member>
        <member name="P:Microsoft.Bot.Builder.Adapters.TestAdapter.Conversation">
            <summary>
            Gets or sets a reference to the current conversation.
            </summary>
            <value>A reference to the current conversation.</value>
        </member>
        <member name="M:Microsoft.Bot.Builder.Adapters.TestAdapter.CreateConversation(System.String,System.String,System.String)">
            <summary>
            Create a ConversationReference. 
            </summary>
            <param name="name">name of the conversation (also ID).</param>
            <param name="user">name of the user (also ID) default:User1.</param>
            <param name="bot">name of the bot (also ID) default:Bot.</param>
            <returns>ConversationReference.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.Adapters.TestAdapter.Use(Microsoft.Bot.Builder.IMiddleware)">
            <summary>
            Adds middleware to the adapter's pipeline.
            </summary>
            <param name="middleware">The middleware to add.</param>
            <returns>The updated adapter object.</returns>
            <remarks>Middleware is added to the adapter at initialization time.
            For each turn, the adapter calls middleware in the order in which you added it.
            </remarks>
        </member>
        <member name="M:Microsoft.Bot.Builder.Adapters.TestAdapter.ProcessActivityAsync(Microsoft.Bot.Schema.Activity,Microsoft.Bot.Builder.BotCallbackHandler,System.Threading.CancellationToken)">
            <summary>
            Receives an activity and runs it through the middleware pipeline.
            </summary>
            <param name="activity">The activity to process.</param>
            <param name="callback">The bot logic to invoke.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.Adapters.TestAdapter.ProcessActivityAsync(System.Security.Claims.ClaimsIdentity,Microsoft.Bot.Schema.Activity,Microsoft.Bot.Builder.BotCallbackHandler,System.Threading.CancellationToken)">
            <summary>
            Creates a turn context and runs the middleware pipeline for an incoming activity.
            </summary>
            <param name="claimsIdentity">A <see cref="T:System.Security.Claims.ClaimsIdentity"/> for the request.</param>
            <param name="activity">The incoming activity.</param>
            <param name="callback">The code to run at the end of the adapter's middleware pipeline.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.Adapters.TestAdapter.SendActivitiesAsync(Microsoft.Bot.Builder.ITurnContext,Microsoft.Bot.Schema.Activity[],System.Threading.CancellationToken)">
            <summary>
            Sends activities to the conversation.
            </summary>
            <param name="turnContext">Context for the current turn of conversation.</param>
            <param name="activities">The activities to send.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <remarks>If the activities are successfully sent, the task result contains
            an array of <see cref="T:Microsoft.Bot.Schema.ResourceResponse"/> objects containing the IDs that
            the receiving channel assigned to the activities.</remarks>
            <seealso cref="M:Microsoft.Bot.Builder.ITurnContext.OnSendActivities(Microsoft.Bot.Builder.SendActivitiesHandler)"/>
        </member>
        <member name="M:Microsoft.Bot.Builder.Adapters.TestAdapter.UpdateActivityAsync(Microsoft.Bot.Builder.ITurnContext,Microsoft.Bot.Schema.Activity,System.Threading.CancellationToken)">
            <summary>
            Replaces an existing activity in the <see cref="P:Microsoft.Bot.Builder.Adapters.TestAdapter.ActiveQueue"/>.
            </summary>
            <param name="turnContext">Context for the current turn of conversation.</param>
            <param name="activity">New replacement activity.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <remarks>If the activity is successfully sent, the task result contains
            a <see cref="T:Microsoft.Bot.Schema.ResourceResponse"/> object containing the ID that the receiving
            channel assigned to the activity.
            <para>Before calling this, set the ID of the replacement activity to the ID
            of the activity to replace.</para></remarks>
            <seealso cref="M:Microsoft.Bot.Builder.ITurnContext.OnUpdateActivity(Microsoft.Bot.Builder.UpdateActivityHandler)"/>
        </member>
        <member name="M:Microsoft.Bot.Builder.Adapters.TestAdapter.DeleteActivityAsync(Microsoft.Bot.Builder.ITurnContext,Microsoft.Bot.Schema.ConversationReference,System.Threading.CancellationToken)">
            <summary>
            Deletes an existing activity in the <see cref="P:Microsoft.Bot.Builder.Adapters.TestAdapter.ActiveQueue"/>.
            </summary>
            <param name="turnContext">Context for the current turn of conversation.</param>
            <param name="reference">Conversation reference for the activity to delete.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <remarks>The <see cref="P:Microsoft.Bot.Schema.ConversationReference.ActivityId"/> of the conversation
            reference identifies the activity to delete.</remarks>
            <seealso cref="M:Microsoft.Bot.Builder.ITurnContext.OnDeleteActivity(Microsoft.Bot.Builder.DeleteActivityHandler)"/>
        </member>
        <member name="M:Microsoft.Bot.Builder.Adapters.TestAdapter.CreateConversationAsync(System.String,Microsoft.Bot.Builder.BotCallbackHandler,System.Threading.CancellationToken)">
            <summary>
            Creates a new conversation on the specified channel.
            </summary>
            <param name="channelId">The ID of the channel.</param>
            <param name="callback">The bot logic to call when the conversation is created.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <remarks>This resets the <see cref="P:Microsoft.Bot.Builder.Adapters.TestAdapter.ActiveQueue"/>, and does not maintain multiple conversation queues.</remarks>
        </member>
        <member name="M:Microsoft.Bot.Builder.Adapters.TestAdapter.GetNextReply">
            <summary>
            Dequeues and returns the next bot response from the <see cref="P:Microsoft.Bot.Builder.Adapters.TestAdapter.ActiveQueue"/>.
            </summary>
            <returns>The next activity in the queue; or null, if the queue is empty.</returns>
            <remarks>A <see cref="T:Microsoft.Bot.Builder.Adapters.TestFlow"/> object calls this to get the next response from the bot.</remarks>
        </member>
        <member name="M:Microsoft.Bot.Builder.Adapters.TestAdapter.GetNextReplyAsync(System.Threading.CancellationToken)">
            <summary>
            Get the next reply async.
            </summary>
            <param name="cancellationToken">cancellation Token.</param>
            <returns>activity when it's available or canceled task if it is canceled.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.Adapters.TestAdapter.MakeActivity(System.String)">
            <summary>
            Creates a message activity from text and the current conversational context.
            </summary>
            <param name="text">The message text.</param>
            <returns>An appropriate message activity.</returns>
            <remarks>A <see cref="T:Microsoft.Bot.Builder.Adapters.TestFlow"/> object calls this to get a message activity
            appropriate to the current conversation.</remarks>
        </member>
        <member name="M:Microsoft.Bot.Builder.Adapters.TestAdapter.SendTextToBotAsync(System.String,Microsoft.Bot.Builder.BotCallbackHandler,System.Threading.CancellationToken)">
            <summary>
            Processes a message activity from a user.
            </summary>
            <param name="userSays">The text of the user's message.</param>
            <param name="callback">The turn processing logic to use.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <seealso cref="M:Microsoft.Bot.Builder.Adapters.TestFlow.Send(System.String)"/>
        </member>
        <member name="M:Microsoft.Bot.Builder.Adapters.TestAdapter.AddUserToken(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Adds a fake user token so it can later be retrieved.
            </summary>
            <param name="connectionName">The connection name.</param>
            <param name="channelId">The channel ID.</param>
            <param name="userId">The user ID.</param>
            <param name="token">The token to store.</param>
            <param name="magicCode">The optional magic code to associate with this token.</param>
        </member>
        <member name="M:Microsoft.Bot.Builder.Adapters.TestAdapter.AddExchangeableToken(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Adds a fake exchangeable token so it can be exchanged later.
            </summary>
            <param name="connectionName">The connection name.</param>
            <param name="channelId">The channel ID.</param>
            <param name="userId">The user ID.</param>
            <param name="exchangableItem">The exchangeable token or resource URI.</param>
            <param name="token">The token to store.</param>
        </member>
        <member name="M:Microsoft.Bot.Builder.Adapters.TestAdapter.ThrowOnExchangeRequest(System.String,System.String,System.String,System.String)">
            <summary> Adds an instruction to throw an exception during exchange requests.
            </summary>
            <param name="connectionName">The connection name.</param>
            <param name="channelId">The channel ID.</param>
            <param name="userId">The user ID.</param>
            <param name="exchangableItem">The exchangeable token or resource URI.</param>
        </member>
        <member name="M:Microsoft.Bot.Builder.Adapters.TestAdapter.GetUserTokenAsync(Microsoft.Bot.Builder.ITurnContext,Microsoft.Bot.Connector.Authentication.AppCredentials,System.String,System.String,System.Threading.CancellationToken)">
            <summary>Attempts to retrieve the token for a user that's in a login flow, using customized AppCredentials.
            </summary>
            <param name="turnContext">Context for the current turn of conversation with the user.</param>
            <param name="oAuthAppCredentials">AppCredentials for OAuth.</param>
            <param name="connectionName">Name of the auth connection to use.</param>
            <param name="magicCode">(Optional) Optional user entered code to validate.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>Token Response or null if the token was not found.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.Adapters.TestAdapter.GetUserTokenAsync(Microsoft.Bot.Builder.ITurnContext,System.String,System.String,System.Threading.CancellationToken)">
            <summary>Attempts to retrieve the token for a user that's in a login flow, using the bot's AppCredentials.
            </summary>
            <param name="turnContext">Context for the current turn of conversation with the user.</param>
            <param name="connectionName">Name of the auth connection to use.</param>
            <param name="magicCode">(Optional) user entered code to validate.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>Token Response or null if the token was not found.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.Adapters.TestAdapter.GetOauthSignInLinkAsync(Microsoft.Bot.Builder.ITurnContext,Microsoft.Bot.Connector.Authentication.AppCredentials,System.String,System.Threading.CancellationToken)">
            <summary>
            Returns a fake link for a sign-in, using customized AppCredentials.
            </summary>
            <param name="turnContext">The turn context (must have a valid Activity).</param>
            <param name="oAuthAppCredentials">AppCredentials for OAuth.</param>
            <param name="connectionName">The connectionName.</param>
            <param name="cancellationToken">A Task cancellationToken.</param>
            <returns>The sign-in link.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.Adapters.TestAdapter.GetOauthSignInLinkAsync(Microsoft.Bot.Builder.ITurnContext,System.String,System.Threading.CancellationToken)">
            <summary>
            Returns a fake link for a sign-in, using the bot's AppCredentials.
            </summary>
            <param name="turnContext">The turn context (must have a valid Activity).</param>
            <param name="connectionName">The connectionName.</param>
            <param name="cancellationToken">A Task cancellationToken.</param>
            <returns>The sign-in link.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.Adapters.TestAdapter.GetOauthSignInLinkAsync(Microsoft.Bot.Builder.ITurnContext,Microsoft.Bot.Connector.Authentication.AppCredentials,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Returns a fake link for a sign-in, using customized AppCredentials.
            </summary>
            <param name="turnContext">The turn context (must have a valid Activity).</param>
            <param name="oAuthAppCredentials">AppCredentials for OAuth.</param>
            <param name="connectionName">The connectionName.</param>
            <param name="userId">The user ID.</param>
            <param name="finalRedirect">The final redirect value, which is ignored here.</param>
            <param name="cancellationToken">A Task cancellationToken.</param>
            <returns>The sign-in link.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.Adapters.TestAdapter.GetOauthSignInLinkAsync(Microsoft.Bot.Builder.ITurnContext,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Returns a fake link for a sign-in, using the bot's AppCredentials.
            </summary>
            <param name="turnContext">The turn context (must have a valid Activity).</param>
            <param name="connectionName">The connectionName.</param>
            <param name="userId">The user id.</param>
            <param name="finalRedirect">The final redirect value, which is ignored here.</param>
            <param name="cancellationToken">A Task cancellationToken.</param>
            <returns>The sign-in link.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.Adapters.TestAdapter.SignOutUserAsync(Microsoft.Bot.Builder.ITurnContext,Microsoft.Bot.Connector.Authentication.AppCredentials,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Signs a user out by remove the user's token(s) from mock storage, using customized AppCredentials.
            </summary>
            <param name="turnContext">The turnContext (with a valid Activity).</param>
            <param name="oAuthAppCredentials">The app credentials for OAuth.</param>
            <param name="connectionName">The connection name.</param>
            <param name="userId">The user ID.</param>
            <param name="cancellationToken">The Task cancellation token.</param>
            <returns>None.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.Adapters.TestAdapter.SignOutUserAsync(Microsoft.Bot.Builder.ITurnContext,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Signs a user out by removing the user's token(s) from mock storage, using the bot's app credentials.
            </summary>
            <param name="turnContext">The turnContext (with a valid activity).</param>
            <param name="connectionName">The connection name.</param>
            <param name="userId">The user ID.</param>
            <param name="cancellationToken">The Task cancellation token.</param>
            <returns>None.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.Adapters.TestAdapter.GetTokenStatusAsync(Microsoft.Bot.Builder.ITurnContext,Microsoft.Bot.Connector.Authentication.AppCredentials,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the token statuses, using customized AppCredentials.
            </summary>
            <param name="context">The turnContext (with a valid Activity).</param>
            <param name="oAuthAppCredentials">The app credentials for OAuth.</param>
            <param name="userId">The user ID.</param>
            <param name="includeFilter">Optional comma separated list of the connections to include,
            or `null` to return the token status for each configured connection.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Array of TokenStatus.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.Adapters.TestAdapter.GetTokenStatusAsync(Microsoft.Bot.Builder.ITurnContext,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the token statuses, using the bot's app credentials.
            </summary>
            <param name="context">The turnContext (with a valid Activity).</param>
            <param name="userId">The user ID.</param>
            <param name="includeFilter">Optional comma separated list of the connections to include,
            or `null` to return the token status for each configured connection.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Array of TokenStatus.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.Adapters.TestAdapter.GetAadTokensAsync(Microsoft.Bot.Builder.ITurnContext,Microsoft.Bot.Connector.Authentication.AppCredentials,System.String,System.String[],System.String,System.Threading.CancellationToken)">
            <summary>
            Returns a dictionary of TokenResponses for the resource URLs, using customized AppCredentials.
            </summary>
            <param name="context">The TurnContext.</param>
            <param name="oAuthAppCredentials">AppCredentials for OAuth.</param>
            <param name="connectionName">The connectionName.</param>
            <param name="resourceUrls">The list of AAD resource URLs.</param>
            <param name="userId">The user ID.</param>
            <param name="cancellationToken">The cancellationToken.</param>
            <returns>The dictionary of TokenResponses for each resource URL.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.Adapters.TestAdapter.GetAadTokensAsync(Microsoft.Bot.Builder.ITurnContext,System.String,System.String[],System.String,System.Threading.CancellationToken)">
            <summary>
            Returns a dictionary of TokenResponses for the resource URLs, using the bot's AppCredentials.
            </summary>
            <param name="context">The TurnContext.</param>
            <param name="connectionName">The connectionName.</param>
            <param name="resourceUrls">The list of AAD resource URLs.</param>
            <param name="userId">The user ID.</param>
            <param name="cancellationToken">The cancellationToken.</param>
            <returns>The dictionary of TokenResponses for each resource URL.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.Adapters.TestAdapter.GetSignInResourceAsync(Microsoft.Bot.Builder.ITurnContext,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets a sign-in resource.
            </summary>
            <param name="turnContext">The TurnContext.</param>
            <param name="connectionName">The connectionName.</param>
            <param name="cancellationToken">The cancellationToken.</param>
            <returns>A SignInResource with the link and token exchange info.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.Adapters.TestAdapter.GetSignInResourceAsync(Microsoft.Bot.Builder.ITurnContext,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets a sign-in resource.
            </summary>
            <param name="turnContext">The TurnContext.</param>
            <param name="connectionName">The connectionName.</param>
            <param name="userId">The user ID.</param>
            <param name="finalRedirect">A final redirect URL.</param>
            <param name="cancellationToken">The cancellationToken.</param>
            <returns>A SignInResource with the link and token exchange info.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.Adapters.TestAdapter.GetSignInResourceAsync(Microsoft.Bot.Builder.ITurnContext,Microsoft.Bot.Connector.Authentication.AppCredentials,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets a sign-in resource.
            </summary>
            <param name="turnContext">The TurnContext.</param>
            <param name="oAuthAppCredentials">AppCredentials for OAuth.</param>
            <param name="connectionName">The connectionName.</param>
            <param name="userId">The user ID.</param>
            <param name="finalRedirect">A final redirect URL.</param>
            <param name="cancellationToken">The cancellationToken.</param>
            <returns>A SignInResource with the link and token exchange info.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.Adapters.TestAdapter.ExchangeTokenAsync(Microsoft.Bot.Builder.ITurnContext,System.String,System.String,Microsoft.Bot.Schema.TokenExchangeRequest,System.Threading.CancellationToken)">
            <summary>
            Performs a token exchange operation such as for single sign-on.
            </summary>
            <param name="turnContext">Context for the current turn of conversation with the user.</param>
            <param name="connectionName">Name of the auth connection to use.</param>
            <param name="userId">The user id associated with the token..</param>
            <param name="exchangeRequest">The exchange request details, either a token to exchange or a uri to exchange.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>If the task completes, the exchanged token is returned.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.Adapters.TestAdapter.ExchangeTokenAsync(Microsoft.Bot.Builder.ITurnContext,Microsoft.Bot.Connector.Authentication.AppCredentials,System.String,System.String,Microsoft.Bot.Schema.TokenExchangeRequest,System.Threading.CancellationToken)">
            <summary>
            Performs a token exchange operation such as for single sign-on.
            </summary>
            <param name="turnContext">Context for the current turn of conversation with the user.</param>
            <param name="oAuthAppCredentials">AppCredentials for OAuth.</param>
            <param name="connectionName">Name of the auth connection to use.</param>
            <param name="userId">The user id associated with the token..</param>
            <param name="exchangeRequest">The exchange request details, either a token to exchange or a uri to exchange.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>If the task completes, the exchanged token is returned.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.Adapters.TestAdapter.CreateTurnContext(Microsoft.Bot.Schema.Activity)">
            <summary>
            Creates the turn context for the adapter.
            </summary>
            <param name="activity">An <see cref="T:Microsoft.Bot.Schema.Activity"/> instance for the turn.</param>
            <returns>A <see cref="T:Microsoft.Bot.Builder.TurnContext"/> instance to be used by the adapter.</returns>
        </member>
        <member name="T:Microsoft.Bot.Builder.Adapters.ValidateReply">
            <summary>
            Represents a method the <see cref="T:Microsoft.Bot.Builder.Adapters.TestFlow"/> can call to validate an activity.
            </summary>
            <param name="expected">The expected activity from the bot or adapter.</param>
            <param name="actual">The actual activity from the bot or adapter.</param>
        </member>
        <member name="T:Microsoft.Bot.Builder.Adapters.TestFlow">
            <summary>
            A mock channel that can be used for unit testing of bot logic.
            </summary>
            <remarks>You can use this class to mimic input from a a user or a channel to validate
            that the bot or adapter responds as expected.</remarks>
            <seealso cref="T:Microsoft.Bot.Builder.Adapters.TestAdapter"/>
        </member>
        <member name="M:Microsoft.Bot.Builder.Adapters.TestFlow.#ctor(Microsoft.Bot.Builder.Adapters.TestAdapter,Microsoft.Bot.Builder.BotCallbackHandler)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Builder.Adapters.TestFlow"/> class.
            </summary>
            <param name="adapter">The test adapter to use.</param>
            <param name="callback">The bot turn processing logic to test.</param>
        </member>
        <member name="M:Microsoft.Bot.Builder.Adapters.TestFlow.#ctor(System.Threading.Tasks.Task,Microsoft.Bot.Builder.Adapters.TestFlow)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Builder.Adapters.TestFlow"/> class from an existing flow.
            </summary>
            <param name="task">The exchange to add to the exchanges in the existing flow.</param>
            <param name="flow">The flow to build up from. This provides the test adapter to use,
            the bot turn processing logic to test, and a set of exchanges to model and test.</param>
        </member>
        <member name="M:Microsoft.Bot.Builder.Adapters.TestFlow.#ctor(System.Func{System.Threading.Tasks.Task},Microsoft.Bot.Builder.Adapters.TestFlow)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Builder.Adapters.TestFlow"/> class from an existing flow.
            </summary>
            <param name="getTask">The exchange to add to the exchanges in the existing flow.</param>
            <param name="flow">The flow to build up from. This provides the test adapter to use,
            the bot turn processing logic to test, and a set of exchanges to model and test.</param>
        </member>
        <member name="M:Microsoft.Bot.Builder.Adapters.TestFlow.#ctor(Microsoft.Bot.Builder.Adapters.TestAdapter,Microsoft.Bot.Builder.IBot)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Builder.Adapters.TestFlow"/> class.
            </summary>
            <param name="adapter">The test adapter to use.</param>
            <param name="bot">The bot containing the turn processing logic to test.</param>
        </member>
        <member name="M:Microsoft.Bot.Builder.Adapters.TestFlow.StartTestAsync">
            <summary>
            Starts the execution of the test flow.
            </summary>
            <returns>Runs the exchange between the user and the bot.</returns>
            <remarks>This methods sends the activities from the user to the bot and
            checks the responses from the bot based on the activities described in the
            current test flow.</remarks>
        </member>
        <member name="M:Microsoft.Bot.Builder.Adapters.TestFlow.Send(System.String)">
            <summary>
            Adds a message activity from the user to the bot.
            </summary>
            <param name="userSays">The text of the message to send.</param>
            <returns>A new <see cref="T:Microsoft.Bot.Builder.Adapters.TestFlow"/> object that appends a new message activity from the user to the modeled exchange.</returns>
            <remarks>This method does not modify the original <see cref="T:Microsoft.Bot.Builder.Adapters.TestFlow"/> object.</remarks>
        </member>
        <member name="M:Microsoft.Bot.Builder.Adapters.TestFlow.SendConversationUpdate">
            <summary>
            Creates a conversation update activity and process it the activity.
            </summary>
            <returns>A new <see cref="T:Microsoft.Bot.Builder.Adapters.TestFlow"/> object.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.Adapters.TestFlow.Send(Microsoft.Bot.Schema.IActivity)">
            <summary>
            Adds an activity from the user to the bot.
            </summary>
            <param name="userActivity">The activity to send.</param>
            <returns>A new <see cref="T:Microsoft.Bot.Builder.Adapters.TestFlow"/> object that appends a new activity from the user to the modeled exchange.</returns>
            <remarks>This method does not modify the original <see cref="T:Microsoft.Bot.Builder.Adapters.TestFlow"/> object.</remarks>
        </member>
        <member name="M:Microsoft.Bot.Builder.Adapters.TestFlow.Delay(System.UInt32)">
            <summary>
            Adds a delay in the conversation.
            </summary>
            <param name="ms">The delay length in milliseconds.</param>
            <returns>A new <see cref="T:Microsoft.Bot.Builder.Adapters.TestFlow"/> object that appends a delay to the modeled exchange.</returns>
            <remarks>This method does not modify the original <see cref="T:Microsoft.Bot.Builder.Adapters.TestFlow"/> object.</remarks>
        </member>
        <member name="M:Microsoft.Bot.Builder.Adapters.TestFlow.Delay(System.TimeSpan)">
            <summary>
            Adds a delay in the conversation.
            </summary>
            <param name="timespan">The delay length in TimeSpan.</param>
            <returns>A new <see cref="T:Microsoft.Bot.Builder.Adapters.TestFlow"/> object that appends a delay to the modeled exchange.</returns>
            <remarks>This method does not modify the original <see cref="T:Microsoft.Bot.Builder.Adapters.TestFlow"/> object.</remarks>
        </member>
        <member name="M:Microsoft.Bot.Builder.Adapters.TestFlow.AssertReply(System.String,System.String,System.UInt32)">
            <summary>
            Adds an assertion that the turn processing logic responds as expected.
            </summary>
            <param name="expected">The expected text of a message from the bot.</param>
            <param name="description">A message to send if the actual response is not as expected.</param>
            <param name="timeout">The amount of time in milliseconds within which a response is expected.</param>
            <returns>A new <see cref="T:Microsoft.Bot.Builder.Adapters.TestFlow"/> object that appends this assertion to the modeled exchange.</returns>
            <remarks>This method does not modify the original <see cref="T:Microsoft.Bot.Builder.Adapters.TestFlow"/> object.</remarks>
            <exception cref="T:System.Exception">The bot did not respond as expected.</exception>
        </member>
        <member name="M:Microsoft.Bot.Builder.Adapters.TestFlow.AssertReplyContains(System.String,System.String,System.UInt32)">
            <summary>
            Adds an assertion that the turn processing logic responds as expected.
            </summary>
            <param name="expected">The part of the expected text of a message from the bot.</param>
            <param name="description">A message to send if the actual response is not as expected.</param>
            <param name="timeout">The amount of time in milliseconds within which a response is expected.</param>
            <returns>A new <see cref="T:Microsoft.Bot.Builder.Adapters.TestFlow"/> object that appends this assertion to the modeled exchange.</returns>
            <remarks>This method does not modify the original <see cref="T:Microsoft.Bot.Builder.Adapters.TestFlow"/> object.</remarks>
            <exception cref="T:System.Exception">The bot did not respond as expected.</exception>
        </member>
        <member name="M:Microsoft.Bot.Builder.Adapters.TestFlow.AssertReply(Microsoft.Bot.Schema.IActivity,System.String,System.UInt32)">
            <summary>
            Adds an assertion that the turn processing logic responds as expected.
            </summary>
            <param name="expected">The expected activity from the bot.</param>
            <param name="description">A message to send if the actual response is not as expected.</param>
            <param name="timeout">The amount of time in milliseconds within which a response is expected.</param>
            <returns>A new <see cref="T:Microsoft.Bot.Builder.Adapters.TestFlow"/> object that appends this assertion to the modeled exchange.</returns>
            <remarks>This method does not modify the original <see cref="T:Microsoft.Bot.Builder.Adapters.TestFlow"/> object.</remarks>
            <exception cref="T:System.Exception">The bot did not respond as expected.</exception>
        </member>
        <member name="M:Microsoft.Bot.Builder.Adapters.TestFlow.AssertReply(Microsoft.Bot.Schema.IActivity,System.Collections.Generic.IEqualityComparer{Microsoft.Bot.Schema.IActivity},System.String,System.UInt32)">
            <summary>
            Adds an assertion that the turn processing logic responds as expected.
            </summary>
            <param name="expected">The expected activity from the bot.</param>
            <param name="equalityComparer">The equality parameter which compares two activities.</param>
            <param name="description">A message to send if the actual response is not as expected.</param>
            <param name="timeout">The amount of time in milliseconds within which a response is expected.</param>
            <returns>A new <see cref="T:Microsoft.Bot.Builder.Adapters.TestFlow"/> object that appends this assertion to the modeled exchange.</returns>
            <remarks>This method does not modify the original <see cref="T:Microsoft.Bot.Builder.Adapters.TestFlow"/> object.</remarks>
            <exception cref="T:System.Exception">The bot did not respond as expected.</exception>
        </member>
        <member name="M:Microsoft.Bot.Builder.Adapters.TestFlow.AssertReply(System.Action{Microsoft.Bot.Schema.IActivity},System.String,System.UInt32)">
            <summary>
            Adds an assertion that the turn processing logic responds as expected.
            </summary>
            <param name="validateActivity">A validation method to apply to an activity from the bot.
            This activity should throw an exception if validation fails.</param>
            <param name="description">A message to send if the actual response is not as expected.</param>
            <param name="timeout">The amount of time in milliseconds within which a response is expected.</param>
            <returns>A new <see cref="T:Microsoft.Bot.Builder.Adapters.TestFlow"/> object that appends this assertion to the modeled exchange.</returns>
            <remarks>This method does not modify the original <see cref="T:Microsoft.Bot.Builder.Adapters.TestFlow"/> object.</remarks>
        </member>
        <member name="M:Microsoft.Bot.Builder.Adapters.TestFlow.AssertNoReply(System.String,System.UInt32)">
            <summary>
            Adds an assertion that the turn processing logic finishes responding as expected.
            </summary>
            <param name="description">A message to send if the turn still responds.</param>
            <param name="timeout">The amount of time in milliseconds within which no response is expected.</param>
            <returns>A new <see cref="T:Microsoft.Bot.Builder.Adapters.TestFlow"/> object that appends this assertion to the modeled exchange.</returns>
            <remarks>This method does not modify the original <see cref="T:Microsoft.Bot.Builder.Adapters.TestFlow"/> object.</remarks>
        </member>
        <member name="M:Microsoft.Bot.Builder.Adapters.TestFlow.Test(System.String,System.String,System.String,System.UInt32)">
            <summary>
            Shortcut for calling <see cref="M:Microsoft.Bot.Builder.Adapters.TestFlow.Send(System.String)"/> followed by <see cref="M:Microsoft.Bot.Builder.Adapters.TestFlow.AssertReply(System.String,System.String,System.UInt32)"/>.
            </summary>
            <param name="userSays">The text of the message to send.</param>
            <param name="expected">The expected text of a message from the bot.</param>
            <param name="description">A message to send if the actual response is not as expected.</param>
            <param name="timeout">The amount of time in milliseconds within which a response is expected.</param>
            <returns>A new <see cref="T:Microsoft.Bot.Builder.Adapters.TestFlow"/> object that appends this exchange to the modeled exchange.</returns>
            <remarks>This method does not modify the original <see cref="T:Microsoft.Bot.Builder.Adapters.TestFlow"/> object.</remarks>
            <exception cref="T:System.Exception">The bot did not respond as expected.</exception>
        </member>
        <member name="M:Microsoft.Bot.Builder.Adapters.TestFlow.Test(System.String,Microsoft.Bot.Schema.Activity,System.String,System.UInt32)">
            <summary>
            Shortcut for calling <see cref="M:Microsoft.Bot.Builder.Adapters.TestFlow.Send(System.String)"/> followed by <see cref="M:Microsoft.Bot.Builder.Adapters.TestFlow.AssertReply(Microsoft.Bot.Schema.IActivity,System.String,System.UInt32)"/>.
            </summary>
            <param name="userSays">The text of the message to send.</param>
            <param name="expected">The expected activity from the bot.</param>
            <param name="description">A message to send if the actual response is not as expected.</param>
            <param name="timeout">The amount of time in milliseconds within which a response is expected.</param>
            <returns>A new <see cref="T:Microsoft.Bot.Builder.Adapters.TestFlow"/> object that appends this exchange to the modeled exchange.</returns>
            <remarks>This method does not modify the original <see cref="T:Microsoft.Bot.Builder.Adapters.TestFlow"/> object.</remarks>
            <exception cref="T:System.Exception">The bot did not respond as expected.</exception>
        </member>
        <member name="M:Microsoft.Bot.Builder.Adapters.TestFlow.Test(System.String,System.Action{Microsoft.Bot.Schema.IActivity},System.String,System.UInt32)">
            <summary>
            Shortcut for calling <see cref="M:Microsoft.Bot.Builder.Adapters.TestFlow.Send(System.String)"/> followed by <see cref="M:Microsoft.Bot.Builder.Adapters.TestFlow.AssertReply(System.Action{Microsoft.Bot.Schema.IActivity},System.String,System.UInt32)"/>.
            </summary>
            <param name="userSays">The text of the message to send.</param>
            <param name="validateActivity">A validation method to apply to an activity from the bot.
            This activity should throw an exception if validation fails.</param>
            <param name="description">A message to send if the actual response is not as expected.</param>
            <param name="timeout">The amount of time in milliseconds within which a response is expected.</param>
            <returns>A new <see cref="T:Microsoft.Bot.Builder.Adapters.TestFlow"/> object that appends this exchange to the modeled exchange.</returns>
            <remarks>This method does not modify the original <see cref="T:Microsoft.Bot.Builder.Adapters.TestFlow"/> object.</remarks>
            <exception cref="T:System.Exception">The bot did not respond as expected.</exception>
        </member>
        <member name="M:Microsoft.Bot.Builder.Adapters.TestFlow.Test(System.Collections.Generic.IEnumerable{Microsoft.Bot.Schema.IActivity},System.String,System.UInt32)">
            <summary>
            Shortcut for adding an arbitrary exchange between the user and bot.
            Each activity with a <see cref="P:Microsoft.Bot.Schema.IActivity.From"/>.<see cref="P:Microsoft.Bot.Schema.ChannelAccount.Role"/> equals to "bot"
            will be processed with the <see cref="M:Microsoft.Bot.Builder.Adapters.TestFlow.AssertReply(Microsoft.Bot.Schema.IActivity,System.String,System.UInt32)"/> method.
            Every other activity will be processed as user's message via the <see cref="M:Microsoft.Bot.Builder.Adapters.TestFlow.Send(Microsoft.Bot.Schema.IActivity)"/> method.
            </summary>
            <param name="activities">The list of activities to test.</param>
            <param name="description">A message to send if the actual response is not as expected.</param>
            <param name="timeout">The amount of time in milliseconds within which a response is expected.</param>
            <returns>A new <see cref="T:Microsoft.Bot.Builder.Adapters.TestFlow"/> object that appends this exchange to the modeled exchange.</returns>
            <remarks>This method does not modify the original <see cref="T:Microsoft.Bot.Builder.Adapters.TestFlow"/> object.</remarks>
            <exception cref="T:System.Exception">The bot did not respond as expected.</exception>
        </member>
        <member name="M:Microsoft.Bot.Builder.Adapters.TestFlow.Test(System.Collections.Generic.IEnumerable{Microsoft.Bot.Schema.IActivity},Microsoft.Bot.Builder.Adapters.ValidateReply,System.String,System.UInt32)">
            <summary>
            Shortcut for adding an arbitrary exchange between the user and bot.
            Each activity with a <see cref="P:Microsoft.Bot.Schema.IActivity.From"/>.<see cref="P:Microsoft.Bot.Schema.ChannelAccount.Role"/> equals to "bot"
            will be processed with the <see cref="M:Microsoft.Bot.Builder.Adapters.TestFlow.AssertReply(Microsoft.Bot.Schema.IActivity,System.String,System.UInt32)"/> method.
            Every other activity will be processed as user's message via the <see cref="M:Microsoft.Bot.Builder.Adapters.TestFlow.Send(Microsoft.Bot.Schema.IActivity)"/> method.
            </summary>
            <param name="activities">The list of activities to test.</param>
            <param name="validateReply">The delegate to call to validate responses from the bot.</param>
            <param name="description">A message to send if the actual response is not as expected.</param>
            <param name="timeout">The amount of time in milliseconds within which a response is expected.</param>
            <returns>A new <see cref="T:Microsoft.Bot.Builder.Adapters.TestFlow"/> object that appends this exchange to the modeled exchange.</returns>
            <remarks>This method does not modify the original <see cref="T:Microsoft.Bot.Builder.Adapters.TestFlow"/> object.</remarks>
            <exception cref="T:System.Exception">The bot did not respond as expected.</exception>
        </member>
        <member name="M:Microsoft.Bot.Builder.Adapters.TestFlow.AssertReplyOneOf(System.String[],System.String,System.UInt32)">
            <summary>
            Adds an assertion that the bot's response is contained within a set of acceptable responses.
            </summary>
            <param name="candidates">The set of acceptable messages.</param>
            <param name="description">A message to send if the actual response is not as expected.</param>
            <param name="timeout">The amount of time in milliseconds within which a response is expected.</param>
            <returns>A new <see cref="T:Microsoft.Bot.Builder.Adapters.TestFlow"/> object that appends this assertion to the modeled exchange.</returns>
            <remarks>This method does not modify the original <see cref="T:Microsoft.Bot.Builder.Adapters.TestFlow"/> object.</remarks>
            <exception cref="T:System.Exception">The bot did not respond as expected.</exception>
        </member>
        <member name="T:Microsoft.Bot.Builder.AutoSaveStateMiddleware">
            <summary>
             Middleware to automatically persist state before the end of each turn.
            </summary>
            <remarks>
            This calls <see cref="M:Microsoft.Bot.Builder.BotState.SaveChangesAsync(Microsoft.Bot.Builder.ITurnContext,System.Boolean,System.Threading.CancellationToken)"/>
            on each state object it manages.
            </remarks>
        </member>
        <member name="M:Microsoft.Bot.Builder.AutoSaveStateMiddleware.#ctor(Microsoft.Bot.Builder.BotState[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Builder.AutoSaveStateMiddleware"/> class.
            </summary>
            <param name="botStates">initial list of <see cref="T:Microsoft.Bot.Builder.BotState"/> objects to manage.</param>
        </member>
        <member name="M:Microsoft.Bot.Builder.AutoSaveStateMiddleware.#ctor(Microsoft.Bot.Builder.BotStateSet)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Builder.AutoSaveStateMiddleware"/> class with 
            a list of state management objects managed by this object.
            </summary>
            <param name="botStateSet">The state management objects managed by this object.</param>
        </member>
        <member name="P:Microsoft.Bot.Builder.AutoSaveStateMiddleware.BotStateSet">
            <summary>
            Gets or sets the list of state management objects managed by this object.
            </summary>
            <value>The state management objects managed by this object.</value>
        </member>
        <member name="M:Microsoft.Bot.Builder.AutoSaveStateMiddleware.Add(Microsoft.Bot.Builder.BotState)">
            <summary>
            Adds a state management object to the list of states to manage.
            </summary>
            <param name="botState">The bot state to add.</param>
            <returns>The updated <see cref="P:Microsoft.Bot.Builder.AutoSaveStateMiddleware.BotStateSet"/> object.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.AutoSaveStateMiddleware.OnTurnAsync(Microsoft.Bot.Builder.ITurnContext,Microsoft.Bot.Builder.NextDelegate,System.Threading.CancellationToken)">
            <summary>
            Before the turn ends, calls <see cref="M:Microsoft.Bot.Builder.BotState.SaveChangesAsync(Microsoft.Bot.Builder.ITurnContext,System.Boolean,System.Threading.CancellationToken)"/>
            on each state object.
            </summary>
            <param name="turnContext">The context object for this turn.</param>
            <param name="next">The delegate to call to continue the bot middleware pipeline.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <remarks>This middleware persists state after the bot logic completes and before the turn ends.</remarks>
        </member>
        <member name="T:Microsoft.Bot.Builder.BotAdapter">
            <summary>
            Represents a bot adapter that can connect a bot to a service endpoint.
            This class is abstract.
            </summary>
            <remarks>The bot adapter encapsulates authentication processes and sends
            activities to and receives activities from the Bot Connector Service. When your
            bot receives an activity, the adapter creates a context object, passes it to your
            bot's application logic, and sends responses back to the user's channel.
            <para>Use <see cref="M:Microsoft.Bot.Builder.BotAdapter.Use(Microsoft.Bot.Builder.IMiddleware)"/> to add <see cref="T:Microsoft.Bot.Builder.IMiddleware"/> objects
            to your adapter’s middleware collection. The adapter processes and directs
            incoming activities in through the bot middleware pipeline to your bot’s logic
            and then back out again. As each activity flows in and out of the bot, each piece
            of middleware can inspect or act upon the activity, both before and after the bot
            logic runs.</para>
            </remarks>
            <seealso cref="T:Microsoft.Bot.Builder.ITurnContext"/>
            <seealso cref="T:Microsoft.Bot.Schema.IActivity"/>
            <seealso cref="T:Microsoft.Bot.Builder.IBot"/>
            <seealso cref="T:Microsoft.Bot.Builder.IMiddleware"/>
        </member>
        <member name="F:Microsoft.Bot.Builder.BotAdapter.InvokeResponseKey">
            <summary>
            The key value for any InvokeResponseActivity that would be on the TurnState.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Builder.BotAdapter.BotIdentityKey">
            <summary>
            The string value for the bot identity key.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Builder.BotAdapter.OAuthScopeKey">
            <summary>
            The string value for the OAuth scope key.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Builder.BotAdapter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Builder.BotAdapter"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Builder.BotAdapter.OnTurnError">
            <summary>
            Gets or sets an error handler that can catch exceptions in the middleware or application.
            </summary>
            <value>An error handler that can catch exceptions in the middleware or application.</value>
        </member>
        <member name="P:Microsoft.Bot.Builder.BotAdapter.MiddlewareSet">
            <summary>
            Gets the collection of middleware in the adapter's pipeline.
            </summary>
            <value>The middleware collection for the pipeline.</value>
        </member>
        <member name="M:Microsoft.Bot.Builder.BotAdapter.Use(Microsoft.Bot.Builder.IMiddleware)">
            <summary>
            Adds middleware to the adapter's pipeline.
            </summary>
            <param name="middleware">The middleware to add.</param>
            <returns>The updated adapter object.</returns>
            <remarks>Middleware is added to the adapter at initialization time.
            For each turn, the adapter calls middleware in the order in which you added it.
            </remarks>
        </member>
        <member name="M:Microsoft.Bot.Builder.BotAdapter.SendActivitiesAsync(Microsoft.Bot.Builder.ITurnContext,Microsoft.Bot.Schema.Activity[],System.Threading.CancellationToken)">
            <summary>
            When overridden in a derived class, sends activities to the conversation.
            </summary>
            <param name="turnContext">The context object for the turn.</param>
            <param name="activities">The activities to send.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <remarks>If the activities are successfully sent, the task result contains
            an array of <see cref="T:Microsoft.Bot.Schema.ResourceResponse"/> objects containing the IDs that
            the receiving channel assigned to the activities.</remarks>
            <seealso cref="M:Microsoft.Bot.Builder.ITurnContext.OnSendActivities(Microsoft.Bot.Builder.SendActivitiesHandler)"/>
        </member>
        <member name="M:Microsoft.Bot.Builder.BotAdapter.UpdateActivityAsync(Microsoft.Bot.Builder.ITurnContext,Microsoft.Bot.Schema.Activity,System.Threading.CancellationToken)">
            <summary>
            When overridden in a derived class, replaces an existing activity in the
            conversation.
            </summary>
            <param name="turnContext">The context object for the turn.</param>
            <param name="activity">New replacement activity.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <remarks>If the activity is successfully sent, the task result contains
            a <see cref="T:Microsoft.Bot.Schema.ResourceResponse"/> object containing the ID that the receiving
            channel assigned to the activity.
            <para>Before calling this, set the ID of the replacement activity to the ID
            of the activity to replace.</para></remarks>
            <seealso cref="M:Microsoft.Bot.Builder.ITurnContext.OnUpdateActivity(Microsoft.Bot.Builder.UpdateActivityHandler)"/>
        </member>
        <member name="M:Microsoft.Bot.Builder.BotAdapter.DeleteActivityAsync(Microsoft.Bot.Builder.ITurnContext,Microsoft.Bot.Schema.ConversationReference,System.Threading.CancellationToken)">
            <summary>
            When overridden in a derived class, deletes an existing activity in the
            conversation.
            </summary>
            <param name="turnContext">The context object for the turn.</param>
            <param name="reference">Conversation reference for the activity to delete.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <remarks>The <see cref="P:Microsoft.Bot.Schema.ConversationReference.ActivityId"/> of the conversation
            reference identifies the activity to delete.</remarks>
            <seealso cref="M:Microsoft.Bot.Builder.ITurnContext.OnDeleteActivity(Microsoft.Bot.Builder.DeleteActivityHandler)"/>
        </member>
        <member name="M:Microsoft.Bot.Builder.BotAdapter.ContinueConversationAsync(System.String,Microsoft.Bot.Schema.ConversationReference,Microsoft.Bot.Builder.BotCallbackHandler,System.Threading.CancellationToken)">
            <summary>
            Sends a proactive message to a conversation.
            </summary>
            <param name="botId">The application ID of the bot. This parameter is ignored in
            single tenant the Adapters (Console, Test, etc) but is critical to the BotFrameworkAdapter
            which is multi-tenant aware. </param>
            <param name="reference">A reference to the conversation to continue.</param>
            <param name="callback">The method to call for the resulting bot turn.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <remarks>Call this method to proactively send a message to a conversation.
            Most _channels require a user to initiate a conversation with a bot
            before the bot can send activities to the user.</remarks>
            <seealso cref="M:Microsoft.Bot.Builder.BotAdapter.RunPipelineAsync(Microsoft.Bot.Builder.ITurnContext,Microsoft.Bot.Builder.BotCallbackHandler,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:Microsoft.Bot.Builder.BotAdapter.ContinueConversationAsync(System.Security.Claims.ClaimsIdentity,Microsoft.Bot.Schema.ConversationReference,Microsoft.Bot.Builder.BotCallbackHandler,System.Threading.CancellationToken)">
            <summary>
            Sends a proactive message to a conversation.
            </summary>
            <param name="claimsIdentity">A <see cref="T:System.Security.Claims.ClaimsIdentity"/> for the conversation.</param>
            <param name="reference">A reference to the conversation to continue.</param>
            <param name="callback">The method to call for the resulting bot turn.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <remarks>Call this method to proactively send a message to a conversation.
            Most _channels require a user to initiate a conversation with a bot
            before the bot can send activities to the user.</remarks>
            <seealso cref="M:Microsoft.Bot.Builder.BotAdapter.RunPipelineAsync(Microsoft.Bot.Builder.ITurnContext,Microsoft.Bot.Builder.BotCallbackHandler,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:Microsoft.Bot.Builder.BotAdapter.ContinueConversationAsync(System.Security.Claims.ClaimsIdentity,Microsoft.Bot.Schema.ConversationReference,System.String,Microsoft.Bot.Builder.BotCallbackHandler,System.Threading.CancellationToken)">
            <summary>
            Sends a proactive message to a conversation.
            </summary>
            <param name="claimsIdentity">A <see cref="T:System.Security.Claims.ClaimsIdentity"/> for the conversation.</param>
            <param name="reference">A reference to the conversation to continue.</param>
            <param name="audience">A value signifying the recipient of the proactive message.</param>
            <param name="callback">The method to call for the resulting bot turn.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <remarks>Call this method to proactively send a message to a conversation.
            Most _channels require a user to initiate a conversation with a bot
            before the bot can send activities to the user.</remarks>
            <seealso cref="M:Microsoft.Bot.Builder.BotAdapter.RunPipelineAsync(Microsoft.Bot.Builder.ITurnContext,Microsoft.Bot.Builder.BotCallbackHandler,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:Microsoft.Bot.Builder.BotAdapter.ContinueConversationAsync(System.String,Microsoft.Bot.Schema.Activity,Microsoft.Bot.Builder.BotCallbackHandler,System.Threading.CancellationToken)">
            <summary>
            Sends a proactive message to a conversation.
            </summary>
            <param name="botId">The application ID of the bot. This parameter is ignored in
            single tenant the Adapters (Console, Test, etc) but is critical to the BotFrameworkAdapter
            which is multi-tenant aware. </param>
            <param name="continuationActivity">An <see cref="T:Microsoft.Bot.Schema.Activity"/> with the appropriate <see cref="T:Microsoft.Bot.Schema.ConversationReference"/> with which to continue the conversation.</param>
            <param name="callback">The method to call for the resulting bot turn.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <remarks>Call this method to proactively send a message to a conversation.
            Most _channels require a user to initiate a conversation with a bot
            before the bot can send activities to the user.</remarks>
            <seealso cref="M:Microsoft.Bot.Builder.BotAdapter.RunPipelineAsync(Microsoft.Bot.Builder.ITurnContext,Microsoft.Bot.Builder.BotCallbackHandler,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:Microsoft.Bot.Builder.BotAdapter.ContinueConversationAsync(System.Security.Claims.ClaimsIdentity,Microsoft.Bot.Schema.Activity,Microsoft.Bot.Builder.BotCallbackHandler,System.Threading.CancellationToken)">
            <summary>
            Sends a proactive message to a conversation.
            </summary>
            <param name="claimsIdentity">A <see cref="T:System.Security.Claims.ClaimsIdentity"/> for the conversation.</param>
            <param name="continuationActivity">An <see cref="T:Microsoft.Bot.Schema.Activity"/> with the appropriate <see cref="T:Microsoft.Bot.Schema.ConversationReference"/> with which to continue the conversation.</param>
            <param name="callback">The method to call for the resulting bot turn.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <remarks>Call this method to proactively send a message to a conversation.
            Most _channels require a user to initiate a conversation with a bot
            before the bot can send activities to the user.</remarks>
            <seealso cref="M:Microsoft.Bot.Builder.BotAdapter.RunPipelineAsync(Microsoft.Bot.Builder.ITurnContext,Microsoft.Bot.Builder.BotCallbackHandler,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:Microsoft.Bot.Builder.BotAdapter.ContinueConversationAsync(System.Security.Claims.ClaimsIdentity,Microsoft.Bot.Schema.Activity,System.String,Microsoft.Bot.Builder.BotCallbackHandler,System.Threading.CancellationToken)">
            <summary>
            Sends a proactive message to a conversation.
            </summary>
            <param name="claimsIdentity">A <see cref="T:System.Security.Claims.ClaimsIdentity"/> for the conversation.</param>
            <param name="continuationActivity">An <see cref="T:Microsoft.Bot.Schema.Activity"/> with the appropriate <see cref="T:Microsoft.Bot.Schema.ConversationReference"/> with which to continue the conversation.</param>
            <param name="audience">A value signifying the recipient of the proactive message.</param>
            <param name="callback">The method to call for the resulting bot turn.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <remarks>Call this method to proactively send a message to a conversation.
            Most _channels require a user to initiate a conversation with a bot
            before the bot can send activities to the user.</remarks>
            <seealso cref="M:Microsoft.Bot.Builder.BotAdapter.RunPipelineAsync(Microsoft.Bot.Builder.ITurnContext,Microsoft.Bot.Builder.BotCallbackHandler,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:Microsoft.Bot.Builder.BotAdapter.ProcessActivityAsync(System.Security.Claims.ClaimsIdentity,Microsoft.Bot.Schema.Activity,Microsoft.Bot.Builder.BotCallbackHandler,System.Threading.CancellationToken)">
            <summary>
            Creates a turn context and runs the middleware pipeline for an incoming TRUSTED activity.
            </summary>
            <param name="claimsIdentity">A <see cref="T:System.Security.Claims.ClaimsIdentity"/> for the request.</param>
            <param name="activity">The incoming activity.</param>
            <param name="callback">The code to run at the end of the adapter's middleware pipeline.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.BotAdapter.RunPipelineAsync(Microsoft.Bot.Builder.ITurnContext,Microsoft.Bot.Builder.BotCallbackHandler,System.Threading.CancellationToken)">
            <summary>
            Starts activity processing for the current bot turn.
            </summary>
            <param name="turnContext">The turn's context object.</param>
            <param name="callback">A callback method to run at the end of the pipeline.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="turnContext"/> is null.</exception>
            <remarks>The adapter calls middleware in the order in which you added it.
            The adapter passes in the context object for the turn and a next delegate,
            and the middleware calls the delegate to pass control to the next middleware
            in the pipeline. Once control reaches the end of the pipeline, the adapter calls
            the <paramref name="callback"/> method. If a middleware component doesn’t call
            the next delegate, the adapter does not call  any of the subsequent middleware’s
            <see cref="M:Microsoft.Bot.Builder.IMiddleware.OnTurnAsync(Microsoft.Bot.Builder.ITurnContext,Microsoft.Bot.Builder.NextDelegate,System.Threading.CancellationToken)"/>
            methods or the callback method, and the pipeline short circuits.
            <para>When the turn is initiated by a user activity (reactive messaging), the
            callback method will be a reference to the bot's
            <see cref="M:Microsoft.Bot.Builder.IBot.OnTurnAsync(Microsoft.Bot.Builder.ITurnContext,System.Threading.CancellationToken)"/> method. When the turn is
            initiated by a call to <see cref="M:Microsoft.Bot.Builder.BotAdapter.ContinueConversationAsync(System.String,Microsoft.Bot.Schema.ConversationReference,Microsoft.Bot.Builder.BotCallbackHandler,System.Threading.CancellationToken)"/>
            (proactive messaging), the callback method is the callback method that was provided in the call.</para>
            </remarks>
        </member>
        <member name="T:Microsoft.Bot.Builder.BotAssert">
            <summary>
            Provides methods for debugging Bot Builder code.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Builder.BotAssert.ActivityNotNull(Microsoft.Bot.Schema.IActivity)">
            <summary>
            Checks that an activity object is not <c>null</c>.
            </summary>
            <param name="activity">The activity object.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="activity"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Microsoft.Bot.Builder.BotAssert.ContextNotNull(Microsoft.Bot.Builder.ITurnContext)">
            <summary>
            Checks that a context object is not <c>null</c>.
            </summary>
            <param name="turnContext">The context object.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="turnContext"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Microsoft.Bot.Builder.BotAssert.ConversationReferenceNotNull(Microsoft.Bot.Schema.ConversationReference)">
            <summary>
            Checks that a conversation reference object is not <c>null</c>.
            </summary>
            <param name="reference">The conversation reference object.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="reference"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Microsoft.Bot.Builder.BotAssert.ActivityListNotNull(System.Collections.Generic.IEnumerable{Microsoft.Bot.Schema.Activity})">
            <summary>
            Checks that an activity collection is not <c>null</c>.
            </summary>
            <param name="activities">The activities.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="activities"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Microsoft.Bot.Builder.BotAssert.MiddlewareNotNull(Microsoft.Bot.Builder.IMiddleware)">
            <summary>
            Checks that a middleware object is not <c>null</c>.
            </summary>
            <param name="middleware">The middleware object.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="middleware"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Microsoft.Bot.Builder.BotAssert.MiddlewareNotNull(System.Collections.Generic.IEnumerable{Microsoft.Bot.Builder.IMiddleware})">
            <summary>
            Checks that a middleware collection is not <c>null</c>.
            </summary>
            <param name="middleware">The middleware.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="middleware"/> is <c>null</c>.</exception>
        </member>
        <member name="T:Microsoft.Bot.Builder.BotCallbackHandler">
            <summary>
            The callback delegate for application code.
            </summary>
            <param name="turnContext">The turn context.</param>
            <param name="cancellationToken">The task cancellation token.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="T:Microsoft.Bot.Builder.BotComponent">
            <summary>
            Definition of a <see cref="T:Microsoft.Bot.Builder.BotComponent"/> that allows registration of services, custom actions, memory scopes and adapters.
            </summary>
            To make your components available to the system you derive from BotComponent and register services to add functionality.
            These components then are consumed in appropriate places by the systems that need them. When using Composer, Startup gets called
            automatically on the components by the bot runtime, as long as the components are registered in the configuration.
        </member>
        <member name="M:Microsoft.Bot.Builder.BotComponent.ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Entry point for bot components to register types in resource explorer, consume configuration and register services in the 
            services collection.
            </summary>
            <param name="services">Services collection to register dependency injection.</param>
            <param name="configuration">Configuration for the bot component.</param>
        </member>
        <member name="T:Microsoft.Bot.Builder.BotFrameworkAdapter">
            <summary>
            A bot adapter that can connect a bot to a service endpoint.
            </summary>
            <remarks>The bot adapter encapsulates authentication processes and sends
            activities to and receives activities from the Bot Connector Service. When your
            bot receives an activity, the adapter creates a context object, passes it to your
            bot's application logic, and sends responses back to the user's channel.
            <para>Use <see cref="M:Microsoft.Bot.Builder.BotFrameworkAdapter.Use(Microsoft.Bot.Builder.IMiddleware)"/> to add <see cref="T:Microsoft.Bot.Builder.IMiddleware"/> objects
            to your adapter’s middleware collection. The adapter processes and directs
            incoming activities in through the bot middleware pipeline to your bot’s logic
            and then back out again. As each activity flows in and out of the bot, each piece
            of middleware can inspect or act upon the activity, both before and after the bot
            logic runs.</para>
            </remarks>
            <seealso cref="T:Microsoft.Bot.Builder.ITurnContext"/>
            <seealso cref="T:Microsoft.Bot.Schema.IActivity"/>
            <seealso cref="T:Microsoft.Bot.Builder.IBot"/>
            <seealso cref="T:Microsoft.Bot.Builder.IMiddleware"/>h
        </member>
        <member name="M:Microsoft.Bot.Builder.BotFrameworkAdapter.#ctor(Microsoft.Bot.Connector.Authentication.ICredentialProvider,Microsoft.Bot.Connector.Authentication.IChannelProvider,Microsoft.Rest.TransientFaultHandling.RetryPolicy,System.Net.Http.HttpClient,Microsoft.Bot.Builder.IMiddleware,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Builder.BotFrameworkAdapter"/> class,
            using a credential provider.
            </summary>
            <param name="credentialProvider">The credential provider.</param>
            <param name="channelProvider">The channel provider.</param>
            <param name="connectorClientRetryPolicy">Retry policy for retrying HTTP operations.</param>
            <param name="customHttpClient">The HTTP client.</param>
            <param name="middleware">The middleware to initially add to the adapter.</param>
            <param name="logger">The ILogger implementation this adapter should use.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="credentialProvider"/> is <c>null</c>.</exception>
            <remarks>Use a <see cref="T:Microsoft.Bot.Builder.MiddlewareSet"/> object to add multiple middleware
            components in the constructor. Use the <see cref="M:Microsoft.Bot.Builder.BotFrameworkAdapter.Use(Microsoft.Bot.Builder.IMiddleware)"/> method to
            add additional middleware to the adapter after construction.
            </remarks>
        </member>
        <member name="M:Microsoft.Bot.Builder.BotFrameworkAdapter.#ctor(Microsoft.Bot.Connector.Authentication.ICredentialProvider,Microsoft.Bot.Connector.Authentication.AuthenticationConfiguration,Microsoft.Bot.Connector.Authentication.IChannelProvider,Microsoft.Rest.TransientFaultHandling.RetryPolicy,System.Net.Http.HttpClient,Microsoft.Bot.Builder.IMiddleware,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Builder.BotFrameworkAdapter"/> class,
            using a credential provider.
            </summary>
            <param name="credentialProvider">The credential provider.</param>
            <param name="authConfig">The authentication configuration.</param>
            <param name="channelProvider">The channel provider.</param>
            <param name="connectorClientRetryPolicy">Retry policy for retrying HTTP operations.</param>
            <param name="customHttpClient">The HTTP client.</param>
            <param name="middleware">The middleware to initially add to the adapter.</param>
            <param name="logger">The ILogger implementation this adapter should use.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="credentialProvider"/> is <c>null</c>.</exception>
            <remarks>Use a <see cref="T:Microsoft.Bot.Builder.MiddlewareSet"/> object to add multiple middleware
            components in the constructor. Use the <see cref="M:Microsoft.Bot.Builder.BotFrameworkAdapter.Use(Microsoft.Bot.Builder.IMiddleware)"/> method to
            add additional middleware to the adapter after construction.
            </remarks>
        </member>
        <member name="M:Microsoft.Bot.Builder.BotFrameworkAdapter.#ctor(Microsoft.Bot.Connector.Authentication.AppCredentials,Microsoft.Bot.Connector.Authentication.AuthenticationConfiguration,Microsoft.Bot.Connector.Authentication.IChannelProvider,Microsoft.Rest.TransientFaultHandling.RetryPolicy,System.Net.Http.HttpClient,Microsoft.Bot.Builder.IMiddleware,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Builder.BotFrameworkAdapter"/> class,
            using a credential provider.
            </summary>
            <param name="credentials">The credentials to be used for token acquisition.</param>
            <param name="authConfig">The authentication configuration.</param>
            <param name="channelProvider">The channel provider.</param>
            <param name="connectorClientRetryPolicy">Retry policy for retrying HTTP operations.</param>
            <param name="customHttpClient">The HTTP client.</param>
            <param name="middleware">The middleware to initially add to the adapter.</param>
            <param name="logger">The ILogger implementation this adapter should use.</param>
            <exception cref="T:System.ArgumentNullException">throw ArgumentNullException.</exception>
            <remarks>Use a <see cref="T:Microsoft.Bot.Builder.MiddlewareSet"/> object to add multiple middleware
            components in the constructor. Use the <see cref="M:Microsoft.Bot.Builder.BotFrameworkAdapter.Use(Microsoft.Bot.Builder.IMiddleware)"/> method to
            add additional middleware to the adapter after construction.
            </remarks>
        </member>
        <member name="P:Microsoft.Bot.Builder.BotFrameworkAdapter.CredentialProvider">
            <summary>
            Gets the credential provider for this adapter.
            </summary>
            <value>
            The credential provider for this adapter.
            </value>
        </member>
        <member name="P:Microsoft.Bot.Builder.BotFrameworkAdapter.ChannelProvider">
            <summary>
            Gets the channel provider for this adapter.
            </summary>
            <value>
            The channel provider for this adapter.
            </value>
        </member>
        <member name="P:Microsoft.Bot.Builder.BotFrameworkAdapter.Logger">
            <summary>
            Gets the logger for this adapter.
            </summary>
            <value>
            The logger for this adapter.
            </value>
        </member>
        <member name="P:Microsoft.Bot.Builder.BotFrameworkAdapter.AppCredentialMap">
            <summary>
            Gets the map of applications to <see cref="T:Microsoft.Bot.Connector.Authentication.AppCredentials"/> for this adapter.
            </summary>
            <value>
            The map of applications to <see cref="T:Microsoft.Bot.Connector.Authentication.AppCredentials"/> for this adapter.
            </value>
        </member>
        <member name="P:Microsoft.Bot.Builder.BotFrameworkAdapter.HttpClient">
            <summary>
            Gets the custom <see cref="P:Microsoft.Bot.Builder.BotFrameworkAdapter.HttpClient"/> for this adapter if specified.
            </summary>
            <value>
            The custom <see cref="P:Microsoft.Bot.Builder.BotFrameworkAdapter.HttpClient"/> for this adapter if specified.
            </value>
        </member>
        <member name="M:Microsoft.Bot.Builder.BotFrameworkAdapter.ContinueConversationAsync(System.String,Microsoft.Bot.Schema.ConversationReference,Microsoft.Bot.Builder.BotCallbackHandler,System.Threading.CancellationToken)">
            <summary>
            Sends a proactive message from the bot to a conversation.
            </summary>
            <param name="botAppId">The application ID of the bot. This is the appId returned by Portal registration, and is
            generally found in the "MicrosoftAppId" parameter in appSettings.json.</param>
            <param name="reference">A reference to the conversation to continue.</param>
            <param name="callback">The method to call for the resulting bot turn.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="botAppId"/>, <paramref name="reference"/>, or
            <paramref name="callback"/> is <c>null</c>.</exception>
            <remarks>Call this method to proactively send a message to a conversation.
            Most _channels require a user to initialize a conversation with a bot
            before the bot can send activities to the user.
            <para>This method registers the following services for the turn.<list type="bullet">
            <item><description><see cref="T:System.Security.Principal.IIdentity"/> (key = "BotIdentity"), a claims claimsIdentity for the bot.
            </description></item>
            <item><description><see cref="T:Microsoft.Bot.Connector.IConnectorClient"/>, the channel connector client to use this turn.
            </description></item>
            </list></para>
            <para>
            This overload differs from the Node implementation by requiring the BotId to be
            passed in. The .Net code allows multiple bots to be hosted in a single adapter which
            isn't something supported by Node.
            </para>
            </remarks>
            <seealso cref="M:Microsoft.Bot.Builder.BotFrameworkAdapter.ProcessActivityAsync(System.String,Microsoft.Bot.Schema.Activity,Microsoft.Bot.Builder.BotCallbackHandler,System.Threading.CancellationToken)"/>
            <seealso cref="M:Microsoft.Bot.Builder.BotAdapter.RunPipelineAsync(Microsoft.Bot.Builder.ITurnContext,Microsoft.Bot.Builder.BotCallbackHandler,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:Microsoft.Bot.Builder.BotFrameworkAdapter.ContinueConversationAsync(System.Security.Claims.ClaimsIdentity,Microsoft.Bot.Schema.ConversationReference,Microsoft.Bot.Builder.BotCallbackHandler,System.Threading.CancellationToken)">
            <summary>
            Sends a proactive message from the bot to a conversation.
            </summary>
            <param name="claimsIdentity">A <see cref="T:System.Security.Claims.ClaimsIdentity"/> for the conversation.</param>
            <param name="reference">A reference to the conversation to continue.</param>
            <param name="callback">The method to call for the resulting bot turn.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <remarks>Call this method to proactively send a message to a conversation.
            Most _channels require a user to initialize a conversation with a bot
            before the bot can send activities to the user.
            <para>This method registers the following services for the turn.<list type="bullet">
            <item><description><see cref="T:System.Security.Principal.IIdentity"/> (key = "BotIdentity"), a claims claimsIdentity for the bot.
            </description></item>
            <item><description><see cref="T:Microsoft.Bot.Connector.IConnectorClient"/>, the channel connector client to use this turn.
            </description></item>
            </list></para>
            </remarks>
            <seealso cref="M:Microsoft.Bot.Builder.BotFrameworkAdapter.ProcessActivityAsync(System.String,Microsoft.Bot.Schema.Activity,Microsoft.Bot.Builder.BotCallbackHandler,System.Threading.CancellationToken)"/>
            <seealso cref="M:Microsoft.Bot.Builder.BotAdapter.RunPipelineAsync(Microsoft.Bot.Builder.ITurnContext,Microsoft.Bot.Builder.BotCallbackHandler,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:Microsoft.Bot.Builder.BotFrameworkAdapter.ContinueConversationAsync(System.Security.Claims.ClaimsIdentity,Microsoft.Bot.Schema.ConversationReference,System.String,Microsoft.Bot.Builder.BotCallbackHandler,System.Threading.CancellationToken)">
            <summary>
            Sends a proactive message from the bot to a conversation.
            </summary>
            <param name="claimsIdentity">A <see cref="T:System.Security.Claims.ClaimsIdentity"/> for the conversation.</param>
            <param name="reference">A reference to the conversation to continue.</param>
            <param name="audience">The target audience for the connector.</param>
            <param name="callback">The method to call for the resulting bot turn.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>A task that represents the work queued to execute.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.BotFrameworkAdapter.Use(Microsoft.Bot.Builder.IMiddleware)">
            <summary>
            Adds middleware to the adapter's pipeline.
            </summary>
            <param name="middleware">The middleware to add.</param>
            <returns>The updated adapter object.</returns>
            <remarks>Middleware is added to the adapter at initialization time.
            For each turn, the adapter calls middleware in the order in which you added it.
            </remarks>
        </member>
        <member name="M:Microsoft.Bot.Builder.BotFrameworkAdapter.ProcessActivityAsync(System.String,Microsoft.Bot.Schema.Activity,Microsoft.Bot.Builder.BotCallbackHandler,System.Threading.CancellationToken)">
            <summary>
            Creates a turn context and runs the middleware pipeline for an incoming activity.
            </summary>
            <param name="authHeader">The HTTP authentication header of the request.</param>
            <param name="activity">The incoming activity.</param>
            <param name="callback">The code to run at the end of the adapter's middleware pipeline.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute. If the activity type
            was 'Invoke' and the corresponding key (channelId + activityId) was found
            then an InvokeResponse is returned, otherwise null is returned.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="activity"/> is <c>null</c>.</exception>
            <exception cref="T:System.UnauthorizedAccessException">authentication failed.</exception>
            <remarks>Call this method to reactively send a message to a conversation.
            If the task completes successfully, then if the activity's <see cref="P:Microsoft.Bot.Schema.Activity.Type"/>
            is <see cref="F:Microsoft.Bot.Schema.ActivityTypes.Invoke"/> and the corresponding key
            (<see cref="P:Microsoft.Bot.Schema.Activity.ChannelId"/> + <see cref="P:Microsoft.Bot.Schema.Activity.Id"/>) is found
            then an <see cref="T:Microsoft.Bot.Builder.InvokeResponse"/> is returned, otherwise null is returned.
            <para>This method registers the following services for the turn.<list type="bullet">
            <item><see cref="T:System.Security.Principal.IIdentity"/> (key = "BotIdentity"), a claims claimsIdentity for the bot.</item>
            <item><see cref="T:Microsoft.Bot.Connector.IConnectorClient"/>, the channel connector client to use this turn.</item>
            </list></para>
            </remarks>
            <seealso cref="M:Microsoft.Bot.Builder.BotFrameworkAdapter.ContinueConversationAsync(System.String,Microsoft.Bot.Schema.ConversationReference,Microsoft.Bot.Builder.BotCallbackHandler,System.Threading.CancellationToken)"/>
            <seealso cref="M:Microsoft.Bot.Builder.BotAdapter.RunPipelineAsync(Microsoft.Bot.Builder.ITurnContext,Microsoft.Bot.Builder.BotCallbackHandler,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:Microsoft.Bot.Builder.BotFrameworkAdapter.ProcessActivityAsync(System.Security.Claims.ClaimsIdentity,Microsoft.Bot.Schema.Activity,Microsoft.Bot.Builder.BotCallbackHandler,System.Threading.CancellationToken)">
            <summary>
            Creates a turn context and runs the middleware pipeline for an incoming activity.
            </summary>
            <param name="claimsIdentity">A <see cref="T:System.Security.Claims.ClaimsIdentity"/> for the request.</param>
            <param name="activity">The incoming activity.</param>
            <param name="callback">The code to run at the end of the adapter's middleware pipeline.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.BotFrameworkAdapter.SendActivitiesAsync(Microsoft.Bot.Builder.ITurnContext,Microsoft.Bot.Schema.Activity[],System.Threading.CancellationToken)">
            <summary>
            Sends activities to the conversation.
            </summary>
            <param name="turnContext">The context object for the turn.</param>
            <param name="activities">The activities to send.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <remarks>If the activities are successfully sent, the task result contains
            an array of <see cref="T:Microsoft.Bot.Schema.ResourceResponse"/> objects containing the IDs that
            the receiving channel assigned to the activities.</remarks>
            <seealso cref="M:Microsoft.Bot.Builder.ITurnContext.OnSendActivities(Microsoft.Bot.Builder.SendActivitiesHandler)"/>
        </member>
        <member name="M:Microsoft.Bot.Builder.BotFrameworkAdapter.UpdateActivityAsync(Microsoft.Bot.Builder.ITurnContext,Microsoft.Bot.Schema.Activity,System.Threading.CancellationToken)">
            <summary>
            Replaces an existing activity in the conversation.
            </summary>
            <param name="turnContext">The context object for the turn.</param>
            <param name="activity">New replacement activity.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <remarks>If the activity is successfully sent, the task result contains
            a <see cref="T:Microsoft.Bot.Schema.ResourceResponse"/> object containing the ID that the receiving
            channel assigned to the activity.
            <para>Before calling this, set the ID of the replacement activity to the ID
            of the activity to replace.</para></remarks>
            <seealso cref="M:Microsoft.Bot.Builder.ITurnContext.OnUpdateActivity(Microsoft.Bot.Builder.UpdateActivityHandler)"/>
        </member>
        <member name="M:Microsoft.Bot.Builder.BotFrameworkAdapter.DeleteActivityAsync(Microsoft.Bot.Builder.ITurnContext,Microsoft.Bot.Schema.ConversationReference,System.Threading.CancellationToken)">
            <summary>
            Deletes an existing activity in the conversation.
            </summary>
            <param name="turnContext">The context object for the turn.</param>
            <param name="reference">Conversation reference for the activity to delete.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <remarks>The <see cref="P:Microsoft.Bot.Schema.ConversationReference.ActivityId"/> of the conversation
            reference identifies the activity to delete.</remarks>
            <seealso cref="M:Microsoft.Bot.Builder.ITurnContext.OnDeleteActivity(Microsoft.Bot.Builder.DeleteActivityHandler)"/>
        </member>
        <member name="M:Microsoft.Bot.Builder.BotFrameworkAdapter.DeleteConversationMemberAsync(Microsoft.Bot.Builder.ITurnContext,System.String,System.Threading.CancellationToken)">
            <summary>
            Removes a member from the current conversation.
            </summary>
            <param name="turnContext">The context object for the turn.</param>
            <param name="memberId">The ID of the member to remove from the conversation.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.BotFrameworkAdapter.GetActivityMembersAsync(Microsoft.Bot.Builder.ITurnContext,System.String,System.Threading.CancellationToken)">
            <summary>
            Lists the members of a given activity.
            </summary>
            <param name="turnContext">The context object for the turn.</param>
            <param name="activityId">(Optional) Activity ID to enumerate. If not specified the current activities ID will be used.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>List of Members of the activity.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.BotFrameworkAdapter.GetConversationMembersAsync(Microsoft.Bot.Builder.ITurnContext,System.Threading.CancellationToken)">
            <summary>
            Lists the members of the current conversation.
            </summary>
            <param name="turnContext">The context object for the turn.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>List of Members of the current conversation.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.BotFrameworkAdapter.GetConversationsAsync(System.String,Microsoft.Bot.Connector.Authentication.MicrosoftAppCredentials,System.String,System.Threading.CancellationToken)">
            <summary>
            Lists the Conversations in which this bot has participated for a given channel server. The
            channel server returns results in pages and each page will include a `continuationToken`
            that can be used to fetch the next page of results from the server.
            </summary>
            <param name="serviceUrl">The URL of the channel server to query.  This can be retrieved
            from `context.activity.serviceUrl`. </param>
            <param name="credentials">The credentials needed for the Bot to connect to the services.</param>
            <param name="continuationToken">The continuation token from the previous page of results.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <remarks>If the task completes successfully, the result contains a page of the members of the current conversation.
            This overload may be called from outside the context of a conversation, as only the
            bot's service URL and credentials are required.
            </remarks>
        </member>
        <member name="M:Microsoft.Bot.Builder.BotFrameworkAdapter.GetConversationsAsync(Microsoft.Bot.Builder.ITurnContext,System.String,System.Threading.CancellationToken)">
            <summary>
            Lists the Conversations in which this bot has participated for a given channel server. The
            channel server returns results in pages and each page will include a `continuationToken`
            that can be used to fetch the next page of results from the server.
            </summary>
            <param name="turnContext">The context object for the turn.</param>
            <param name="continuationToken">The continuation token from the previous page of results.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <remarks>If the task completes successfully, the result contains a page of the members of the current conversation.
            This overload may be called during standard activity processing, at which point the Bot's
            service URL and credentials that are part of the current activity processing pipeline
            will be used.
            </remarks>
        </member>
        <member name="M:Microsoft.Bot.Builder.BotFrameworkAdapter.GetUserTokenAsync(Microsoft.Bot.Builder.ITurnContext,Microsoft.Bot.Connector.Authentication.AppCredentials,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Attempts to retrieve the token for a user that's in a login flow, using customized AppCredentials.
            </summary>
            <param name="turnContext">Context for the current turn of conversation with the user.</param>
            <param name="oAuthAppCredentials">AppCredentials for OAuth.</param>
            <param name="connectionName">Name of the auth connection to use.</param>
            <param name="magicCode">(Optional) Optional user entered code to validate.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>Token Response.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.BotFrameworkAdapter.GetUserTokenAsync(Microsoft.Bot.Builder.ITurnContext,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Attempts to retrieve the token for a user that's in a login flow, using the bot's AppCredentials.
            </summary>
            <param name="turnContext">Context for the current turn of conversation with the user.</param>
            <param name="connectionName">Name of the auth connection to use.</param>
            <param name="magicCode">(Optional) Optional user entered code to validate.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>Token Response.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.BotFrameworkAdapter.GetOauthSignInLinkAsync(Microsoft.Bot.Builder.ITurnContext,Microsoft.Bot.Connector.Authentication.AppCredentials,System.String,System.Threading.CancellationToken)">
            <summary>
            Get the raw signin link to be sent to the user for signin for a connection name, using customized AppCredentials.
            </summary>
            <param name="turnContext">Context for the current turn of conversation with the user.</param>
            <param name="oAuthAppCredentials">AppCredentials for OAuth.</param>
            <param name="connectionName">Name of the auth connection to use.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <remarks>If the task completes successfully, the result contains the raw signin link.</remarks>
        </member>
        <member name="M:Microsoft.Bot.Builder.BotFrameworkAdapter.GetOauthSignInLinkAsync(Microsoft.Bot.Builder.ITurnContext,System.String,System.Threading.CancellationToken)">
            <summary>
            Get the raw signin link to be sent to the user for signin for a connection name, using the bot's AppCredentials.
            </summary>
            <param name="turnContext">Context for the current turn of conversation with the user.</param>
            <param name="connectionName">Name of the auth connection to use.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <remarks>If the task completes successfully, the result contains the raw signin link.</remarks>
        </member>
        <member name="M:Microsoft.Bot.Builder.BotFrameworkAdapter.GetOauthSignInLinkAsync(Microsoft.Bot.Builder.ITurnContext,Microsoft.Bot.Connector.Authentication.AppCredentials,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Get the raw signin link to be sent to the user for signin for a connection name, using customized AppCredentials.
            </summary>
            <param name="turnContext">Context for the current turn of conversation with the user.</param>
            <param name="oAuthAppCredentials">AppCredentials for OAuth.</param>
            <param name="connectionName">Name of the auth connection to use.</param>
            <param name="userId">The user id that will be associated with the token.</param>
            <param name="finalRedirect">The final URL that the OAuth flow will redirect to.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <remarks>If the task completes successfully, the result contains the raw signin link.</remarks>
        </member>
        <member name="M:Microsoft.Bot.Builder.BotFrameworkAdapter.GetOauthSignInLinkAsync(Microsoft.Bot.Builder.ITurnContext,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Get the raw signin link to be sent to the user for signin for a connection name, using the bot's AppCredentials.
            </summary>
            <param name="turnContext">Context for the current turn of conversation with the user.</param>
            <param name="connectionName">Name of the auth connection to use.</param>
            <param name="userId">The user id that will be associated with the token.</param>
            <param name="finalRedirect">The final URL that the OAuth flow will redirect to.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <remarks>If the task completes successfully, the result contains the raw signin link.</remarks>
        </member>
        <member name="M:Microsoft.Bot.Builder.BotFrameworkAdapter.SignOutUserAsync(Microsoft.Bot.Builder.ITurnContext,Microsoft.Bot.Connector.Authentication.AppCredentials,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Signs the user out with the token server, using customized AppCredentials.
            </summary>
            <param name="turnContext">Context for the current turn of conversation with the user.</param>
            <param name="oAuthAppCredentials">AppCredentials for OAuth.</param>
            <param name="connectionName">Name of the auth connection to use.</param>
            <param name="userId">User id of user to sign out.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.BotFrameworkAdapter.SignOutUserAsync(Microsoft.Bot.Builder.ITurnContext,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Signs the user out with the token server, using the bot's AppCredentials.
            </summary>
            <param name="turnContext">Context for the current turn of conversation with the user.</param>
            <param name="connectionName">Name of the auth connection to use.</param>
            <param name="userId">User id of user to sign out.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.BotFrameworkAdapter.GetTokenStatusAsync(Microsoft.Bot.Builder.ITurnContext,Microsoft.Bot.Connector.Authentication.AppCredentials,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Retrieves the token status for each configured connection for the given user, using customized AppCredentials.
            </summary>
            <param name="context">Context for the current turn of conversation with the user.</param>
            <param name="oAuthAppCredentials">AppCredentials for OAuth.</param>
            <param name="userId">The user Id for which token status is retrieved.</param>
            <param name="includeFilter">Optional comma separated list of connection's to include. Blank will return token status for all configured connections.</param>
            <param name="cancellationToken">The async operation cancellation token.</param>
            <returns>Array of TokenStatus.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.BotFrameworkAdapter.GetTokenStatusAsync(Microsoft.Bot.Builder.ITurnContext,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Retrieves the token status for each configured connection for the given user, using the bot's AppCredentials.
            </summary>
            <param name="context">Context for the current turn of conversation with the user.</param>
            <param name="userId">The user Id for which token status is retrieved.</param>
            <param name="includeFilter">Optional comma separated list of connection's to include. Blank will return token status for all configured connections.</param>
            <param name="cancellationToken">The async operation cancellation token.</param>
            <returns>Array of TokenStatus.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.BotFrameworkAdapter.GetAadTokensAsync(Microsoft.Bot.Builder.ITurnContext,Microsoft.Bot.Connector.Authentication.AppCredentials,System.String,System.String[],System.String,System.Threading.CancellationToken)">
            <summary>
            Retrieves Azure Active Directory tokens for particular resources on a configured connection, using customized AppCredentials.
            </summary>
            <param name="context">Context for the current turn of conversation with the user.</param>
            <param name="oAuthAppCredentials">AppCredentials for OAuth.</param>
            <param name="connectionName">The name of the Azure Active Directory connection configured with this bot.</param>
            <param name="resourceUrls">The list of resource URLs to retrieve tokens for.</param>
            <param name="userId">The user Id for which tokens are retrieved. If passing in null the userId is taken from the Activity in the ITurnContext.</param>
            <param name="cancellationToken">The async operation cancellation token.</param>
            <returns>Dictionary of resourceUrl to the corresponding TokenResponse.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.BotFrameworkAdapter.GetSignInResourceAsync(Microsoft.Bot.Builder.ITurnContext,System.String,System.Threading.CancellationToken)">
            <summary>
            Get the raw signin link to be sent to the user for signin for a connection name.
            </summary>
            <param name="turnContext">Context for the current turn of conversation with the user.</param>
            <param name="connectionName">Name of the auth connection to use.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <remarks>If the task completes successfully, the result contains the raw signin link.</remarks>
        </member>
        <member name="M:Microsoft.Bot.Builder.BotFrameworkAdapter.GetSignInResourceAsync(Microsoft.Bot.Builder.ITurnContext,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Get the raw signin link to be sent to the user for signin for a connection name.
            </summary>
            <param name="turnContext">Context for the current turn of conversation with the user.</param>
            <param name="connectionName">Name of the auth connection to use.</param>
            <param name="userId">The user id that will be associated with the token.</param>
            <param name="finalRedirect">The final URL that the OAuth flow will redirect to.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <remarks>If the task completes successfully, the result contains the raw signin link.</remarks>
        </member>
        <member name="M:Microsoft.Bot.Builder.BotFrameworkAdapter.GetSignInResourceAsync(Microsoft.Bot.Builder.ITurnContext,Microsoft.Bot.Connector.Authentication.AppCredentials,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Get the raw signin link to be sent to the user for signin for a connection name.
            </summary>
            <param name="turnContext">Context for the current turn of conversation with the user.</param>
            <param name="oAuthAppCredentials">AppCredentials for OAuth.</param>
            <param name="connectionName">Name of the auth connection to use.</param>
            <param name="userId">The user id that will be associated with the token.</param>
            <param name="finalRedirect">The final URL that the OAuth flow will redirect to.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <remarks>If the task completes successfully, the result contains the raw signin link.</remarks>
        </member>
        <member name="M:Microsoft.Bot.Builder.BotFrameworkAdapter.ExchangeTokenAsync(Microsoft.Bot.Builder.ITurnContext,System.String,System.String,Microsoft.Bot.Schema.TokenExchangeRequest,System.Threading.CancellationToken)">
            <summary>
            Performs a token exchange operation such as for single sign-on.
            </summary>
            <param name="turnContext">Context for the current turn of conversation with the user.</param>
            <param name="connectionName">Name of the auth connection to use.</param>
            <param name="userId">The user id associated with the token..</param>
            <param name="exchangeRequest">The exchange request details, either a token to exchange or a uri to exchange.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>If the task completes, the exchanged token is returned.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.BotFrameworkAdapter.ExchangeTokenAsync(Microsoft.Bot.Builder.ITurnContext,Microsoft.Bot.Connector.Authentication.AppCredentials,System.String,System.String,Microsoft.Bot.Schema.TokenExchangeRequest,System.Threading.CancellationToken)">
            <summary>
            Performs a token exchange operation such as for single sign-on.
            </summary>
            <param name="turnContext">Context for the current turn of conversation with the user.</param>
            <param name="oAuthAppCredentials">AppCredentials for OAuth.</param>
            <param name="connectionName">Name of the auth connection to use.</param>
            <param name="userId">The user id associated with the token..</param>
            <param name="exchangeRequest">The exchange request details, either a token to exchange or a uri to exchange.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>If the task completes, the exchanged token is returned.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.BotFrameworkAdapter.GetAadTokensAsync(Microsoft.Bot.Builder.ITurnContext,System.String,System.String[],System.String,System.Threading.CancellationToken)">
            <summary>
            Retrieves Azure Active Directory tokens for particular resources on a configured connection, using the bot's AppCredentials.
            </summary>
            <param name="context">Context for the current turn of conversation with the user.</param>
            <param name="connectionName">The name of the Azure Active Directory connection configured with this bot.</param>
            <param name="resourceUrls">The list of resource URLs to retrieve tokens for.</param>
            <param name="userId">The user Id for which tokens are retrieved. If passing in null the userId is taken from the Activity in the ITurnContext.</param>
            <param name="cancellationToken">The async operation cancellation token.</param>
            <returns>Dictionary of resourceUrl to the corresponding TokenResponse.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.BotFrameworkAdapter.CreateConversationAsync(System.String,System.String,Microsoft.Bot.Connector.Authentication.MicrosoftAppCredentials,Microsoft.Bot.Schema.ConversationParameters,Microsoft.Bot.Builder.BotCallbackHandler,System.Threading.CancellationToken)">
            <summary>
            Creates a conversation on the specified channel.
            </summary>
            <param name="channelId">The ID for the channel.</param>
            <param name="serviceUrl">The channel's service URL endpoint.</param>
            <param name="credentials">The application credentials for the bot.</param>
            <param name="conversationParameters">The conversation information to use to
            create the conversation.</param>
            <param name="callback">The method to call for the resulting bot turn.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <remarks>To start a conversation, your bot must know its account information
            and the user's account information on that channel.
            Most _channels only support initiating a direct message (non-group) conversation.
            <para>The adapter attempts to create a new conversation on the channel, and
            then sends a <c>conversationUpdate</c> activity through its middleware pipeline
            to the <paramref name="callback"/> method.</para>
            <para>If the conversation is established with the
            specified users, the ID of the activity's <see cref="P:Microsoft.Bot.Schema.IActivity.Conversation"/>
            will contain the ID of the new conversation.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.Bot.Builder.BotFrameworkAdapter.CreateConversationAsync(System.String,System.String,Microsoft.Bot.Connector.Authentication.AppCredentials,Microsoft.Bot.Schema.ConversationParameters,Microsoft.Bot.Builder.BotCallbackHandler,System.Threading.CancellationToken)">
            <summary>
            Creates a conversation on the specified channel.
            </summary>
            <param name="channelId">The ID for the channel.</param>
            <param name="serviceUrl">The channel's service URL endpoint.</param>
            <param name="credentials">The application credentials for the bot.</param>
            <param name="conversationParameters">The conversation information to use to
            create the conversation.</param>
            <param name="callback">The method to call for the resulting bot turn.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <remarks>To start a conversation, your bot must know its account information
            and the user's account information on that channel.
            Most _channels only support initiating a direct message (non-group) conversation.
            <para>The adapter attempts to create a new conversation on the channel, and
            then sends a <c>conversationUpdate</c> activity through its middleware pipeline
            to the <paramref name="callback"/> method.</para>
            <para>If the conversation is established with the
            specified users, the ID of the activity's <see cref="P:Microsoft.Bot.Schema.IActivity.Conversation"/>
            will contain the ID of the new conversation.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.Bot.Builder.BotFrameworkAdapter.CreateConversationAsync(System.String,System.String,Microsoft.Bot.Connector.Authentication.MicrosoftAppCredentials,Microsoft.Bot.Schema.ConversationParameters,Microsoft.Bot.Builder.BotCallbackHandler,Microsoft.Bot.Schema.ConversationReference,System.Threading.CancellationToken)">
            <summary>
            Creates a conversation on the specified channel. Overload receives a ConversationReference including the tenant.
            </summary>
            <param name="channelId">The ID for the channel.</param>
            <param name="serviceUrl">The channel's service URL endpoint.</param>
            <param name="credentials">The application credentials for the bot.</param>
            <param name="conversationParameters">The conversation information to use to
            create the conversation.</param>
            <param name="callback">The method to call for the resulting bot turn.</param>
            <param name="reference">A conversation reference that contains the tenant.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <remarks>To start a conversation, your bot must know its account information
            and the user's account information on that channel.
            Most _channels only support initiating a direct message (non-group) conversation.
            <para>The adapter attempts to create a new conversation on the channel, and
            then sends a <c>conversationUpdate</c> activity through its middleware pipeline
            to the <paramref name="callback"/> method.</para>
            <para>If the conversation is established with the
            specified users, the ID of the activity's <see cref="P:Microsoft.Bot.Schema.IActivity.Conversation"/>
            will contain the ID of the new conversation.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.Bot.Builder.BotFrameworkAdapter.CreateConversationAsync(System.String,System.String,Microsoft.Bot.Connector.Authentication.AppCredentials,Microsoft.Bot.Schema.ConversationParameters,Microsoft.Bot.Builder.BotCallbackHandler,Microsoft.Bot.Schema.ConversationReference,System.Threading.CancellationToken)">
            <summary>
            Creates a conversation on the specified channel. Overload receives a ConversationReference including the tenant.
            </summary>
            <param name="channelId">The ID for the channel.</param>
            <param name="serviceUrl">The channel's service URL endpoint.</param>
            <param name="credentials">The application credentials for the bot.</param>
            <param name="conversationParameters">The conversation information to use to
            create the conversation.</param>
            <param name="callback">The method to call for the resulting bot turn.</param>
            <param name="reference">A conversation reference that contains the tenant.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <remarks>To start a conversation, your bot must know its account information
            and the user's account information on that channel.
            Most _channels only support initiating a direct message (non-group) conversation.
            <para>The adapter attempts to create a new conversation on the channel, and
            then sends a <c>conversationUpdate</c> activity through its middleware pipeline
            to the <paramref name="callback"/> method.</para>
            <para>If the conversation is established with the
            specified users, the ID of the activity's <see cref="P:Microsoft.Bot.Schema.IActivity.Conversation"/>
            will contain the ID of the new conversation.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.Bot.Builder.BotFrameworkAdapter.CreateOAuthApiClientAsync(Microsoft.Bot.Builder.ITurnContext,Microsoft.Bot.Connector.Authentication.AppCredentials)">
            <summary>
            Creates an OAuth client for the bot with the credentials.
            </summary>
            <param name="turnContext">The context object for the current turn.</param>
            <param name="oAuthAppCredentials">AppCredentials for OAuth.</param>
            <returns>An OAuth client for the bot.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.BotFrameworkAdapter.CreateOAuthApiClientAsync(Microsoft.Bot.Builder.ITurnContext)">
            <summary>
            Creates an OAuth client for the bot.
            </summary>
            <param name="turnContext">The context object for the current turn.</param>
            <returns>An OAuth client for the bot.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.BotFrameworkAdapter.CanProcessOutgoingActivity(Microsoft.Bot.Schema.Activity)">
            <summary>
            Opportunity for subclasses to opt in to process an outgoing activity.
            </summary>
            <remarks>
            Subclasses can override ProcessOutgoingActivityAsync. If CanProcessOutgoingActivity returns true, 
            ProcessOutgoingActivityAsync will be responsible for sending the outgoing activity.
            </remarks>
            <param name="activity">The outgoing activity.</param>
            <returns>Whether should call ProcessOutgoingActivityAsync to send the outgoing activity.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.BotFrameworkAdapter.ProcessOutgoingActivityAsync(Microsoft.Bot.Builder.ITurnContext,Microsoft.Bot.Schema.Activity,System.Threading.CancellationToken)">
            <summary>
            Custom logic to send an outgoing activity. Subclasses can override this method along with CanProcessOutgoingActivity
            to have custom logic to process the outgoing activity.
            </summary>
            <param name="turnContext">The context object for the turn.</param>
            <param name="activity">The activity to be processed.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The result of processing the activity.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.BotFrameworkAdapter.BuildCredentialsAsync(System.String,System.String)">
            <summary>
            Logic to build an <see cref="T:Microsoft.Bot.Connector.Authentication.AppCredentials"/> object to be used to acquire tokens
            for this HttpClient.
            </summary>
            <param name="appId">The application id.</param>
            <param name="oAuthScope">The optional OAuth scope.</param>
            <returns>The app credentials to be used to acquire tokens.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.BotFrameworkAdapter.GetBotAppId(Microsoft.Bot.Builder.ITurnContext)">
            <summary>
            Gets the AppId of the Bot out of the TurnState.
            </summary>
            <param name="turnContext">The context object for the turn.</param>
            <returns>Bot's AppId.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.BotFrameworkAdapter.GenerateCallerIdAsync(System.Security.Claims.ClaimsIdentity)">
            <summary>
            Generates the CallerId property for the activity based on
            https://github.com/microsoft/botframework-obi/blob/master/protocols/botframework-activity/botframework-activity.md#appendix-v---caller-id-values.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Builder.BotFrameworkAdapter.CreateConnectorClientAsync(System.String,System.Security.Claims.ClaimsIdentity,System.String)">
            <summary>
            Creates the connector client asynchronous.
            </summary>
            <param name="serviceUrl">The service URL.</param>
            <param name="claimsIdentity">The claims claimsIdentity.</param>
            <param name="audience">The target audience for the connector.</param>
            <returns>ConnectorClient instance.</returns>
            <exception cref="T:System.NotSupportedException">ClaimsIdentity cannot be null. Pass Anonymous ClaimsIdentity if authentication is turned off.</exception>
        </member>
        <member name="M:Microsoft.Bot.Builder.BotFrameworkAdapter.CreateConnectorClient(System.String,Microsoft.Bot.Connector.Authentication.AppCredentials)">
            <summary>
            Creates the connector client.
            </summary>
            <param name="serviceUrl">The service URL.</param>
            <param name="appCredentials">The application credentials for the bot.</param>
            <returns>Connector client instance.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.BotFrameworkAdapter.GetAppCredentialsAsync(System.String,System.String)">
            <summary>
            Gets the application credentials. App credentials are cached to avoid refreshing the
            token each time.
            </summary>
            <param name="appId">The application identifier (AAD ID for the bot).</param>
            <param name="oAuthScope">The scope for the token. Skills use the skill's app ID. </param>
            <returns>App credentials.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.BotFrameworkAdapter.GetBotFrameworkOAuthScope">
            <summary>
            This method returns the correct Bot Framework OAuthScope for AppCredentials.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Builder.BotFrameworkAdapter.LogAndThrowException(System.Exception,System.String)">
            <summary>
            Logs and throws an exception.
            </summary>
            <param name="ex"> Exception instance to throw.</param>
            <param name="source"> Source method for the exception.</param>
        </member>
        <member name="T:Microsoft.Bot.Builder.BotFrameworkAdapter.TenantIdWorkaroundForTeamsMiddleware">
            <summary>
            Middleware to assign tenantId from channelData to Conversation.TenantId.
            </summary>
            <description>
            MS Teams currently sends the tenant ID in channelData and the correct behavior is to expose this value in Activity.Conversation.TenantId.
            This code copies the tenant ID from channelData to Activity.Conversation.TenantId.
            Once MS Teams sends the tenantId in the Conversation property, this middleware can be removed.
            </description>
        </member>
        <member name="T:Microsoft.Bot.Builder.BotFrameworkHttpStatusCodeErrorDetectionStrategy">
            <summary>
            Bot Framework HTTP Status code error detection strategy.
            </summary>
            <seealso cref="T:Microsoft.Rest.TransientFaultHandling.ITransientErrorDetectionStrategy" />
        </member>
        <member name="M:Microsoft.Bot.Builder.BotFrameworkHttpStatusCodeErrorDetectionStrategy.IsTransient(System.Exception)">
            <summary>
            Returns true if status code in HttpRequestExceptionWithStatus exception is RequestTimeout, TooManyRequests, NotFound or greater
            than or equal to 500 and not NotImplemented (501) or HttpVersionNotSupported (505).
            </summary>
            <param name="ex">Exception to check against.</param>
            <returns>True if exception is transient otherwise false.</returns>
        </member>
        <member name="T:Microsoft.Bot.Builder.BotState">
             <summary>
             Defines a state management object and automates the reading and writing of associated state
             properties to a storage layer.
             </summary>
             <remarks>
             Each state management object defines a scope for a storage layer.
            
             State properties are created within a state management scope, and the Bot Framework
             defines these scopes:
             <see cref="T:Microsoft.Bot.Builder.ConversationState"/>, <see cref="T:Microsoft.Bot.Builder.UserState"/>, and <see cref="T:Microsoft.Bot.Builder.PrivateConversationState"/>.
            
             You can define additional scopes for your bot.
             </remarks>
             <seealso cref="T:Microsoft.Bot.Builder.IStorage"/>
             <seealso cref="T:Microsoft.Bot.Builder.IStatePropertyAccessor`1"/>
        </member>
        <member name="M:Microsoft.Bot.Builder.BotState.#ctor(Microsoft.Bot.Builder.IStorage,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Builder.BotState"/> class.
            </summary>
            <param name="storage">The storage layer this state management object will use to store
            and retrieve state.</param>
            <param name="contextServiceKey">The key for the state cache for this <see cref="T:Microsoft.Bot.Builder.BotState"/>.</param>
            <remarks>This constructor creates a state management object and associated scope.
            The object uses <paramref name="storage"/> to persist state property values.
            The object uses the <paramref name="contextServiceKey"/> to cache state within the context for each turn.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="storage"/> or <paramref name="contextServiceKey"/>
            is <c>null</c>.</exception>
            <seealso cref="T:Microsoft.Bot.Builder.ITurnContext"/>
        </member>
        <member name="M:Microsoft.Bot.Builder.BotState.CreateProperty``1(System.String)">
            <summary>
            Creates a named state property within the scope of a <see cref="T:Microsoft.Bot.Builder.BotState"/> and returns
            an accessor for the property.
            </summary>
            <typeparam name="T">The value type of the property.</typeparam>
            <param name="name">The name of the property.</param>
            <returns>An accessor for the property.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Microsoft.Bot.Builder.BotState.LoadAsync(Microsoft.Bot.Builder.ITurnContext,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Populates the state cache for this <see cref="T:Microsoft.Bot.Builder.BotState"/> from the storage layer.
            </summary>
            <param name="turnContext">The context object for this turn.</param>
            <param name="force">Optional, <c>true</c> to overwrite any existing state cache;
            or <c>false</c> to load state from storage only if the cache doesn't already exist.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="turnContext"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Microsoft.Bot.Builder.BotState.SaveChangesAsync(Microsoft.Bot.Builder.ITurnContext,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Writes the state cache for this <see cref="T:Microsoft.Bot.Builder.BotState"/> to the storage layer.
            </summary>
            <param name="turnContext">The context object for this turn.</param>
            <param name="force">Optional, <c>true</c> to save the state cache to storage;
            or <c>false</c> to save state to storage only if a property in the cache has changed.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="turnContext"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Microsoft.Bot.Builder.BotState.ClearStateAsync(Microsoft.Bot.Builder.ITurnContext,System.Threading.CancellationToken)">
            <summary>
            Clears the state cache for this <see cref="T:Microsoft.Bot.Builder.BotState"/>.
            </summary>
            <param name="turnContext">The context object for this turn.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <remarks>This method clears the state cache in the turn context. Call
            <see cref="M:Microsoft.Bot.Builder.BotState.SaveChangesAsync(Microsoft.Bot.Builder.ITurnContext,System.Boolean,System.Threading.CancellationToken)"/> to persist this
            change in the storage layer.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="turnContext"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Microsoft.Bot.Builder.BotState.DeleteAsync(Microsoft.Bot.Builder.ITurnContext,System.Threading.CancellationToken)">
            <summary>
            Deletes any state in storage and the cache for this <see cref="T:Microsoft.Bot.Builder.BotState"/>.
            </summary>
            <param name="turnContext">The context object for this turn.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="turnContext"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Microsoft.Bot.Builder.BotState.Get(Microsoft.Bot.Builder.ITurnContext)">
            <summary>
            Gets a copy of the raw cached data for this <see cref="T:Microsoft.Bot.Builder.BotState"/> from the turn context.
            </summary>
            <param name="turnContext">The context object for this turn.</param>
            <returns>A JSON representation of the cached state.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="turnContext"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Microsoft.Bot.Builder.BotState.GetCachedState(Microsoft.Bot.Builder.ITurnContext)">
            <summary>
            Gets the cached bot state instance that wraps the raw cached data for this <see cref="T:Microsoft.Bot.Builder.BotState"/>
            from the turn context.
            </summary>
            <param name="turnContext">The context object for this turn.</param>
            <returns>The cached bot state instance.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="turnContext"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Microsoft.Bot.Builder.BotState.GetStorageKey(Microsoft.Bot.Builder.ITurnContext)">
            <summary>
            When overridden in a derived class, gets the key to use when reading and writing state to and from storage.
            </summary>
            <param name="turnContext">The context object for this turn.</param>
            <returns>The storage key.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.BotState.GetPropertyValueAsync``1(Microsoft.Bot.Builder.ITurnContext,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the value of a property from the state cache for this <see cref="T:Microsoft.Bot.Builder.BotState"/>.
            </summary>
            <typeparam name="T">The value type of the property.</typeparam>
            <param name="turnContext">The context object for this turn.</param>
            <param name="propertyName">The name of the property.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <remarks>If the task is successful, the result contains the property value, otherwise it will be default(T).</remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="turnContext"/> or
            <paramref name="propertyName"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Microsoft.Bot.Builder.BotState.DeletePropertyValueAsync(Microsoft.Bot.Builder.ITurnContext,System.String,System.Threading.CancellationToken)">
            <summary>
            Deletes a property from the state cache for this <see cref="T:Microsoft.Bot.Builder.BotState"/>.
            </summary>
            <param name="turnContext">The context object for this turn.</param>
            <param name="propertyName">The name of the property.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="turnContext"/> or
            <paramref name="propertyName"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Microsoft.Bot.Builder.BotState.SetPropertyValueAsync(Microsoft.Bot.Builder.ITurnContext,System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            Sets the value of a property in the state cache for this <see cref="T:Microsoft.Bot.Builder.BotState"/>.
            </summary>
            <param name="turnContext">The context object for this turn.</param>
            <param name="propertyName">The name of the property to set.</param>
            <param name="value">The value to set on the property.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="turnContext"/> or
            <paramref name="propertyName"/> is <c>null</c>.</exception>
        </member>
        <member name="T:Microsoft.Bot.Builder.BotState.CachedBotState">
            <summary>
            Internal cached bot state.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Builder.BotState.CachedBotState.#ctor(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Builder.BotState.CachedBotState"/> class.
            </summary>
            <param name="state">Initial state for the <see cref="T:Microsoft.Bot.Builder.BotState.CachedBotState"/>.</param>
        </member>
        <member name="P:Microsoft.Bot.Builder.BotState.CachedBotState.State">
            <summary>
            Gets or sets the state as a dictionary of key value pairs.
            </summary>
            <value>
            The state as a dictionary of key value pairs.
            </value>
        </member>
        <member name="T:Microsoft.Bot.Builder.BotState.BotStatePropertyAccessor`1">
            <summary>
            Implements an <see cref="T:Microsoft.Bot.Builder.IStatePropertyAccessor`1"/> for a property container.
            Note the semantics of this accessor are intended to be lazy, this means the Get, Set and Delete
            methods will first call LoadAsync. This will be a no-op if the data is already loaded.
            The implication is you can just use this accessor in the application code directly without first calling LoadAsync
            this approach works with the AutoSaveStateMiddleware which will save as needed at the end of a turn.
            </summary>
            <typeparam name="T">type of value the propertyAccessor accesses.</typeparam>
        </member>
        <member name="P:Microsoft.Bot.Builder.BotState.BotStatePropertyAccessor`1.Name">
            <summary>
            Gets name of the property.
            </summary>
            <value>
            name of the property.
            </value>
        </member>
        <member name="M:Microsoft.Bot.Builder.BotState.BotStatePropertyAccessor`1.DeleteAsync(Microsoft.Bot.Builder.ITurnContext,System.Threading.CancellationToken)">
            <summary>
            Delete the property. The semantics are intended to be lazy, note the use of LoadAsync at the start.
            </summary>
            <param name="turnContext">The turn context.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.BotState.BotStatePropertyAccessor`1.GetAsync(Microsoft.Bot.Builder.ITurnContext,System.Func{`0},System.Threading.CancellationToken)">
            <summary>
            Get the property value. The semantics are intended to be lazy, note the use of LoadAsync at the start.
            </summary>
            <param name="turnContext">The context object for this turn.</param>
            <param name="defaultValueFactory">Defines the default value.
            Invoked when no value been set for the requested state property.
            If defaultValueFactory is defined as null in that case, the method returns null and
            <see cref="M:Microsoft.Bot.Builder.BotState.BotStatePropertyAccessor`1.SetAsync(Microsoft.Bot.Builder.ITurnContext,`0,System.Threading.CancellationToken)">SetAsync</see> is not called.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.BotState.BotStatePropertyAccessor`1.SetAsync(Microsoft.Bot.Builder.ITurnContext,`0,System.Threading.CancellationToken)">
            <summary>
            Set the property value. The semantics are intended to be lazy, note the use of LoadAsync at the start.
            </summary>
            <param name="turnContext">turn context.</param>
            <param name="value">value.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="T:Microsoft.Bot.Builder.BotStateSet">
            <summary>
             Manages a collection of botState and provides ability to load and save in parallel.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Builder.BotStateSet.#ctor(Microsoft.Bot.Builder.BotState[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Builder.BotStateSet"/> class.
            </summary>
            <param name="botStates">initial list of <see cref="T:Microsoft.Bot.Builder.BotState"/> objects to manage.</param>
        </member>
        <member name="P:Microsoft.Bot.Builder.BotStateSet.BotStates">
            <summary>
            Gets or sets the BotStates list for the BotStateSet.
            </summary>
            <value>The BotState objects managed by this class.</value>
        </member>
        <member name="M:Microsoft.Bot.Builder.BotStateSet.Add(Microsoft.Bot.Builder.BotState)">
            <summary>
            Adds a bot state object to the set.
            </summary>
            <param name="botState">The bot state object to add.</param>
            <returns>The updated <see cref="T:Microsoft.Bot.Builder.BotStateSet"/>, so you can fluently call <see cref="M:Microsoft.Bot.Builder.BotStateSet.Add(Microsoft.Bot.Builder.BotState)"/> multiple times.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.BotStateSet.LoadAllAsync(Microsoft.Bot.Builder.ITurnContext,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Load all BotState records in parallel.
            </summary>
            <param name="turnContext">turn context.</param>
            <param name="force">should data be forced into cache.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.BotStateSet.SaveAllChangesAsync(Microsoft.Bot.Builder.ITurnContext,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Save All BotState changes in parallel.
            </summary>
            <param name="turnContext">turn context.</param>
            <param name="force">should data be forced to save even if no change were detected.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
        </member>
        <member name="T:Microsoft.Bot.Builder.ChannelServiceHandler">
            <summary>
            A class to help with the implementation of the Bot Framework protocol.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Builder.ChannelServiceHandler.#ctor(Microsoft.Bot.Connector.Authentication.ICredentialProvider,Microsoft.Bot.Connector.Authentication.AuthenticationConfiguration,Microsoft.Bot.Connector.Authentication.IChannelProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Builder.ChannelServiceHandler"/> class,
            using a credential provider.
            </summary>
            <param name="credentialProvider">The credential provider.</param>
            <param name="authConfiguration">The authentication configuration.</param>
            <param name="channelProvider">The channel provider.</param>
            <exception cref="T:System.ArgumentNullException">throw ArgumentNullException.</exception>
        </member>
        <member name="P:Microsoft.Bot.Builder.ChannelServiceHandler.ChannelProvider">
            <summary>
            Gets the channel provider that implements <see cref="T:Microsoft.Bot.Connector.Authentication.IChannelProvider"/>.
            </summary>
            <value>
            The channel provider that implements <see cref="T:Microsoft.Bot.Connector.Authentication.IChannelProvider"/>.
            </value>
        </member>
        <member name="M:Microsoft.Bot.Builder.ChannelServiceHandler.AuthenticateAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Helper to authenticate the header.
            </summary>
            <remarks>
            This code is very similar to the code in <see cref="M:Microsoft.Bot.Connector.Authentication.JwtTokenValidation.AuthenticateRequest(Microsoft.Bot.Schema.IActivity,System.String,Microsoft.Bot.Connector.Authentication.ICredentialProvider,Microsoft.Bot.Connector.Authentication.IChannelProvider,Microsoft.Bot.Connector.Authentication.AuthenticationConfiguration,System.Net.Http.HttpClient)"/>,
            we should move this code somewhere in that library when we refactor auth, for now we keep it private to avoid adding more public static
            functions that we will need to deprecate later.
            </remarks>
            <param name="authHeader">The auth header containing JWT token.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>A <see cref="T:System.Security.Claims.ClaimsIdentity"/> representing the claims associated with given header.</returns>
        </member>
        <member name="T:Microsoft.Bot.Builder.ChannelServiceHandlerBase">
            <summary>
            Base class for Bot Framework protocol implementation.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Builder.ChannelServiceHandlerBase.HandleSendToConversationAsync(System.String,System.String,Microsoft.Bot.Schema.Activity,System.Threading.CancellationToken)">
            <summary>
            Sends an activity to the end of a conversation.
            </summary>
            <param name="authHeader">The authentication header.</param>
            <param name="conversationId">The conversation Id.</param>
            <param name="activity">The activity to send.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> representing the result of the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.ChannelServiceHandlerBase.HandleReplyToActivityAsync(System.String,System.String,System.String,Microsoft.Bot.Schema.Activity,System.Threading.CancellationToken)">
            <summary>
            Sends a reply to an activity.
            </summary>
            <param name="authHeader">The authentication header.</param>
            <param name="conversationId">The conversation Id.</param>
            <param name="activityId">The activity Id the reply is to.</param>
            <param name="activity">The activity to send.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> representing the result of the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.ChannelServiceHandlerBase.HandleUpdateActivityAsync(System.String,System.String,System.String,Microsoft.Bot.Schema.Activity,System.Threading.CancellationToken)">
            <summary>
            Edits a previously sent existing activity.
            </summary>
            <param name="authHeader">The authentication header.</param>
            <param name="conversationId">The conversation Id.</param>
            <param name="activityId">The activity Id to update.</param>
            <param name="activity">The replacement activity.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> representing the result of the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.ChannelServiceHandlerBase.HandleDeleteActivityAsync(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Deletes an existing activity.
            </summary>
            <param name="authHeader">The authentication header.</param>
            <param name="conversationId">The conversation Id.</param>
            <param name="activityId">The activity Id.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the result of the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.ChannelServiceHandlerBase.HandleGetActivityMembersAsync(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Enumerates the members of an activity.
            </summary>
            <param name="authHeader">The authentication header.</param>
            <param name="conversationId">The conversation Id.</param>
            <param name="activityId">The activity Id.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> representing the result of the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.ChannelServiceHandlerBase.HandleCreateConversationAsync(System.String,Microsoft.Bot.Schema.ConversationParameters,System.Threading.CancellationToken)">
            <summary>
            Create a new Conversation.
            </summary>
            <param name="authHeader">The authentication header.</param>
            <param name="parameters">Parameters to create the conversation from.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> representing the result of the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.ChannelServiceHandlerBase.HandleGetConversationsAsync(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Lists the Conversations in which the bot has participated.
            </summary>
            <param name="authHeader">The authentication header.</param>
            <param name="conversationId">The conversation Id.</param>
            <param name="continuationToken">A skip or continuation token.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> representing the result of the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.ChannelServiceHandlerBase.HandleGetConversationMembersAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Enumerates the members of a conversation.
            </summary>
            <param name="authHeader">The authentication header.</param>
            <param name="conversationId">The conversation Id.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> representing the result of the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.ChannelServiceHandlerBase.HandleGetConversationPagedMembersAsync(System.String,System.String,System.Nullable{System.Int32},System.String,System.Threading.CancellationToken)">
            <summary>
            Enumerates the members of a conversation one page at a time.
            </summary>
            <param name="authHeader">The authentication header.</param>
            <param name="conversationId">The conversation Id.</param>
            <param name="pageSize">Suggested page size.</param>
            <param name="continuationToken">A continuation token.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> representing the result of the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.ChannelServiceHandlerBase.HandleDeleteConversationMemberAsync(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Deletes a member from a conversation.
            </summary>
            <param name="authHeader">The authentication header.</param>
            <param name="conversationId">The conversation Id.</param>
            <param name="memberId">Id of the member to delete from this conversation.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.ChannelServiceHandlerBase.HandleSendConversationHistoryAsync(System.String,System.String,Microsoft.Bot.Schema.Transcript,System.Threading.CancellationToken)">
            <summary>
            Uploads the historic activities of the conversation.
            </summary>
            <param name="authHeader">The authentication header.</param>
            <param name="conversationId">The conversation Id.</param>
            <param name="transcript">Transcript of activities.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> representing the result of the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.ChannelServiceHandlerBase.HandleUploadAttachmentAsync(System.String,System.String,Microsoft.Bot.Schema.AttachmentData,System.Threading.CancellationToken)">
            <summary>
            Stores data in a compliant store when dealing with enterprises.
            </summary>
            <param name="authHeader">The authentication header.</param>
            <param name="conversationId">The conversation Id.</param>
            <param name="attachmentUpload">Attachment data.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> representing the result of the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.ChannelServiceHandlerBase.AuthenticateAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Helper to authenticate the header token and extract the claims.
            </summary>
            <param name="authHeader">The auth header containing JWT token.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>A <see cref="T:System.Security.Claims.ClaimsIdentity"/> representing the claims associated with given header.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.ChannelServiceHandlerBase.OnSendToConversationAsync(System.Security.Claims.ClaimsIdentity,System.String,Microsoft.Bot.Schema.Activity,System.Threading.CancellationToken)">
             <summary>
             SendToConversation() API for Skill.
             </summary>
             <remarks>
             This method allows you to send an activity to the end of a conversation.
            
             This is slightly different from ReplyToActivity().
             * SendToConversation(conversationId) - will append the activity to the end
             of the conversation according to the timestamp or semantics of the channel.
             * ReplyToActivity(conversationId,ActivityId) - adds the activity as a reply
             to another activity, if the channel supports it. If the channel does not
             support nested replies, ReplyToActivity falls back to SendToConversation.
            
             Use ReplyToActivity when replying to a specific activity in the
             conversation.
            
             Use SendToConversation in all other cases.
             </remarks>
             <param name="claimsIdentity">claimsIdentity for the bot, should have AudienceClaim, AppIdClaim and ServiceUrlClaim.</param>
             <param name='conversationId'>conversationId.</param> 
             <param name='activity'>Activity to send.</param>
             <param name='cancellationToken'>The cancellation token.</param>
             <returns>task for a resource response.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.ChannelServiceHandlerBase.OnReplyToActivityAsync(System.Security.Claims.ClaimsIdentity,System.String,System.String,Microsoft.Bot.Schema.Activity,System.Threading.CancellationToken)">
             <summary>
             OnReplyToActivityAsync() API.
             </summary>
             <remarks>
             Override this method allows to reply to an Activity.
            
             This is slightly different from SendToConversation().
             * SendToConversation(conversationId) - will append the activity to the end
             of the conversation according to the timestamp or semantics of the channel.
             * ReplyToActivity(conversationId,ActivityId) - adds the activity as a reply
             to another activity, if the channel supports it. If the channel does not
             support nested replies, ReplyToActivity falls back to SendToConversation.
            
             Use ReplyToActivity when replying to a specific activity in the
             conversation.
            
             Use SendToConversation in all other cases.
             </remarks>
             <param name="claimsIdentity">claimsIdentity for the bot, should have AudienceClaim, AppIdClaim and ServiceUrlClaim.</param>
             <param name='conversationId'>Conversation ID.</param>
             <param name='activityId'>activityId the reply is to (OPTIONAL).</param>
             <param name='activity'>Activity to send.</param>
             <param name='cancellationToken'>The cancellation token.</param>
             <returns>task for a resource response.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.ChannelServiceHandlerBase.OnUpdateActivityAsync(System.Security.Claims.ClaimsIdentity,System.String,System.String,Microsoft.Bot.Schema.Activity,System.Threading.CancellationToken)">
             <summary>
             OnUpdateActivityAsync() API.
             </summary>
             <remarks>
             Override this method to edit a previously sent existing activity.
            
             Some channels allow you to edit an existing activity to reflect the new
             state of a bot conversation.
            
             For example, you can remove buttons after someone has clicked "Approve"
             button.
             </remarks>
             <param name="claimsIdentity">claimsIdentity for the bot, should have AudienceClaim, AppIdClaim and ServiceUrlClaim.</param>
             <param name='conversationId'>Conversation ID.</param>
             <param name='activityId'>activityId to update.</param>
             <param name='activity'>replacement Activity.</param>
             <param name='cancellationToken'>The cancellation token.</param>
             <returns>task for a resource response.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.ChannelServiceHandlerBase.OnDeleteActivityAsync(System.Security.Claims.ClaimsIdentity,System.String,System.String,System.Threading.CancellationToken)">
             <summary>
             OnDeleteActivityAsync() API.
             </summary>
             <remarks>
             Override this method to Delete an existing activity.
            
             Some channels allow you to delete an existing activity, and if successful
             this method will remove the specified activity.
             </remarks>
             <param name="claimsIdentity">claimsIdentity for the bot, should have AudienceClaim, AppIdClaim and ServiceUrlClaim.</param>
             <param name='conversationId'>Conversation ID.</param>
             <param name='activityId'>activityId to delete.</param>
             <param name='cancellationToken'>The cancellation token.</param>
             <returns>task for a resource response.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.ChannelServiceHandlerBase.OnGetActivityMembersAsync(System.Security.Claims.ClaimsIdentity,System.String,System.String,System.Threading.CancellationToken)">
             <summary>
             OnGetActivityMembersAsync() API.
             </summary>
             <remarks>
             Override this method to enumerate the members of an activity.
            
             This REST API takes a ConversationId and a ActivityId, returning an array
             of ChannelAccount objects representing the members of the particular
             activity in the conversation.
             </remarks>
             <param name="claimsIdentity">claimsIdentity for the bot, should have AudienceClaim, AppIdClaim and ServiceUrlClaim.</param>
             <param name='conversationId'>Conversation ID.</param>
             <param name='activityId'>Activity ID.</param>
             <param name='cancellationToken'>The cancellation token.</param>
             <returns>task with result.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.ChannelServiceHandlerBase.OnCreateConversationAsync(System.Security.Claims.ClaimsIdentity,Microsoft.Bot.Schema.ConversationParameters,System.Threading.CancellationToken)">
             <summary>
             CreateConversation() API.
             </summary>
             <remarks>
             Override this method to create a new Conversation.
            
             POST to this method with a
             * Bot being the bot creating the conversation
             * IsGroup set to true if this is not a direct message (default is false)
             * Array containing the members to include in the conversation
            
             The return value is a ResourceResponse which contains a conversation ID
             which is suitable for use
             in the message payload and REST API URIs.
            
             Most channels only support the semantics of bots initiating a direct
             message conversation.  An example of how to do that would be:
            
             var resource = await connector.conversations.CreateConversation(new
             ConversationParameters(){ Bot = bot, members = new ChannelAccount[] { new
             ChannelAccount("user1") } );
             await connect.Conversations.OnSendToConversationAsync(resource.Id, new
             Activity() ... ) ;
            
             end. 
             </remarks>
             <param name="claimsIdentity">claimsIdentity for the bot, should have AudienceClaim, AppIdClaim and ServiceUrlClaim.</param>
             <param name='parameters'>Parameters to create the conversation from.</param>
             <param name='cancellationToken'>The cancellation token.</param>
             <returns>task for a conversation resource response.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.ChannelServiceHandlerBase.OnGetConversationsAsync(System.Security.Claims.ClaimsIdentity,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            OnGetConversationsAsync() API for Skill.
            </summary>
            <remarks>
            Override this method to list the Conversations in which this bot has participated.
            
            GET from this method with a skip token
            
            The return value is a ConversationsResult, which contains an array of
            ConversationMembers and a skip token.  If the skip token is not empty, then
            there are further values to be returned. Call this method again with the
            returned token to get more values.
            
            Each ConversationMembers object contains the ID of the conversation and an
            array of ChannelAccounts that describe the members of the conversation.
            </remarks>
            <param name="claimsIdentity">claimsIdentity for the bot, should have AudienceClaim, AppIdClaim and ServiceUrlClaim.</param>
            <param name='conversationId'>conversationId.</param> 
            <param name='continuationToken'>skip or continuation token.</param>
            <param name='cancellationToken'>The cancellation token.</param>
            <returns>task for ConversationsResult.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.ChannelServiceHandlerBase.OnGetConversationMembersAsync(System.Security.Claims.ClaimsIdentity,System.String,System.Threading.CancellationToken)">
             <summary>
             GetConversationMembers() API for Skill.
             </summary>
             <remarks>
             Override this method to enumerate the members of a conversation.
            
             This REST API takes a ConversationId and returns an array of ChannelAccount
             objects representing the members of the conversation.
             </remarks>
             <param name="claimsIdentity">claimsIdentity for the bot, should have AudienceClaim, AppIdClaim and ServiceUrlClaim.</param>
             <param name='conversationId'>Conversation ID.</param>
             <param name='cancellationToken'>The cancellation token.</param>
             <returns>task for a response.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.ChannelServiceHandlerBase.OnGetConversationPagedMembersAsync(System.Security.Claims.ClaimsIdentity,System.String,System.Nullable{System.Int32},System.String,System.Threading.CancellationToken)">
             <summary>
             GetConversationPagedMembers() API for Skill.
             </summary>
             <remarks>
             Override this method to enumerate the members of a conversation one page at a time.
            
             This REST API takes a ConversationId. Optionally a pageSize and/or
             continuationToken can be provided. It returns a PagedMembersResult, which
             contains an array
             of ChannelAccounts representing the members of the conversation and a
             continuation token that can be used to get more values.
            
             One page of ChannelAccounts records are returned with each call. The number
             of records in a page may vary between channels and calls. The pageSize
             parameter can be used as
             a suggestion. If there are no additional results the response will not
             contain a continuation token. If there are no members in the conversation
             the Members will be empty or not present in the response.
            
             A response to a request that has a continuation token from a prior request
             may rarely return members from a previous request.
             </remarks>
             <param name="claimsIdentity">claimsIdentity for the bot, should have AudienceClaim, AppIdClaim and ServiceUrlClaim.</param>
             <param name='conversationId'>Conversation ID.</param>
             <param name='pageSize'>Suggested page size.</param>
             <param name='continuationToken'>Continuation Token.</param>
             <param name='cancellationToken'>The cancellation token.</param>
             <returns>task for a response.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.ChannelServiceHandlerBase.OnDeleteConversationMemberAsync(System.Security.Claims.ClaimsIdentity,System.String,System.String,System.Threading.CancellationToken)">
             <summary>
             DeleteConversationMember() API for Skill.
             </summary>
             <remarks>
             Override this method to deletes a member from a conversation.
            
             This REST API takes a ConversationId and a memberId (of type string) and
             removes that member from the conversation. If that member was the last
             member
             of the conversation, the conversation will also be deleted.
             </remarks>
             <param name="claimsIdentity">claimsIdentity for the bot, should have AudienceClaim, AppIdClaim and ServiceUrlClaim.</param>
             <param name='conversationId'>Conversation ID.</param>
             <param name='memberId'>ID of the member to delete from this conversation.</param>
             <param name='cancellationToken'>The cancellation token.</param>
             <returns>task.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.ChannelServiceHandlerBase.OnSendConversationHistoryAsync(System.Security.Claims.ClaimsIdentity,System.String,Microsoft.Bot.Schema.Transcript,System.Threading.CancellationToken)">
             <summary>
             SendConversationHistory() API for Skill.
             </summary>
             <remarks>
             Override this method to this method allows you to upload the historic activities to the conversation.
            
             Sender must ensure that the historic activities have unique ids and
             appropriate timestamps. The ids are used by the client to deal with
             duplicate activities and the timestamps are used by the client to render
             the activities in the right order.
             </remarks>
             <param name="claimsIdentity">claimsIdentity for the bot, should have AudienceClaim, AppIdClaim and ServiceUrlClaim.</param>
             <param name='conversationId'>Conversation ID.</param>
             <param name='transcript'>Transcript of activities.</param>
             <param name='cancellationToken'>The cancellation token.</param>
             <returns>task for a resource response.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.ChannelServiceHandlerBase.OnUploadAttachmentAsync(System.Security.Claims.ClaimsIdentity,System.String,Microsoft.Bot.Schema.AttachmentData,System.Threading.CancellationToken)">
            <summary>
            UploadAttachment() API.
            </summary>
            <remarks>
            
            Override this method to store data in a compliant store when dealing with enterprises.
            
            The response is a ResourceResponse which contains an AttachmentId which is
            suitable for using with the attachments API.
            </remarks>
            <param name="claimsIdentity">claimsIdentity for the bot, should have AudienceClaim, AppIdClaim and ServiceUrlClaim.</param>
            <param name='conversationId'>Conversation ID.</param>
            <param name='attachmentUpload'>Attachment data.</param>
            <param name='cancellationToken'>The cancellation token.</param>
            <returns>task with result.</returns>
        </member>
        <member name="T:Microsoft.Bot.Builder.CloudAdapterBase">
            <summary>
            An adapter that implements the Bot Framework Protocol and can be hosted in different cloud environmens both public and private.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Builder.CloudAdapterBase.#ctor(Microsoft.Bot.Connector.Authentication.BotFrameworkAuthentication,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Builder.CloudAdapterBase"/> class.
            </summary>
            <param name="botFrameworkAuthentication">The cloud environment used for validating and creating tokens.</param>
            <param name="logger">The ILogger implementation this adapter should use.</param>
        </member>
        <member name="P:Microsoft.Bot.Builder.CloudAdapterBase.BotFrameworkAuthentication">
            <summary>
            Gets the <see cref="P:Microsoft.Bot.Builder.CloudAdapterBase.BotFrameworkAuthentication" /> instance for this adapter.
            </summary>
            <value>
            The <see cref="P:Microsoft.Bot.Builder.CloudAdapterBase.BotFrameworkAuthentication" /> instance for this adapter.
            </value>
        </member>
        <member name="P:Microsoft.Bot.Builder.CloudAdapterBase.Logger">
            <summary>
            Gets a <see cref="T:Microsoft.Extensions.Logging.ILogger" /> to use within this adapter and its subclasses.
            </summary>
            <value>
            The <see cref="T:Microsoft.Extensions.Logging.ILogger" /> instance for this adapter.
            </value>
        </member>
        <member name="M:Microsoft.Bot.Builder.CloudAdapterBase.SendActivitiesAsync(Microsoft.Bot.Builder.ITurnContext,Microsoft.Bot.Schema.Activity[],System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Bot.Builder.CloudAdapterBase.UpdateActivityAsync(Microsoft.Bot.Builder.ITurnContext,Microsoft.Bot.Schema.Activity,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Bot.Builder.CloudAdapterBase.DeleteActivityAsync(Microsoft.Bot.Builder.ITurnContext,Microsoft.Bot.Schema.ConversationReference,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Bot.Builder.CloudAdapterBase.ContinueConversationAsync(System.String,Microsoft.Bot.Schema.ConversationReference,Microsoft.Bot.Builder.BotCallbackHandler,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Bot.Builder.CloudAdapterBase.ContinueConversationAsync(System.Security.Claims.ClaimsIdentity,Microsoft.Bot.Schema.ConversationReference,Microsoft.Bot.Builder.BotCallbackHandler,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Bot.Builder.CloudAdapterBase.ContinueConversationAsync(System.Security.Claims.ClaimsIdentity,Microsoft.Bot.Schema.ConversationReference,System.String,Microsoft.Bot.Builder.BotCallbackHandler,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Bot.Builder.CloudAdapterBase.ContinueConversationAsync(System.String,Microsoft.Bot.Schema.Activity,Microsoft.Bot.Builder.BotCallbackHandler,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Bot.Builder.CloudAdapterBase.ContinueConversationAsync(System.Security.Claims.ClaimsIdentity,Microsoft.Bot.Schema.Activity,Microsoft.Bot.Builder.BotCallbackHandler,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Bot.Builder.CloudAdapterBase.ContinueConversationAsync(System.Security.Claims.ClaimsIdentity,Microsoft.Bot.Schema.Activity,System.String,Microsoft.Bot.Builder.BotCallbackHandler,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Bot.Builder.CloudAdapterBase.ProcessProactiveAsync(System.Security.Claims.ClaimsIdentity,Microsoft.Bot.Schema.Activity,System.String,Microsoft.Bot.Builder.BotCallbackHandler,System.Threading.CancellationToken)">
            <summary>
            The implementation for continue conversation.
            </summary>
            <param name="claimsIdentity">A <see cref="T:System.Security.Claims.ClaimsIdentity"/> for the conversation.</param>
            <param name="continuationActivity">The continuation <see cref="T:Microsoft.Bot.Schema.Activity"/> used to create the <see cref="T:Microsoft.Bot.Builder.ITurnContext" />.</param>
            <param name="audience">The audience for the call.</param>
            <param name="callback">The method to call for the resulting bot turn.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>A task that represents the work queued to execute.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.CloudAdapterBase.ProcessActivityAsync(System.String,Microsoft.Bot.Schema.Activity,Microsoft.Bot.Builder.BotCallbackHandler,System.Threading.CancellationToken)">
            <summary>
            The implementation for processing an Activity sent to this bot.
            </summary>
            <param name="authHeader">The authorization header from the http request.</param>
            <param name="activity">The <see cref="T:Microsoft.Bot.Schema.Activity"/> to process.</param>
            <param name="callback">The method to call for the resulting bot turn.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>A task that represents the work queued to execute. Containing the InvokeResponse if there is one.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.CloudAdapterBase.ProcessActivityAsync(Microsoft.Bot.Connector.Authentication.AuthenticateRequestResult,Microsoft.Bot.Schema.Activity,Microsoft.Bot.Builder.BotCallbackHandler,System.Threading.CancellationToken)">
            <summary>
            The implementation for processing an Activity sent to this bot.
            </summary>
            <param name="authenticateRequestResult">The authentication results for this turn.</param>
            <param name="activity">The <see cref="T:Microsoft.Bot.Schema.Activity"/> to process.</param>
            <param name="callback">The method to call for the resulting bot turn.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>A task that represents the work queued to execute. Containing the InvokeResponse if there is one.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.CloudAdapterBase.CreateClaimsIdentity(System.String)">
            <summary>
            This is a helper to create the ClaimsIdentity structure from an appId that will be added to the TurnContext.
            It is intended for use in proactive and named-pipe scenarios.
            </summary>
            <param name="botAppId">The bot's application id.</param>
            <returns>A <see cref="T:System.Security.Claims.ClaimsIdentity"/> with the audience and appId claims set to the appId.</returns>
        </member>
        <member name="T:Microsoft.Bot.Builder.CloudChannelServiceHandler">
            <summary>
            A class to help with the implementation of the Bot Framework protocol using BotFrameworkAuthentication.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Builder.CloudChannelServiceHandler.#ctor(Microsoft.Bot.Connector.Authentication.BotFrameworkAuthentication)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Builder.CloudChannelServiceHandler"/> class, using Bot Framework Authentication.
            </summary>
            <param name="auth">The Bot Framework Authentication object.</param>
        </member>
        <member name="M:Microsoft.Bot.Builder.CloudChannelServiceHandler.AuthenticateAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.Bot.Builder.ComponentRegistration">
            <summary>
            ComponentRegistration is a signature class for discovering assets from components. 
            </summary>
            <remarks>
            To make your components available to the system you derive from ComponentRegistration and implement appropriate 
            interfaces which register functionality.  These components then are consumed in appropriate places by the 
            systems that need them. For example, to add declarative types to the system you simply add class that 
            implements IComponentDeclarativeTypes.
            <code>
            public class MyComponentRegistration : IComponentDeclarativeTypes
            {
                public IEnumerable&lt;DeclarativeType&gt;()
                {  
                     yield return new DeclarativeType&lt;MyType&gt;("Contoso.MyType");
                     ...
                }
            }
            startup.cs:
                 ComponentRegistration.Add(new DeclarativeComponentRegistration()); 
                 ComponentRegistration.Add(new MyComponentRegistration());
            </code>
            </remarks>
        </member>
        <member name="P:Microsoft.Bot.Builder.ComponentRegistration.Components">
            <summary>
            Gets list of all ComponentRegistration objects registered.
            </summary>
            <value>
            A numeration of ComponentRegistration objects.
            </value>
        </member>
        <member name="M:Microsoft.Bot.Builder.ComponentRegistration.Add(Microsoft.Bot.Builder.ComponentRegistration)">
            <summary>
            Add a component which implements registration methods.
            </summary>
            <remarks>Only one instance per type is allowed for components.</remarks>
            <param name="componentRegistration">componentRegistration.</param>
        </member>
        <member name="T:Microsoft.Bot.Builder.ConversationState">
            <summary>
            Defines a state management object for conversation state.
            </summary>
            <remarks>
            Conversation state is available in any turn in a specific conversation, regardless of user,
            such as in a group conversation.
            </remarks>
        </member>
        <member name="M:Microsoft.Bot.Builder.ConversationState.#ctor(Microsoft.Bot.Builder.IStorage)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Builder.ConversationState"/> class.
            </summary>
            <param name="storage">The storage layer to use.</param>
        </member>
        <member name="M:Microsoft.Bot.Builder.ConversationState.GetStorageKey(Microsoft.Bot.Builder.ITurnContext)">
            <summary>
            Gets the key to use when reading and writing state to and from storage.
            </summary>
            <param name="turnContext">The context object for this turn.</param>
            <returns>The storage key.</returns>
            <remarks>
            Conversation state includes the channel ID and conversation ID as part of its storage key.
            </remarks>
            <exception cref="T:System.ArgumentNullException">The <see cref="P:Microsoft.Bot.Builder.ITurnContext.Activity"/> for the
            current turn is missing <see cref="P:Microsoft.Bot.Schema.Activity.ChannelId"/> or
            <see cref="P:Microsoft.Bot.Schema.Activity.Conversation"/> information, or the conversation's
            <see cref="P:Microsoft.Bot.Schema.ConversationAccount.Id"/> is missing.</exception>
        </member>
        <member name="T:Microsoft.Bot.Builder.DelegatingTurnContext`1">
            <summary>
            A TurnContext with a strongly typed Activity property that wraps an untyped inner TurnContext.
            </summary>
            <typeparam name="T">An IActivity derived type, that is one of IMessageActivity, IConversationUpdateActivity etc.</typeparam>
        </member>
        <member name="M:Microsoft.Bot.Builder.DelegatingTurnContext`1.#ctor(Microsoft.Bot.Builder.ITurnContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Builder.DelegatingTurnContext`1"/> class.
            </summary>
            <param name="innerTurnContext">The inner turn context.</param>
        </member>
        <member name="P:Microsoft.Bot.Builder.DelegatingTurnContext`1.Microsoft#Bot#Builder#ITurnContext{T}#Activity">
            <summary>
            Gets the inner  context's activity, cast to the type parameter of this <see cref="T:Microsoft.Bot.Builder.DelegatingTurnContext`1"/>.
            </summary>
            <value>The inner context's activity.</value>
        </member>
        <member name="P:Microsoft.Bot.Builder.DelegatingTurnContext`1.Adapter">
            <summary>
            Gets the bot adapter that created this context object.
            </summary>
            <value>The bot adapter that created this context object.</value>
        </member>
        <member name="P:Microsoft.Bot.Builder.DelegatingTurnContext`1.TurnState">
            <summary>
            Gets the collection of values cached with the context object for the lifetime of the turn.
            </summary>
            <value>The collection of services registered on this context object.</value>
        </member>
        <member name="P:Microsoft.Bot.Builder.DelegatingTurnContext`1.Activity">
            <summary>
            Gets the activity for this turn of the bot.
            </summary>
            <value>The activity for this turn of the bot.</value>
        </member>
        <member name="P:Microsoft.Bot.Builder.DelegatingTurnContext`1.Responded">
            <summary>
            Gets a value indicating whether at least one response was sent for the current turn.
            </summary>
            <value><c>true</c> if at least one response was sent for the current turn; otherwise, <c>false</c>.</value>
            <seealso cref="M:Microsoft.Bot.Builder.DelegatingTurnContext`1.SendActivityAsync(Microsoft.Bot.Schema.IActivity,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:Microsoft.Bot.Builder.DelegatingTurnContext`1.DeleteActivityAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Deletes an existing activity.
            </summary>
            <param name="activityId">The ID of the activity to delete.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <para>Not all channels support this operation. For channels that don\'t, this call may throw an exception.</para>
            <seealso cref="M:Microsoft.Bot.Builder.DelegatingTurnContext`1.OnDeleteActivity(Microsoft.Bot.Builder.DeleteActivityHandler)"/>
            <seealso cref="M:Microsoft.Bot.Builder.DelegatingTurnContext`1.DeleteActivityAsync(Microsoft.Bot.Schema.ConversationReference,System.Threading.CancellationToken)"/>
            <seealso cref="M:Microsoft.Bot.Builder.DelegatingTurnContext`1.SendActivitiesAsync(Microsoft.Bot.Schema.IActivity[],System.Threading.CancellationToken)"/>
            <seealso cref="M:Microsoft.Bot.Builder.DelegatingTurnContext`1.UpdateActivityAsync(Microsoft.Bot.Schema.IActivity,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:Microsoft.Bot.Builder.DelegatingTurnContext`1.DeleteActivityAsync(Microsoft.Bot.Schema.ConversationReference,System.Threading.CancellationToken)">
            <summary>
            Deletes an existing activity.
            </summary>
            <param name="conversationReference">The conversation containing the activity to delete.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <remarks>The conversation reference's <see cref="P:Microsoft.Bot.Schema.ConversationReference.ActivityId"/>
            indicates the activity in the conversation to delete.
            <para>Not all channels support this operation. For channels that don't, this call may throw an exception.</para></remarks>
            <seealso cref="M:Microsoft.Bot.Builder.DelegatingTurnContext`1.OnDeleteActivity(Microsoft.Bot.Builder.DeleteActivityHandler)"/>
            <seealso cref="M:Microsoft.Bot.Builder.DelegatingTurnContext`1.DeleteActivityAsync(System.String,System.Threading.CancellationToken)"/>
            <seealso cref="M:Microsoft.Bot.Builder.DelegatingTurnContext`1.SendActivitiesAsync(Microsoft.Bot.Schema.IActivity[],System.Threading.CancellationToken)"/>
            <seealso cref="M:Microsoft.Bot.Builder.DelegatingTurnContext`1.UpdateActivityAsync(Microsoft.Bot.Schema.IActivity,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:Microsoft.Bot.Builder.DelegatingTurnContext`1.OnDeleteActivity(Microsoft.Bot.Builder.DeleteActivityHandler)">
            <summary>
            Adds a response handler for delete activity operations.
            </summary>
            <param name="handler">The handler to add to the context object.</param>
            <returns>The updated context object.</returns>
            <remarks>When the context's <see cref="M:Microsoft.Bot.Builder.DelegatingTurnContext`1.DeleteActivityAsync(System.String,System.Threading.CancellationToken)"/> is called,
            the adapter calls the registered handlers in the order in which they were
            added to the context object.
            </remarks>
            <seealso cref="M:Microsoft.Bot.Builder.DelegatingTurnContext`1.DeleteActivityAsync(Microsoft.Bot.Schema.ConversationReference,System.Threading.CancellationToken)"/>
            <seealso cref="M:Microsoft.Bot.Builder.DelegatingTurnContext`1.DeleteActivityAsync(System.String,System.Threading.CancellationToken)"/>
            <seealso cref="T:Microsoft.Bot.Builder.DeleteActivityHandler"/>
            <seealso cref="M:Microsoft.Bot.Builder.DelegatingTurnContext`1.OnSendActivities(Microsoft.Bot.Builder.SendActivitiesHandler)"/>
            <seealso cref="M:Microsoft.Bot.Builder.DelegatingTurnContext`1.OnUpdateActivity(Microsoft.Bot.Builder.UpdateActivityHandler)"/>
        </member>
        <member name="M:Microsoft.Bot.Builder.DelegatingTurnContext`1.OnSendActivities(Microsoft.Bot.Builder.SendActivitiesHandler)">
            <summary>
            Adds a response handler for send activity operations.
            </summary>
            <param name="handler">The handler to add to the context object.</param>
            <returns>The updated context object.</returns>
            <remarks>When the context's <see cref="M:Microsoft.Bot.Builder.DelegatingTurnContext`1.SendActivityAsync(Microsoft.Bot.Schema.IActivity,System.Threading.CancellationToken)"/>
            or <see cref="M:Microsoft.Bot.Builder.DelegatingTurnContext`1.SendActivitiesAsync(Microsoft.Bot.Schema.IActivity[],System.Threading.CancellationToken)"/> method is called,
            the adapter calls the registered handlers in the order in which they were
            added to the context object.
            </remarks>
            <seealso cref="M:Microsoft.Bot.Builder.DelegatingTurnContext`1.SendActivityAsync(System.String,System.String,System.String,System.Threading.CancellationToken)"/>
            <seealso cref="M:Microsoft.Bot.Builder.DelegatingTurnContext`1.SendActivityAsync(Microsoft.Bot.Schema.IActivity,System.Threading.CancellationToken)"/>
            <seealso cref="M:Microsoft.Bot.Builder.DelegatingTurnContext`1.SendActivitiesAsync(Microsoft.Bot.Schema.IActivity[],System.Threading.CancellationToken)"/>
            <seealso cref="T:Microsoft.Bot.Builder.SendActivitiesHandler"/>
            <seealso cref="M:Microsoft.Bot.Builder.DelegatingTurnContext`1.OnUpdateActivity(Microsoft.Bot.Builder.UpdateActivityHandler)"/>
            <seealso cref="M:Microsoft.Bot.Builder.DelegatingTurnContext`1.OnDeleteActivity(Microsoft.Bot.Builder.DeleteActivityHandler)"/>
        </member>
        <member name="M:Microsoft.Bot.Builder.DelegatingTurnContext`1.OnUpdateActivity(Microsoft.Bot.Builder.UpdateActivityHandler)">
            <summary>
            Adds a response handler for update activity operations.
            </summary>
            <param name="handler">The handler to add to the context object.</param>
            <returns>The updated context object.</returns>
            <remarks>When the context's <see cref="M:Microsoft.Bot.Builder.DelegatingTurnContext`1.UpdateActivityAsync(Microsoft.Bot.Schema.IActivity,System.Threading.CancellationToken)"/> is called,
            the adapter calls the registered handlers in the order in which they were
            added to the context object.
            </remarks>
            <seealso cref="M:Microsoft.Bot.Builder.DelegatingTurnContext`1.UpdateActivityAsync(Microsoft.Bot.Schema.IActivity,System.Threading.CancellationToken)"/>
            <seealso cref="T:Microsoft.Bot.Builder.UpdateActivityHandler"/>
            <seealso cref="M:Microsoft.Bot.Builder.DelegatingTurnContext`1.OnSendActivities(Microsoft.Bot.Builder.SendActivitiesHandler)"/>
            <seealso cref="M:Microsoft.Bot.Builder.DelegatingTurnContext`1.OnDeleteActivity(Microsoft.Bot.Builder.DeleteActivityHandler)"/>
        </member>
        <member name="M:Microsoft.Bot.Builder.DelegatingTurnContext`1.SendActivitiesAsync(Microsoft.Bot.Schema.IActivity[],System.Threading.CancellationToken)">
            <summary>
            Sends a set of activities to the sender of the incoming activity.
            </summary>
            <param name="activities">The activities to send.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <remarks>If the activities are successfully sent, the task result contains
            an array of <see cref="T:Microsoft.Bot.Schema.ResourceResponse"/> objects containing the IDs that
            the receiving channel assigned to the activities.</remarks>
            <seealso cref="M:Microsoft.Bot.Builder.DelegatingTurnContext`1.OnSendActivities(Microsoft.Bot.Builder.SendActivitiesHandler)"/>
            <seealso cref="M:Microsoft.Bot.Builder.DelegatingTurnContext`1.SendActivityAsync(System.String,System.String,System.String,System.Threading.CancellationToken)"/>
            <seealso cref="M:Microsoft.Bot.Builder.DelegatingTurnContext`1.SendActivityAsync(Microsoft.Bot.Schema.IActivity,System.Threading.CancellationToken)"/>
            <seealso cref="M:Microsoft.Bot.Builder.DelegatingTurnContext`1.UpdateActivityAsync(Microsoft.Bot.Schema.IActivity,System.Threading.CancellationToken)"/>
            <seealso cref="M:Microsoft.Bot.Builder.DelegatingTurnContext`1.DeleteActivityAsync(Microsoft.Bot.Schema.ConversationReference,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:Microsoft.Bot.Builder.DelegatingTurnContext`1.SendActivityAsync(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Sends a message activity to the sender of the incoming activity.
            </summary>
            <param name="textReplyToSend">The text of the message to send.</param>
            <param name="speak">Optional, text to be spoken by your bot on a speech-enabled
            channel.</param>
            <param name="inputHint">Optional, indicates whether your bot is accepting,
            expecting, or ignoring user input after the message is delivered to the client.
            <see cref="T:Microsoft.Bot.Schema.InputHints"/> defines the possible values.
            Default is <see cref="F:Microsoft.Bot.Schema.InputHints.AcceptingInput"/>.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <remarks>If the activity is successfully sent, the task result contains
            a <see cref="T:Microsoft.Bot.Schema.ResourceResponse"/> object that contains the ID that the receiving
            channel assigned to the activity.
            <para>See the channel's documentation for limits imposed upon the contents of
            <paramref name="textReplyToSend"/>.</para>
            <para>To control various characteristics of your bot's speech such as voice,
            rate, volume, pronunciation, and pitch, specify <paramref name="speak"/> in
            Speech Synthesis Markup Language (SSML) format.</para>
            </remarks>
            <seealso cref="M:Microsoft.Bot.Builder.DelegatingTurnContext`1.OnSendActivities(Microsoft.Bot.Builder.SendActivitiesHandler)"/>
            <seealso cref="M:Microsoft.Bot.Builder.DelegatingTurnContext`1.SendActivityAsync(Microsoft.Bot.Schema.IActivity,System.Threading.CancellationToken)"/>
            <seealso cref="M:Microsoft.Bot.Builder.DelegatingTurnContext`1.SendActivitiesAsync(Microsoft.Bot.Schema.IActivity[],System.Threading.CancellationToken)"/>
            <seealso cref="M:Microsoft.Bot.Builder.DelegatingTurnContext`1.UpdateActivityAsync(Microsoft.Bot.Schema.IActivity,System.Threading.CancellationToken)"/>
            <seealso cref="M:Microsoft.Bot.Builder.DelegatingTurnContext`1.DeleteActivityAsync(Microsoft.Bot.Schema.ConversationReference,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:Microsoft.Bot.Builder.DelegatingTurnContext`1.SendActivityAsync(Microsoft.Bot.Schema.IActivity,System.Threading.CancellationToken)">
            <summary>
            Sends an activity to the sender of the incoming activity.
            </summary>
            <param name="activity">The activity to send.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <remarks>If the activity is successfully sent, the task result contains
            a <see cref="T:Microsoft.Bot.Schema.ResourceResponse"/> object containing the ID that the receiving
            channel assigned to the activity.</remarks>
            <seealso cref="M:Microsoft.Bot.Builder.DelegatingTurnContext`1.OnSendActivities(Microsoft.Bot.Builder.SendActivitiesHandler)"/>
            <seealso cref="M:Microsoft.Bot.Builder.DelegatingTurnContext`1.SendActivityAsync(System.String,System.String,System.String,System.Threading.CancellationToken)"/>
            <seealso cref="M:Microsoft.Bot.Builder.DelegatingTurnContext`1.SendActivitiesAsync(Microsoft.Bot.Schema.IActivity[],System.Threading.CancellationToken)"/>
            <seealso cref="M:Microsoft.Bot.Builder.DelegatingTurnContext`1.UpdateActivityAsync(Microsoft.Bot.Schema.IActivity,System.Threading.CancellationToken)"/>
            <seealso cref="M:Microsoft.Bot.Builder.DelegatingTurnContext`1.DeleteActivityAsync(Microsoft.Bot.Schema.ConversationReference,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:Microsoft.Bot.Builder.DelegatingTurnContext`1.UpdateActivityAsync(Microsoft.Bot.Schema.IActivity,System.Threading.CancellationToken)">
            <summary>
            Replaces an existing activity.
            </summary>
            <param name="activity">New replacement activity.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <remarks>If the activity is successfully sent, the task result contains
            a <see cref="T:Microsoft.Bot.Schema.ResourceResponse"/> object containing the ID that the receiving
            channel assigned to the activity.
            <para>Before calling this, set the ID of the replacement activity to the ID
            of the activity to replace.</para>
            <para>Not all channels support this operation. For channels that don't, this call may throw an exception.</para></remarks>
            <seealso cref="M:Microsoft.Bot.Builder.DelegatingTurnContext`1.OnUpdateActivity(Microsoft.Bot.Builder.UpdateActivityHandler)"/>
            <seealso cref="M:Microsoft.Bot.Builder.DelegatingTurnContext`1.SendActivitiesAsync(Microsoft.Bot.Schema.IActivity[],System.Threading.CancellationToken)"/>
            <seealso cref="M:Microsoft.Bot.Builder.DelegatingTurnContext`1.DeleteActivityAsync(Microsoft.Bot.Schema.ConversationReference,System.Threading.CancellationToken)"/>
        </member>
        <member name="T:Microsoft.Bot.Builder.EventFactory">
            <summary>
            Contains utility methods for creating various event types.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Builder.EventFactory.CreateHandoffInitiation(Microsoft.Bot.Builder.ITurnContext,System.Object,Microsoft.Bot.Schema.Transcript)">
            <summary>
            Create handoff initiation event.
            </summary>
            <param name="turnContext">turn context.</param>
            <param name="handoffContext">agent hub-specific context.</param>
            <param name="transcript">transcript of the conversation.</param>
            <returns>handoff event.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.EventFactory.CreateHandoffStatus(Microsoft.Bot.Schema.ConversationAccount,System.String,System.String)">
            <summary>
            Create handoff status event.
            </summary>
            <param name="conversation">Conversation being handed over.</param>
            <param name="state">State, possible values are: "accepted", "failed", "completed".</param>
            <param name="message">Additional message for failed handoff.</param>
            <returns>handoff event.</returns>
        </member>
        <member name="T:Microsoft.Bot.Builder.FileTranscriptLogger">
            <summary>
            FileTranscriptLogger which creates a .transcript file for each conversationId.
            </summary>
            <remarks>
            This is a useful class for unit tests.
            </remarks>
        </member>
        <member name="M:Microsoft.Bot.Builder.FileTranscriptLogger.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Builder.FileTranscriptLogger"/> class.
            </summary>
            <param name="folder">folder to place the transcript files (Default current folder).</param>
            <param name="unitTestMode">unitTestMode will overwrite transcript files.</param>
        </member>
        <member name="M:Microsoft.Bot.Builder.FileTranscriptLogger.LogActivityAsync(Microsoft.Bot.Schema.IActivity)">
            <summary>
            Log an activity to the transcript.
            </summary>
            <param name="activity">The activity to transcribe.</param>
            <returns>A task that represents the work queued to execute.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.FileTranscriptLogger.GetTranscriptActivitiesAsync(System.String,System.String,System.String,System.DateTimeOffset)">
            <summary>
            Gets from the store activities that match a set of criteria.
            </summary>
            <param name="channelId">The ID of the channel the conversation is in.</param>
            <param name="conversationId">The ID of the conversation.</param>
            <param name="continuationToken">The continuation token (if available).</param>
            <param name="startDate">A cutoff date. Activities older than this date are not included.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <remarks>If the task completes successfully, the result contains the matching activities.</remarks>
        </member>
        <member name="M:Microsoft.Bot.Builder.FileTranscriptLogger.ListTranscriptsAsync(System.String,System.String)">
            <summary>
            Gets the conversations on a channel from the store.
            </summary>
            <param name="channelId">The ID of the channel.</param>
            <param name="continuationToken">Continuation token (if available).</param>
            <returns>A task that represents the work queued to execute.</returns>
            <remarks>List all transcripts for given ChannelID.</remarks>
        </member>
        <member name="M:Microsoft.Bot.Builder.FileTranscriptLogger.DeleteTranscriptAsync(System.String,System.String)">
            <summary>
            Deletes conversation data from the store.
            </summary>
            <param name="channelId">The ID of the channel the conversation is in.</param>
            <param name="conversationId">The ID of the conversation to delete.</param>
            <returns>A task that represents the work queued to execute.</returns>
        </member>
        <member name="T:Microsoft.Bot.Builder.IBot">
            <summary>
            Represents a bot that can operate on incoming activities.
            </summary>
            <remarks>A <see cref="T:Microsoft.Bot.Builder.BotAdapter"/> passes incoming activities from the user's
            channel to the bot's <see cref="M:Microsoft.Bot.Builder.IBot.OnTurnAsync(Microsoft.Bot.Builder.ITurnContext,System.Threading.CancellationToken)"/> method.</remarks>
            <seealso cref="T:Microsoft.Bot.Builder.IMiddleware"/>
        </member>
        <member name="M:Microsoft.Bot.Builder.IBot.OnTurnAsync(Microsoft.Bot.Builder.ITurnContext,System.Threading.CancellationToken)">
            <summary>
            When implemented in a bot, handles an incoming activity.
            </summary>
            <param name="turnContext">The context object for this turn.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <remarks>The <paramref name="turnContext"/> provides information about the
            incoming activity, and other data needed to process the activity.</remarks>
            <seealso cref="T:Microsoft.Bot.Builder.ITurnContext"/>
            <seealso cref="T:Microsoft.Bot.Schema.IActivity"/>
        </member>
        <member name="T:Microsoft.Bot.Builder.IBotPageViewTelemetryClient">
            <summary>
            Describes a logging client for bot telemetry.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Builder.IBotPageViewTelemetryClient.TrackPageView(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.IDictionary{System.String,System.Double})">
            <summary>
            Logs an Application Insights page view.
            </summary>
            <param name="dialogName">The name of the dialog to log the entry / start for.</param>
            <param name="properties">Named string values you can use to search and classify events.</param>
            <param name="metrics">Measurements associated with this event.</param>
        </member>
        <member name="T:Microsoft.Bot.Builder.IBotTelemetryClient">
            <summary>
            Describes a logging client for bot telemetry.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Builder.IBotTelemetryClient.TrackAvailability(System.String,System.DateTimeOffset,System.TimeSpan,System.String,System.Boolean,System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.IDictionary{System.String,System.Double})">
            <summary>
            Send information about availability of an application.
            </summary>
            <param name="name">Availability test name.</param>
            <param name="timeStamp">The time when the availability was captured.</param>
            <param name="duration">The time taken for the availability test to run.</param>
            <param name="runLocation">Name of the location the availability test was run from.</param>
            <param name="success">True if the availability test ran successfully.</param>
            <param name="message">Error message on availability test run failure.</param>
            <param name="properties">Named string values you can use to classify and search for this availability telemetry.</param>
            <param name="metrics">Additional values associated with this availability telemetry.</param>
        </member>
        <member name="M:Microsoft.Bot.Builder.IBotTelemetryClient.TrackDependency(System.String,System.String,System.String,System.String,System.DateTimeOffset,System.TimeSpan,System.String,System.Boolean)">
            <summary>
            Send information about an external dependency (outgoing call) in the application.
            </summary>
            <param name="dependencyTypeName">Name of the command initiated with this dependency call. Low cardinality value.
            Examples are SQL, Azure table, and HTTP.</param>
            <param name="target">External dependency target.</param>
            <param name="dependencyName">Name of the command initiated with this dependency call. Low cardinality value.
            Examples are stored procedure name and URL path template.</param>
            <param name="data">Command initiated by this dependency call. Examples are SQL statement and HTTP
            URL's with all query parameters.</param>
            <param name="startTime">The time when the dependency was called.</param>
            <param name="duration">The time taken by the external dependency to handle the call.</param>
            <param name="resultCode">Result code of dependency call execution.</param>
            <param name="success">True if the dependency call was handled successfully.</param>
        </member>
        <member name="M:Microsoft.Bot.Builder.IBotTelemetryClient.TrackEvent(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.IDictionary{System.String,System.Double})">
            <summary>
            Logs custom events with extensible named fields.
            </summary>
            <param name="eventName">A name for the event.</param>
            <param name="properties">Named string values you can use to search and classify events.</param>
            <param name="metrics">Measurements associated with this event.</param>
        </member>
        <member name="M:Microsoft.Bot.Builder.IBotTelemetryClient.TrackException(System.Exception,System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.IDictionary{System.String,System.Double})">
            <summary>
            Logs a system exception.
            </summary>
            <param name="exception">The exception to log.</param>
            <param name="properties">Named string values you can use to classify and search for this exception.</param>
            <param name="metrics">Additional values associated with this exception.</param>
        </member>
        <member name="M:Microsoft.Bot.Builder.IBotTelemetryClient.TrackTrace(System.String,Microsoft.Bot.Builder.Severity,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Send a trace message.
            </summary>
            <param name="message">Message to display.</param>
            <param name="severityLevel">Trace severity level <see cref="T:Microsoft.Bot.Builder.Severity"/>.</param>
            <param name="properties">Named string values you can use to search and classify events.</param>
        </member>
        <member name="M:Microsoft.Bot.Builder.IBotTelemetryClient.Flush">
            <summary>
            Flushes the in-memory buffer and any metrics being pre-aggregated.
            </summary>
        </member>
        <member name="T:Microsoft.Bot.Builder.IBotTelemetryClientExtensions">
            <summary>
            Extension methods for <see cref="T:Microsoft.Bot.Builder.IBotTelemetryClient"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Builder.IBotTelemetryClientExtensions.TrackDialogView(Microsoft.Bot.Builder.IBotTelemetryClient,System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.IDictionary{System.String,System.Double})">
            <summary>
            Log a DialogView using the TrackPageView method on the IBotTelemetryClient if IBotPageViewTelemetryClient has been implemented.
            Alternatively log the information out via TrackTrace.
            </summary>
            <param name="telemetryClient">The TelemetryClient that implements IBotTelemetryClient.</param>
            <param name="dialogName">The name of the dialog to log the entry / start for.</param>
            <param name="properties">Named string values you can use to search and classify events.</param>
            <param name="metrics">Measurements associated with this event.</param>
        </member>
        <member name="T:Microsoft.Bot.Builder.NextDelegate">
            <summary>
            Encapsulates an asynchronous method that calls the next
            <see cref="T:Microsoft.Bot.Builder.IMiddleware"/>.<see cref="M:Microsoft.Bot.Builder.IMiddleware.OnTurnAsync(Microsoft.Bot.Builder.ITurnContext,Microsoft.Bot.Builder.NextDelegate,System.Threading.CancellationToken)"/>
            or <see cref="T:Microsoft.Bot.Builder.IBot"/>.<see cref="M:Microsoft.Bot.Builder.IBot.OnTurnAsync(Microsoft.Bot.Builder.ITurnContext,System.Threading.CancellationToken)"/> method in the middleware pipeline.
            </summary>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
        </member>
        <member name="T:Microsoft.Bot.Builder.IMiddleware">
            <summary>
            Represents middleware that can operate on incoming activities.
            </summary>
            <remarks>A <see cref="T:Microsoft.Bot.Builder.BotAdapter"/> passes incoming activities from the user's
            channel to the middleware's <see cref="M:Microsoft.Bot.Builder.IMiddleware.OnTurnAsync(Microsoft.Bot.Builder.ITurnContext,Microsoft.Bot.Builder.NextDelegate,System.Threading.CancellationToken)"/>
            method.
            <para>You can add middleware objects to your adapter’s middleware collection. The
            adapter processes and directs incoming activities in through the bot middleware
            pipeline to your bot’s logic and then back out again. As each activity flows in
            and out of the bot, each piece of middleware can inspect or act upon the activity,
            both before and after the bot logic runs.</para>
            <para>For each activity, the adapter calls middleware in the order in which you
            added it.</para>
            </remarks>
            <seealso cref="T:Microsoft.Bot.Builder.IBot"/>
        </member>
        <member name="M:Microsoft.Bot.Builder.IMiddleware.OnTurnAsync(Microsoft.Bot.Builder.ITurnContext,Microsoft.Bot.Builder.NextDelegate,System.Threading.CancellationToken)">
            <summary>
            When implemented in middleware, processes an incoming activity.
            </summary>
            <param name="turnContext">The context object for this turn.</param>
            <param name="next">The delegate to call to continue the bot middleware pipeline.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <remarks>Middleware calls the <paramref name="next"/> delegate to pass control to
            the next middleware in the pipeline. If middleware doesn’t call the next delegate,
            the adapter does not call any of the subsequent middleware’s request handlers or the
            bot’s receive handler, and the pipeline short circuits.
            <para>The <paramref name="turnContext"/> provides information about the
            incoming activity, and other data needed to process the activity.</para>
            </remarks>
            <seealso cref="T:Microsoft.Bot.Builder.ITurnContext"/>
            <seealso cref="T:Microsoft.Bot.Schema.IActivity"/>
        </member>
        <member name="T:Microsoft.Bot.Builder.InspectionMiddleware">
            <summary>
            Middleware to enable debugging the state of a bot.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Builder.InspectionMiddleware.#ctor(Microsoft.Bot.Builder.InspectionState,Microsoft.Bot.Builder.UserState,Microsoft.Bot.Builder.ConversationState,Microsoft.Bot.Connector.Authentication.MicrosoftAppCredentials,Microsoft.Extensions.Logging.ILogger{Microsoft.Bot.Builder.InspectionMiddleware})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Builder.InspectionMiddleware"/> class.
            </summary>
            <param name="inspectionState">A state management object for inspection state.</param>
            <param name="userState">A state management object for user state.</param>
            <param name="conversationState">A state management object for conversation state.</param>
            <param name="credentials">The authentication credentials.</param>
            <param name="logger">A logger.</param>
        </member>
        <member name="M:Microsoft.Bot.Builder.InspectionMiddleware.ProcessCommandAsync(Microsoft.Bot.Builder.ITurnContext,System.Threading.CancellationToken)">
            <summary>
            Indentifies open and attach commands and calls the appropriate method.
            </summary>
            <param name="turnContext">The turn context.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>true if the command is open or attach, otherwise false.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.InspectionMiddleware.GetHttpClient">
            <summary>
            Gets the HTTP client for the current object.
            </summary>
            <returns>The HTTP client for the current object.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.InspectionMiddleware.InboundAsync(Microsoft.Bot.Builder.ITurnContext,Microsoft.Bot.Schema.Activity,System.Threading.CancellationToken)">
            <summary>
            Processes inbound activities.
            </summary>
            <param name="turnContext">The turn context.</param>
            <param name="traceActivity">The trace activity.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.InspectionMiddleware.OutboundAsync(Microsoft.Bot.Builder.ITurnContext,System.Collections.Generic.IEnumerable{Microsoft.Bot.Schema.Activity},System.Threading.CancellationToken)">
            <summary>
            Processes outbound activities.
            </summary>
            <param name="turnContext">The turn context.</param>
            <param name="traceActivities">A collection of trace activities.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.InspectionMiddleware.TraceStateAsync(Microsoft.Bot.Builder.ITurnContext,System.Threading.CancellationToken)">
            <summary>
            Processes the state management object.
            </summary>
            <param name="turnContext">The turn context.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="T:Microsoft.Bot.Builder.InspectionState">
            <summary>
            A state management object that automates the reading and writing of the associated 
            state properties to a storage layer. Used by Inspection middleware that enables
            debugging bot state.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Builder.InspectionState.#ctor(Microsoft.Bot.Builder.IStorage)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Builder.InspectionState"/> class.
            </summary>
            <param name="storage">The storage layer this state management object will use to store
            and retrieve state.</param>
        </member>
        <member name="M:Microsoft.Bot.Builder.InspectionState.GetStorageKey(Microsoft.Bot.Builder.ITurnContext)">
            <summary>
            Gets the key to use when reading and writing state to and from storage.
            </summary>
            <param name="turnContext">The context object for this turn.</param>
            <returns>The storage key.</returns>
        </member>
        <member name="T:Microsoft.Bot.Builder.InterceptionMiddleware">
            <summary>
            Middleware for the interception of activities.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Builder.InterceptionMiddleware.Logger">
            <summary>
            Gets the logger for the current object.
            </summary>
            <value>
            The logger for the current object.
            </value>
        </member>
        <member name="M:Microsoft.Bot.Builder.InterceptionMiddleware.InboundAsync(Microsoft.Bot.Builder.ITurnContext,Microsoft.Bot.Schema.Activity,System.Threading.CancellationToken)">
            <summary>
            Overriding methods implement processing of inbound activities.
            </summary>
            <param name="turnContext">The turn context.</param>
            <param name="traceActivity">The trace activity.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.InterceptionMiddleware.OutboundAsync(Microsoft.Bot.Builder.ITurnContext,System.Collections.Generic.IEnumerable{Microsoft.Bot.Schema.Activity},System.Threading.CancellationToken)">
            <summary>
            Overriding methods implement processing of outbound activities.
            </summary>
            <param name="turnContext">The turn context.</param>
            <param name="clonedActivities">A collection of activities.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.InterceptionMiddleware.TraceStateAsync(Microsoft.Bot.Builder.ITurnContext,System.Threading.CancellationToken)">
            <summary>
            Overriding methods implement processing of state management objects.
            </summary>
            <param name="turnContext">The turn context.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="T:Microsoft.Bot.Builder.Integration.BotFrameworkOptions">
            <summary>
            Contains settings used by the .NET integration APIs to initialize the <see cref="T:Microsoft.Bot.Builder.BotFrameworkAdapter"/>
            that processes the HTTP requests coming from the Bot Framework Service.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Builder.Integration.BotFrameworkOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Builder.Integration.BotFrameworkOptions"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Builder.Integration.BotFrameworkOptions.CredentialProvider">
            <summary>
            Gets or sets an <see cref="T:Microsoft.Bot.Connector.Authentication.ICredentialProvider"/> that should be used to store and retrieve the
            credentials used during authentication with the Bot Framework Service.
            </summary>
            <value>The credential provider.</value>
        </member>
        <member name="P:Microsoft.Bot.Builder.Integration.BotFrameworkOptions.AppCredentials">
            <summary>
            Gets or sets an <see cref="P:Microsoft.Bot.Builder.Integration.BotFrameworkOptions.AppCredentials"/> that should be used to store and retrieve the
            credentials used during authentication with the Bot Framework Service.
            </summary>
            <value>The credential provider.</value>
        </member>
        <member name="P:Microsoft.Bot.Builder.Integration.BotFrameworkOptions.ChannelProvider">
            <summary>
            Gets or sets an <see cref="T:Microsoft.Bot.Connector.Authentication.IChannelProvider"/> that should be used to provide configuration for
            how to validate authentication tokens received from the Bot Framework Service.
            </summary>
            <value>The credential provider.</value>
        </member>
        <member name="P:Microsoft.Bot.Builder.Integration.BotFrameworkOptions.OnTurnError">
            <summary>
            Gets or sets an error handler to use to catch exceptions in the middleware or application.
            </summary>
            <value>The error handler.</value>
        </member>
        <member name="P:Microsoft.Bot.Builder.Integration.BotFrameworkOptions.Middleware">
            <summary>
            Gets a list of the <see cref="T:Microsoft.Bot.Builder.IMiddleware"/> to use on each incoming activity.
            </summary>
            <value>The middleware list.</value>
            <seealso cref="M:Microsoft.Bot.Builder.BotAdapter.Use(Microsoft.Bot.Builder.IMiddleware)"/>
        </member>
        <member name="P:Microsoft.Bot.Builder.Integration.BotFrameworkOptions.State">
            <summary>
            OBSOLETE: This property is no longer used by the framework.
            </summary>
            <remarks>
            This property was used in a pattern to propagate <see cref="T:Microsoft.Bot.Builder.BotState"/> instances
            throughout the service configuration phase, but it was never used at runtime and is
            being retired to reduce the surface area of state APIs. As an alternative, consider
            simply using an appropriately scoped <see cref="T:Microsoft.Bot.Builder.BotState"/> variable along with closures.
            </remarks>
            <value>The list of property state providers.</value>
        </member>
        <member name="P:Microsoft.Bot.Builder.Integration.BotFrameworkOptions.ConnectorClientRetryPolicy">
            <summary>
            Gets or sets the retry policy to use in case of errors from Bot Framework Service.
            </summary>
            <value>The retry policy.</value>
        </member>
        <member name="P:Microsoft.Bot.Builder.Integration.BotFrameworkOptions.HttpClient">
            <summary>
            Gets or sets the <see cref="P:Microsoft.Bot.Builder.Integration.BotFrameworkOptions.HttpClient"/> instance that should be used to make requests to the Bot Framework Service.
            </summary>
            <value>The HTTP client.</value>
        </member>
        <member name="P:Microsoft.Bot.Builder.Integration.BotFrameworkOptions.Paths">
            <summary>
            Gets or sets what paths should be used when exposing the various bot endpoints.
            </summary>
            <value>The path strings.</value>
            <seealso cref="T:Microsoft.Bot.Builder.Integration.BotFrameworkPaths"/>
        </member>
        <member name="P:Microsoft.Bot.Builder.Integration.BotFrameworkOptions.AuthenticationConfiguration">
            <summary>
            Gets or sets the general configuration settings for authentication.
            </summary>
            <seealso cref="P:Microsoft.Bot.Builder.Integration.BotFrameworkOptions.AuthenticationConfiguration"/>
            <value>
            The general configuration settings for authentication.
            </value>
        </member>
        <member name="T:Microsoft.Bot.Builder.Integration.BotFrameworkPaths">
            <summary>
            A class that defines the bot framework default path values.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Builder.Integration.BotFrameworkPaths.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Builder.Integration.BotFrameworkPaths"/> class and
            sets BasePath and MessagePath to default values.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Builder.Integration.BotFrameworkPaths.BasePath">
            <summary>
            Gets or sets the base path at which the bot's endpoints should be exposed.
            </summary>
            <value>
            A string that represents the base URL at which the bot should be exposed.
            </value>
        </member>
        <member name="P:Microsoft.Bot.Builder.Integration.BotFrameworkPaths.MessagesPath">
            <summary>
            Gets or sets the path, relative to the <see cref="P:Microsoft.Bot.Builder.Integration.BotFrameworkPaths.BasePath"/>, at which the bot framework messages are expected to be delivered.
            </summary>
            <value>
            A string that represents the URL at which the bot framework messages are expected to be delivered.
            </value>
        </member>
        <member name="T:Microsoft.Bot.Builder.Integration.IAdapterIntegration">
            <summary>
            An interface that defines the contract between web service integration pieces and the bot adapter.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Builder.Integration.IAdapterIntegration.ProcessActivityAsync(System.String,Microsoft.Bot.Schema.Activity,Microsoft.Bot.Builder.BotCallbackHandler,System.Threading.CancellationToken)">
            <summary>
            Creates a turn context and runs the middleware pipeline for an incoming activity.
            </summary>
            <param name="authHeader">The HTTP authentication header of the request.</param>
            <param name="activity">The incoming activity.</param>
            <param name="callback">The code to run at the end of the adapter's middleware pipeline.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute. If the activity type
            was 'Invoke' and the corresponding key (channelId + activityId) was found
            then an InvokeResponse is returned, otherwise null is returned.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.Integration.IAdapterIntegration.ContinueConversationAsync(System.String,Microsoft.Bot.Schema.ConversationReference,Microsoft.Bot.Builder.BotCallbackHandler,System.Threading.CancellationToken)">
            <summary>
            Sends a proactive message to a conversation.
            </summary>
            <param name="botId">The application ID of the bot. This parameter is ignored in
            single tenant the Adapters (Console, Test, etc) but is critical to the BotFrameworkAdapter
            which is multi-tenant aware. </param>
            <param name="reference">A reference to the conversation to continue.</param>
            <param name="callback">The method to call for the resulting bot turn.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <remarks>Call this method to proactively send a message to a conversation.
            Most _channels require a user to initiate a conversation with a bot
            before the bot can send activities to the user.</remarks>
            <seealso cref="M:Microsoft.Bot.Builder.BotAdapter.ContinueConversationAsync(System.String,Microsoft.Bot.Schema.ConversationReference,Microsoft.Bot.Builder.BotCallbackHandler,System.Threading.CancellationToken)"/>
        </member>
        <member name="T:Microsoft.Bot.Builder.Integration.MessageSerializerSettings">
            <summary>
            A class containing serializer settings for Microsoft.Bot.Connector.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Builder.Integration.MessageSerializerSettings.Create">
            <summary>
            Creates a new ConnectorClient deserialization settings object.
            </summary>
            <returns>A <see cref="T:Newtonsoft.Json.JsonSerializerSettings"/> object.</returns>
        </member>
        <member name="T:Microsoft.Bot.Builder.IntentScore">
            <summary>
            Score plus any extra information about an intent.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Builder.IntentScore.Score">
            <summary>
            Gets or sets confidence in an intent.
            </summary>
            <value>
            Confidence in an intent.
            </value>
        </member>
        <member name="P:Microsoft.Bot.Builder.IntentScore.Properties">
            <summary>
            Gets or sets any extra properties to include in the results.
            </summary>
            <value>
            Any extra properties to include in the results.
            </value>
        </member>
        <member name="T:Microsoft.Bot.Builder.IPropertyManager">
            <summary>
            IPropertyManager defines implementation of a source of named properties.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Builder.IPropertyManager.CreateProperty``1(System.String)">
            <summary>
            Creates a managed state property accessor for a property.
            </summary>
            <typeparam name="T">The property value type.</typeparam>
            <param name="name">The name of the property accessor.</param>
            <returns>A state property accessor for the property.</returns>
        </member>
        <member name="T:Microsoft.Bot.Builder.IRecognizer">
            <summary>
            Interface for Recognizers.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Builder.IRecognizer.RecognizeAsync(Microsoft.Bot.Builder.ITurnContext,System.Threading.CancellationToken)">
            <summary>
            Runs an utterance through a recognizer and returns a generic recognizer result.
            </summary>
            <param name="turnContext">Turn context.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>Analysis of utterance.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.IRecognizer.RecognizeAsync``1(Microsoft.Bot.Builder.ITurnContext,System.Threading.CancellationToken)">
            <summary>
            Runs an utterance through a recognizer and returns a strongly-typed recognizer result.
            </summary>
            <typeparam name="T">The recognition result type.</typeparam>
            <param name="turnContext">Turn context.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>Analysis of utterance.</returns>
        </member>
        <member name="T:Microsoft.Bot.Builder.IRecognizerConvert">
            <summary>
            Can convert from a generic recognizer result to a strongly typed one.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Builder.IRecognizerConvert.Convert(System.Object)">
            <summary>
            Convert recognizer result.
            </summary>
            <param name="result">Result to convert.</param>
        </member>
        <member name="T:Microsoft.Bot.Builder.IStatePropertyAccessor`1">
            <summary>
            Interface which defines methods for how you can get data from a property source,
            such as <see cref="T:Microsoft.Bot.Builder.BotState"/>.
            </summary>
            <typeparam name="T">type of the property.</typeparam>
        </member>
        <member name="M:Microsoft.Bot.Builder.IStatePropertyAccessor`1.GetAsync(Microsoft.Bot.Builder.ITurnContext,System.Func{`0},System.Threading.CancellationToken)">
            <summary>
            Gets the property value from the source.
            </summary>
            <param name="turnContext">Turn Context.</param>
            <param name="defaultValueFactory">Function which defines the property value to be returned if no value has been set.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the result of the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.IStatePropertyAccessor`1.DeleteAsync(Microsoft.Bot.Builder.ITurnContext,System.Threading.CancellationToken)">
            <summary>
            Delete the property from the source.
            </summary>
            <param name="turnContext">Turn Context.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.IStatePropertyAccessor`1.SetAsync(Microsoft.Bot.Builder.ITurnContext,`0,System.Threading.CancellationToken)">
            <summary>
            Set the property value on the source.
            </summary>
            <param name="turnContext">Turn Context.</param>
            <param name="value">The value to set.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="T:Microsoft.Bot.Builder.IStatePropertyInfo">
            <summary>
            Metadata about a property, including policy info.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Builder.IStatePropertyInfo.Name">
            <summary>
            Gets the name of the property.
            </summary>
            <value>
            The name of the property.
            </value>
        </member>
        <member name="T:Microsoft.Bot.Builder.IStorage">
            <summary>
            Defines the interface for a storage layer.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Builder.IStorage.ReadAsync(System.String[],System.Threading.CancellationToken)">
            <summary>
            Reads storage items from storage.
            </summary>
            <param name="keys">keys of the <see cref="T:Microsoft.Bot.Builder.IStoreItem"/> objects to read.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <remarks>If the activities are successfully sent, the task result contains
            the items read, indexed by key.</remarks>
            <seealso cref="M:Microsoft.Bot.Builder.IStorage.DeleteAsync(System.String[],System.Threading.CancellationToken)"/>
            <seealso cref="M:Microsoft.Bot.Builder.IStorage.WriteAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)"/>
        </member>
        <member name="M:Microsoft.Bot.Builder.IStorage.WriteAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            Writes storage items to storage.
            </summary>
            <param name="changes">The items to write, indexed by key.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <seealso cref="M:Microsoft.Bot.Builder.IStorage.DeleteAsync(System.String[],System.Threading.CancellationToken)"/>
            <seealso cref="M:Microsoft.Bot.Builder.IStorage.ReadAsync(System.String[],System.Threading.CancellationToken)"/>
        </member>
        <member name="M:Microsoft.Bot.Builder.IStorage.DeleteAsync(System.String[],System.Threading.CancellationToken)">
            <summary>
            Deletes storage items from storage.
            </summary>
            <param name="keys">keys of the <see cref="T:Microsoft.Bot.Builder.IStoreItem"/> objects to delete.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <seealso cref="M:Microsoft.Bot.Builder.IStorage.ReadAsync(System.String[],System.Threading.CancellationToken)"/>
            <seealso cref="M:Microsoft.Bot.Builder.IStorage.WriteAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)"/>
        </member>
        <member name="T:Microsoft.Bot.Builder.IStoreItem">
            <summary>
            Exposes an ETag for concurrency control.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Builder.IStoreItem.ETag">
            <summary>
            Gets or sets the ETag for concurrency control.
            </summary>
            <value>The concurrency control ETag.</value>
        </member>
        <member name="T:Microsoft.Bot.Builder.StorageExtensions">
            <summary>
            Contains extension methods for <see cref="T:Microsoft.Bot.Builder.IStorage"/> objects.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Builder.StorageExtensions.ReadAsync``1(Microsoft.Bot.Builder.IStorage,System.String[],System.Threading.CancellationToken)">
            <summary>
            Gets and strongly types a collection of <see cref="T:Microsoft.Bot.Builder.IStoreItem"/> objects from state storage.
            </summary>
            <typeparam name="TStoreItem">The type of item to get from storage.</typeparam>
            <param name="storage">The state storage.</param>
            <param name="keys">The collection of keys for the objects to get from storage.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <remarks>If the task completes successfully, the result contains a dictionary of the
            strongly typed objects, indexed by the <paramref name="keys"/>.</remarks>
        </member>
        <member name="T:Microsoft.Bot.Builder.ITranscriptLogger">
            <summary>
            Transcript logger stores activities for conversations for recall.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Builder.ITranscriptLogger.LogActivityAsync(Microsoft.Bot.Schema.IActivity)">
            <summary>
            Log an activity to the transcript.
            </summary>
            <param name="activity">The activity to transcribe.</param>
            <returns>A task that represents the work queued to execute.</returns>
        </member>
        <member name="T:Microsoft.Bot.Builder.ITranscriptStore">
            <summary>
            Represents a store for recording conversations.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Builder.ITranscriptStore.GetTranscriptActivitiesAsync(System.String,System.String,System.String,System.DateTimeOffset)">
            <summary>
            Gets from the store activities that match a set of criteria.
            </summary>
            <param name="channelId">The ID of the channel the conversation is in.</param>
            <param name="conversationId">The ID of the conversation.</param>
            <param name="continuationToken">The continuation token (if available).</param>
            <param name="startDate">A cutoff date. Activities older than this date are not included.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <remarks>If the task completes successfully, the result contains the matching activities.</remarks>
        </member>
        <member name="M:Microsoft.Bot.Builder.ITranscriptStore.ListTranscriptsAsync(System.String,System.String)">
            <summary>
            Gets the conversations on a channel from the store.
            </summary>
            <param name="channelId">The ID of the channel.</param>
            <param name="continuationToken">Continuation token (if available).</param>
            <returns>A task that represents the work queued to execute.</returns>
            <remarks>List all transcripts for given ChannelID.</remarks>
        </member>
        <member name="M:Microsoft.Bot.Builder.ITranscriptStore.DeleteTranscriptAsync(System.String,System.String)">
            <summary>
            Deletes conversation data from the store.
            </summary>
            <param name="channelId">The ID of the channel the conversation is in.</param>
            <param name="conversationId">The ID of the conversation to delete.</param>
            <returns>A task that represents the work queued to execute.</returns>
        </member>
        <member name="T:Microsoft.Bot.Builder.SendActivitiesHandler">
            <summary>
            A method that can participate in send activity events for the current turn.
            </summary>
            <param name="turnContext">The context object for the turn.</param>
            <param name="activities">The activities to send.</param>
            <param name="next">The delegate to call to continue event processing.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <remarks>A handler calls the <paramref name="next"/> delegate to pass control to
            the next registered handler. If a handler doesn’t call the next delegate,
            the adapter does not call any of the subsequent handlers and does not send the
            <paramref name="activities"/>.
            <para>If the activities are successfully sent, the <paramref name="next"/> delegate returns
            an array of <see cref="T:Microsoft.Bot.Schema.ResourceResponse"/> objects containing the IDs that
            the receiving channel assigned to the activities. Use this array as the return value of this handler.</para>
            </remarks>
            <seealso cref="T:Microsoft.Bot.Builder.BotAdapter"/>
            <seealso cref="T:Microsoft.Bot.Builder.UpdateActivityHandler"/>
            <seealso cref="T:Microsoft.Bot.Builder.DeleteActivityHandler"/>
            <seealso cref="M:Microsoft.Bot.Builder.ITurnContext.OnSendActivities(Microsoft.Bot.Builder.SendActivitiesHandler)"/>
        </member>
        <member name="T:Microsoft.Bot.Builder.UpdateActivityHandler">
            <summary>
            A method that can participate in update activity events for the current turn.
            </summary>
            <param name="turnContext">The context object for the turn.</param>
            <param name="activity">The replacement activity.</param>
            <param name="next">The delegate to call to continue event processing.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <remarks>A handler calls the <paramref name="next"/> delegate to pass control to
            the next registered handler. If a handler doesn’t call the next delegate,
            the adapter does not call any of the subsequent handlers and does not update the
            activity.
            <para>The activity's <see cref="P:Microsoft.Bot.Schema.IActivity.Id"/> indicates the activity in the
            conversation to replace.</para>
            <para>If the activity is successfully sent, the <paramref name="next"/> delegate returns
            a <see cref="T:Microsoft.Bot.Schema.ResourceResponse"/> object containing the ID that the receiving
            channel assigned to the activity. Use this response object as the return value of this handler.</para>
            </remarks>
            <seealso cref="T:Microsoft.Bot.Builder.BotAdapter"/>
            <seealso cref="T:Microsoft.Bot.Builder.SendActivitiesHandler"/>
            <seealso cref="T:Microsoft.Bot.Builder.DeleteActivityHandler"/>
            <seealso cref="M:Microsoft.Bot.Builder.ITurnContext.OnUpdateActivity(Microsoft.Bot.Builder.UpdateActivityHandler)"/>
        </member>
        <member name="T:Microsoft.Bot.Builder.DeleteActivityHandler">
            <summary>
            A method that can participate in delete activity events for the current turn.
            </summary>
            <param name="turnContext">The context object for the turn.</param>
            <param name="reference">The conversation containing the activity.</param>
            <param name="next">The delegate to call to continue event processing.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <remarks>A handler calls the <paramref name="next"/> delegate to pass control to
            the next registered handler. If a handler doesn’t call the next delegate,
            the adapter does not call any of the subsequent handlers and does not delete the
            activity.
            <para>The conversation reference's <see cref="P:Microsoft.Bot.Schema.ConversationReference.ActivityId"/>
            indicates the activity in the conversation to replace.</para>
            </remarks>
            <seealso cref="T:Microsoft.Bot.Builder.BotAdapter"/>
            <seealso cref="T:Microsoft.Bot.Builder.SendActivitiesHandler"/>
            <seealso cref="T:Microsoft.Bot.Builder.UpdateActivityHandler"/>
            <seealso cref="M:Microsoft.Bot.Builder.ITurnContext.OnDeleteActivity(Microsoft.Bot.Builder.DeleteActivityHandler)"/>
        </member>
        <member name="T:Microsoft.Bot.Builder.ITurnContext`1">
            <summary>
            Provides context for a turn of a bot, where the context's <see cref="P:Microsoft.Bot.Builder.ITurnContext`1.Activity"/> property is strongly typed.
            </summary>
            <typeparam name="T">The activity type for this turn of the bot.</typeparam>
            <remarks>The <see cref="T:Microsoft.Bot.Schema.IActivity"/> interface defines properties shared by every type of activity.
            The interfaces that derive from <see cref="T:Microsoft.Bot.Schema.IActivity"/> include properties specific to a specific
            type of activity. For example, <see cref="T:Microsoft.Bot.Schema.IMessageActivity"/> includes properties associated with
            message activities, and <see cref="T:Microsoft.Bot.Schema.IEventActivity"/> includes properties associated with event activities.</remarks>
            <seealso cref="T:Microsoft.Bot.Schema.IActivity"/>
            <seealso cref="T:Microsoft.Bot.Builder.ActivityHandler"/>
            <seealso cref="T:Microsoft.Bot.Builder.ITurnContext"/>
        </member>
        <member name="P:Microsoft.Bot.Builder.ITurnContext`1.Activity">
            <summary>
            Gets the activity for this turn of the bot.
            </summary>
            <value>The activity for this turn of the bot.</value>
        </member>
        <member name="T:Microsoft.Bot.Builder.ITurnContext">
            <summary>
            Provides context for a turn of a bot.
            </summary>
            <remarks>Context provides information needed to process an incoming activity.
            The context object is created by a <see cref="T:Microsoft.Bot.Builder.BotAdapter"/> and persists for the
            length of the turn.</remarks>
            <seealso cref="T:Microsoft.Bot.Builder.IBot"/>
            <seealso cref="T:Microsoft.Bot.Builder.IMiddleware"/>
            <seealso cref="T:Microsoft.Bot.Builder.ITurnContext`1"/>
        </member>
        <member name="P:Microsoft.Bot.Builder.ITurnContext.Adapter">
            <summary>
            Gets the bot adapter that created this context object.
            </summary>
            <value>The bot adapter that created this context object.</value>
        </member>
        <member name="P:Microsoft.Bot.Builder.ITurnContext.TurnState">
            <summary>
            Gets the collection of values cached with the context object for the lifetime of the turn.
            </summary>
            <value>The collection of services registered on this context object.</value>
        </member>
        <member name="P:Microsoft.Bot.Builder.ITurnContext.Activity">
            <summary>
            Gets the activity for this turn of the bot.
            </summary>
            <value>The activity for this turn of the bot.</value>
        </member>
        <member name="P:Microsoft.Bot.Builder.ITurnContext.Responded">
            <summary>
            Gets a value indicating whether at least one response was sent for the current turn.
            </summary>
            <value><c>true</c> if at least one response was sent for the current turn; otherwise, <c>false</c>.</value>
            <seealso cref="M:Microsoft.Bot.Builder.ITurnContext.SendActivityAsync(Microsoft.Bot.Schema.IActivity,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:Microsoft.Bot.Builder.ITurnContext.SendActivityAsync(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Sends a message activity to the sender of the incoming activity.
            </summary>
            <param name="textReplyToSend">The text of the message to send.</param>
            <param name="speak">Optional, text to be spoken by your bot on a speech-enabled
            channel.</param>
            <param name="inputHint">Optional, indicates whether your bot is accepting,
            expecting, or ignoring user input after the message is delivered to the client.
            <see cref="T:Microsoft.Bot.Schema.InputHints"/> defines the possible values.
            Default is <see cref="F:Microsoft.Bot.Schema.InputHints.AcceptingInput"/>.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <remarks>If the activity is successfully sent, the task result contains
            a <see cref="T:Microsoft.Bot.Schema.ResourceResponse"/> object that contains the ID that the receiving
            channel assigned to the activity.
            <para>See the channel's documentation for limits imposed upon the contents of
            <paramref name="textReplyToSend"/>.</para>
            <para>To control various characteristics of your bot's speech such as voice,
            rate, volume, pronunciation, and pitch, specify <paramref name="speak"/> in
            Speech Synthesis Markup Language (SSML) format.</para>
            </remarks>
            <seealso cref="M:Microsoft.Bot.Builder.ITurnContext.OnSendActivities(Microsoft.Bot.Builder.SendActivitiesHandler)"/>
            <seealso cref="M:Microsoft.Bot.Builder.ITurnContext.SendActivityAsync(Microsoft.Bot.Schema.IActivity,System.Threading.CancellationToken)"/>
            <seealso cref="M:Microsoft.Bot.Builder.ITurnContext.SendActivitiesAsync(Microsoft.Bot.Schema.IActivity[],System.Threading.CancellationToken)"/>
            <seealso cref="M:Microsoft.Bot.Builder.ITurnContext.UpdateActivityAsync(Microsoft.Bot.Schema.IActivity,System.Threading.CancellationToken)"/>
            <seealso cref="M:Microsoft.Bot.Builder.ITurnContext.DeleteActivityAsync(Microsoft.Bot.Schema.ConversationReference,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:Microsoft.Bot.Builder.ITurnContext.SendActivityAsync(Microsoft.Bot.Schema.IActivity,System.Threading.CancellationToken)">
            <summary>
            Sends an activity to the sender of the incoming activity.
            </summary>
            <param name="activity">The activity to send.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <remarks>If the activity is successfully sent, the task result contains
            a <see cref="T:Microsoft.Bot.Schema.ResourceResponse"/> object containing the ID that the receiving
            channel assigned to the activity.</remarks>
            <seealso cref="M:Microsoft.Bot.Builder.ITurnContext.OnSendActivities(Microsoft.Bot.Builder.SendActivitiesHandler)"/>
            <seealso cref="M:Microsoft.Bot.Builder.ITurnContext.SendActivityAsync(System.String,System.String,System.String,System.Threading.CancellationToken)"/>
            <seealso cref="M:Microsoft.Bot.Builder.ITurnContext.SendActivitiesAsync(Microsoft.Bot.Schema.IActivity[],System.Threading.CancellationToken)"/>
            <seealso cref="M:Microsoft.Bot.Builder.ITurnContext.UpdateActivityAsync(Microsoft.Bot.Schema.IActivity,System.Threading.CancellationToken)"/>
            <seealso cref="M:Microsoft.Bot.Builder.ITurnContext.DeleteActivityAsync(Microsoft.Bot.Schema.ConversationReference,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:Microsoft.Bot.Builder.ITurnContext.SendActivitiesAsync(Microsoft.Bot.Schema.IActivity[],System.Threading.CancellationToken)">
            <summary>
            Sends a set of activities to the sender of the incoming activity.
            </summary>
            <param name="activities">The activities to send.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <remarks>If the activities are successfully sent, the task result contains
            an array of <see cref="T:Microsoft.Bot.Schema.ResourceResponse"/> objects containing the IDs that
            the receiving channel assigned to the activities.</remarks>
            <seealso cref="M:Microsoft.Bot.Builder.ITurnContext.OnSendActivities(Microsoft.Bot.Builder.SendActivitiesHandler)"/>
            <seealso cref="M:Microsoft.Bot.Builder.ITurnContext.SendActivityAsync(System.String,System.String,System.String,System.Threading.CancellationToken)"/>
            <seealso cref="M:Microsoft.Bot.Builder.ITurnContext.SendActivityAsync(Microsoft.Bot.Schema.IActivity,System.Threading.CancellationToken)"/>
            <seealso cref="M:Microsoft.Bot.Builder.ITurnContext.UpdateActivityAsync(Microsoft.Bot.Schema.IActivity,System.Threading.CancellationToken)"/>
            <seealso cref="M:Microsoft.Bot.Builder.ITurnContext.DeleteActivityAsync(Microsoft.Bot.Schema.ConversationReference,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:Microsoft.Bot.Builder.ITurnContext.UpdateActivityAsync(Microsoft.Bot.Schema.IActivity,System.Threading.CancellationToken)">
            <summary>
            Replaces an existing activity.
            </summary>
            <param name="activity">New replacement activity.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <remarks>If the activity is successfully sent, the task result contains
            a <see cref="T:Microsoft.Bot.Schema.ResourceResponse"/> object containing the ID that the receiving
            channel assigned to the activity.
            <para>Before calling this, set the ID of the replacement activity to the ID
            of the activity to replace.</para>
            <para>Not all channels support this operation. For channels that don't, this call may throw an exception.</para></remarks>
            <seealso cref="M:Microsoft.Bot.Builder.ITurnContext.OnUpdateActivity(Microsoft.Bot.Builder.UpdateActivityHandler)"/>
            <seealso cref="M:Microsoft.Bot.Builder.ITurnContext.SendActivitiesAsync(Microsoft.Bot.Schema.IActivity[],System.Threading.CancellationToken)"/>
            <seealso cref="M:Microsoft.Bot.Builder.ITurnContext.DeleteActivityAsync(Microsoft.Bot.Schema.ConversationReference,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:Microsoft.Bot.Builder.ITurnContext.DeleteActivityAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Deletes an existing activity.
            </summary>
            <param name="activityId">The ID of the activity to delete.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <para>Not all channels support this operation. For channels that don\'t, this call may throw an exception.</para>
            <seealso cref="M:Microsoft.Bot.Builder.ITurnContext.OnDeleteActivity(Microsoft.Bot.Builder.DeleteActivityHandler)"/>
            <seealso cref="M:Microsoft.Bot.Builder.ITurnContext.DeleteActivityAsync(Microsoft.Bot.Schema.ConversationReference,System.Threading.CancellationToken)"/>
            <seealso cref="M:Microsoft.Bot.Builder.ITurnContext.SendActivitiesAsync(Microsoft.Bot.Schema.IActivity[],System.Threading.CancellationToken)"/>
            <seealso cref="M:Microsoft.Bot.Builder.ITurnContext.UpdateActivityAsync(Microsoft.Bot.Schema.IActivity,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:Microsoft.Bot.Builder.ITurnContext.DeleteActivityAsync(Microsoft.Bot.Schema.ConversationReference,System.Threading.CancellationToken)">
            <summary>
            Deletes an existing activity.
            </summary>
            <param name="conversationReference">The conversation containing the activity to delete.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <remarks>The conversation reference's <see cref="P:Microsoft.Bot.Schema.ConversationReference.ActivityId"/>
            indicates the activity in the conversation to delete.
            <para>Not all channels support this operation. For channels that don't, this call may throw an exception.</para></remarks>
            <seealso cref="M:Microsoft.Bot.Builder.ITurnContext.OnDeleteActivity(Microsoft.Bot.Builder.DeleteActivityHandler)"/>
            <seealso cref="M:Microsoft.Bot.Builder.ITurnContext.DeleteActivityAsync(System.String,System.Threading.CancellationToken)"/>
            <seealso cref="M:Microsoft.Bot.Builder.ITurnContext.SendActivitiesAsync(Microsoft.Bot.Schema.IActivity[],System.Threading.CancellationToken)"/>
            <seealso cref="M:Microsoft.Bot.Builder.ITurnContext.UpdateActivityAsync(Microsoft.Bot.Schema.IActivity,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:Microsoft.Bot.Builder.ITurnContext.OnSendActivities(Microsoft.Bot.Builder.SendActivitiesHandler)">
            <summary>
            Adds a response handler for send activity operations.
            </summary>
            <param name="handler">The handler to add to the context object.</param>
            <returns>The updated context object.</returns>
            <remarks>When the context's <see cref="M:Microsoft.Bot.Builder.ITurnContext.SendActivityAsync(Microsoft.Bot.Schema.IActivity,System.Threading.CancellationToken)"/>
            or <see cref="M:Microsoft.Bot.Builder.ITurnContext.SendActivitiesAsync(Microsoft.Bot.Schema.IActivity[],System.Threading.CancellationToken)"/> method is called,
            the adapter calls the registered handlers in the order in which they were
            added to the context object.
            </remarks>
            <seealso cref="M:Microsoft.Bot.Builder.ITurnContext.SendActivityAsync(System.String,System.String,System.String,System.Threading.CancellationToken)"/>
            <seealso cref="M:Microsoft.Bot.Builder.ITurnContext.SendActivityAsync(Microsoft.Bot.Schema.IActivity,System.Threading.CancellationToken)"/>
            <seealso cref="M:Microsoft.Bot.Builder.ITurnContext.SendActivitiesAsync(Microsoft.Bot.Schema.IActivity[],System.Threading.CancellationToken)"/>
            <seealso cref="T:Microsoft.Bot.Builder.SendActivitiesHandler"/>
            <seealso cref="M:Microsoft.Bot.Builder.ITurnContext.OnUpdateActivity(Microsoft.Bot.Builder.UpdateActivityHandler)"/>
            <seealso cref="M:Microsoft.Bot.Builder.ITurnContext.OnDeleteActivity(Microsoft.Bot.Builder.DeleteActivityHandler)"/>
        </member>
        <member name="M:Microsoft.Bot.Builder.ITurnContext.OnUpdateActivity(Microsoft.Bot.Builder.UpdateActivityHandler)">
            <summary>
            Adds a response handler for update activity operations.
            </summary>
            <param name="handler">The handler to add to the context object.</param>
            <returns>The updated context object.</returns>
            <remarks>When the context's <see cref="M:Microsoft.Bot.Builder.ITurnContext.UpdateActivityAsync(Microsoft.Bot.Schema.IActivity,System.Threading.CancellationToken)"/> is called,
            the adapter calls the registered handlers in the order in which they were
            added to the context object.
            </remarks>
            <seealso cref="M:Microsoft.Bot.Builder.ITurnContext.UpdateActivityAsync(Microsoft.Bot.Schema.IActivity,System.Threading.CancellationToken)"/>
            <seealso cref="T:Microsoft.Bot.Builder.UpdateActivityHandler"/>
            <seealso cref="M:Microsoft.Bot.Builder.ITurnContext.OnSendActivities(Microsoft.Bot.Builder.SendActivitiesHandler)"/>
            <seealso cref="M:Microsoft.Bot.Builder.ITurnContext.OnDeleteActivity(Microsoft.Bot.Builder.DeleteActivityHandler)"/>
        </member>
        <member name="M:Microsoft.Bot.Builder.ITurnContext.OnDeleteActivity(Microsoft.Bot.Builder.DeleteActivityHandler)">
            <summary>
            Adds a response handler for delete activity operations.
            </summary>
            <param name="handler">The handler to add to the context object.</param>
            <returns>The updated context object.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="handler"/> is <c>null</c>.</exception>
            <remarks>When the context's <see cref="M:Microsoft.Bot.Builder.ITurnContext.DeleteActivityAsync(System.String,System.Threading.CancellationToken)"/> is called,
            the adapter calls the registered handlers in the order in which they were
            added to the context object.
            </remarks>
            <seealso cref="M:Microsoft.Bot.Builder.ITurnContext.DeleteActivityAsync(Microsoft.Bot.Schema.ConversationReference,System.Threading.CancellationToken)"/>
            <seealso cref="M:Microsoft.Bot.Builder.ITurnContext.DeleteActivityAsync(System.String,System.Threading.CancellationToken)"/>
            <seealso cref="T:Microsoft.Bot.Builder.DeleteActivityHandler"/>
            <seealso cref="M:Microsoft.Bot.Builder.ITurnContext.OnSendActivities(Microsoft.Bot.Builder.SendActivitiesHandler)"/>
            <seealso cref="M:Microsoft.Bot.Builder.ITurnContext.OnUpdateActivity(Microsoft.Bot.Builder.UpdateActivityHandler)"/>
        </member>
        <member name="T:Microsoft.Bot.Builder.TraceExtensions.ITurnContextExtensions">
            <summary>
            Contains methods for working with <see cref="T:Microsoft.Bot.Builder.ITurnContext"/> objects.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Builder.TraceExtensions.ITurnContextExtensions.TraceActivityAsync(Microsoft.Bot.Builder.ITurnContext,System.String,System.Object,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Sends a trace activity to the <see cref="T:Microsoft.Bot.Builder.BotAdapter"/> for logging purposes.
            </summary>
            <param name="turnContext">The context for the current turn.</param>
            <param name="name">The value to assign to the activity's <see cref="P:Microsoft.Bot.Schema.Activity.Name"/> property.</param>
            <param name="value">The value to assign to the activity's <see cref="P:Microsoft.Bot.Schema.Activity.Value"/> property.</param>
            <param name="valueType">The value to assign to the activity's <see cref="P:Microsoft.Bot.Schema.Activity.ValueType"/> property.</param>
            <param name="label">The value to assign to the activity's <see cref="P:Microsoft.Bot.Schema.Activity.Label"/> property.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <remarks>If the adapter is being hosted in the Emulator, the task result contains
            a <see cref="T:Microsoft.Bot.Schema.ResourceResponse"/> object with the original trace activity's ID; otherwise,
            it contains a <see cref="T:Microsoft.Bot.Schema.ResourceResponse"/> object containing the ID that the receiving
            channel assigned to the activity.</remarks>
        </member>
        <member name="T:Microsoft.Bot.Builder.MemoryStorage">
            <summary>
            A storage layer that uses an in-memory dictionary.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Builder.MemoryStorage.#ctor(Newtonsoft.Json.JsonSerializer,System.Collections.Generic.Dictionary{System.String,Newtonsoft.Json.Linq.JObject})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Builder.MemoryStorage"/> class.
            </summary>
            <param name="jsonSerializer">If passing in a custom JsonSerializer, we recommend the following settings:
            <para>jsonSerializer.TypeNameHandling = TypeNameHandling.All.</para>
            <para>jsonSerializer.NullValueHandling = NullValueHandling.Include.</para>
            <para>jsonSerializer.ContractResolver = new DefaultContractResolver().</para>
            </param>
            <param name="dictionary">A pre-existing dictionary to use; or null to use a new one.</param>
        </member>
        <member name="M:Microsoft.Bot.Builder.MemoryStorage.#ctor(System.Collections.Generic.Dictionary{System.String,Newtonsoft.Json.Linq.JObject})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Builder.MemoryStorage"/> class.
            </summary>
            <param name="dictionary">A pre-existing dictionary to use; or null to use a new one.</param>
        </member>
        <member name="M:Microsoft.Bot.Builder.MemoryStorage.DeleteAsync(System.String[],System.Threading.CancellationToken)">
            <summary>
            Deletes storage items from storage.
            </summary>
            <param name="keys">keys of the <see cref="T:Microsoft.Bot.Builder.IStoreItem"/> objects to delete.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <seealso cref="M:Microsoft.Bot.Builder.MemoryStorage.ReadAsync(System.String[],System.Threading.CancellationToken)"/>
            <seealso cref="M:Microsoft.Bot.Builder.MemoryStorage.WriteAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)"/>
        </member>
        <member name="M:Microsoft.Bot.Builder.MemoryStorage.ReadAsync(System.String[],System.Threading.CancellationToken)">
            <summary>
            Reads storage items from storage.
            </summary>
            <param name="keys">keys of the <see cref="T:Microsoft.Bot.Builder.IStoreItem"/> objects to read.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <remarks>If the activities are successfully sent, the task result contains
            the items read, indexed by key.</remarks>
            <seealso cref="M:Microsoft.Bot.Builder.MemoryStorage.DeleteAsync(System.String[],System.Threading.CancellationToken)"/>
            <seealso cref="M:Microsoft.Bot.Builder.MemoryStorage.WriteAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)"/>
        </member>
        <member name="M:Microsoft.Bot.Builder.MemoryStorage.WriteAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            Writes storage items to storage.
            </summary>
            <param name="changes">The items to write, indexed by key.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <seealso cref="M:Microsoft.Bot.Builder.MemoryStorage.DeleteAsync(System.String[],System.Threading.CancellationToken)"/>
            <seealso cref="M:Microsoft.Bot.Builder.MemoryStorage.ReadAsync(System.String[],System.Threading.CancellationToken)"/>
        </member>
        <member name="T:Microsoft.Bot.Builder.MemoryTranscriptStore">
            <summary>
            The memory transcript store stores transcripts in volatile memory in a Dictionary.
            </summary>
            <remarks>
            Because this uses an unbounded volatile dictionary this should only be used for unit tests or non-production environments.
            </remarks>
        </member>
        <member name="M:Microsoft.Bot.Builder.MemoryTranscriptStore.LogActivityAsync(Microsoft.Bot.Schema.IActivity)">
            <summary>
            Logs an activity to the transcript.
            </summary>
            <param name="activity">The activity to log.</param>
            <returns>A task that represents the work queued to execute.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.MemoryTranscriptStore.GetTranscriptActivitiesAsync(System.String,System.String,System.String,System.DateTimeOffset)">
            <summary>
            Gets from the store activities that match a set of criteria.
            </summary>
            <param name="channelId">The ID of the channel the conversation is in.</param>
            <param name="conversationId">The ID of the conversation.</param>
            <param name="continuationToken">The continuation token from the previous page of results.</param>
            <param name="startDate">A cutoff date. Activities older than this date are not included.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <remarks>If the task completes successfully, the result contains a page of matching activities.</remarks>
        </member>
        <member name="M:Microsoft.Bot.Builder.MemoryTranscriptStore.DeleteTranscriptAsync(System.String,System.String)">
            <summary>
            Deletes conversation data from the store.
            </summary>
            <param name="channelId">The ID of the channel the conversation is in.</param>
            <param name="conversationId">The ID of the conversation to delete.</param>
            <returns>A task that represents the work queued to execute.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.MemoryTranscriptStore.ListTranscriptsAsync(System.String,System.String)">
            <summary>
            Gets a page of conversations for a channel from the store.
            </summary>
            <param name="channelId">The ID of the channel.</param>
            <param name="continuationToken">The continuation token from the previous page of results.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <remarks>If the task is successful, the result contains a page of conversations.</remarks>
        </member>
        <member name="T:Microsoft.Bot.Builder.MessageFactory">
            <summary>
            Contains utility methods for various message types a bot can return.
            </summary>
            <example>
            <code>
            // Create and send a message.
            var message = MessageFactory.Text("Hello World");
            await context.SendActivity(message);
            </code>
            </example>
            <remarks>The following apply to message actions in general.
            <para>See the channel's documentation for limits imposed upon the contents of
            the text of the message to send.</para>
            <para>To control various characteristics of your bot's speech such as voice,
            rate, volume, pronunciation, and pitch, specify test to speak in
            Speech Synthesis Markup Language (SSML) format.</para>
            <para>
            Channels decide how each card action manifests in their user experience.
            In most cases, the cards are clickable. In others, they may be selected by speech
            input. In cases where the channel does not offer an interactive activation
            experience (e.g., when interacting over SMS), the channel may not support
            activation whatsoever. The decision about how to render actions is controlled by
            normative requirements elsewhere in this document (e.g. within the card format,
            or within the suggested actions definition).</para>
            </remarks>
        </member>
        <member name="M:Microsoft.Bot.Builder.MessageFactory.Text(System.String,System.String,System.String)">
            <summary>
            Returns a simple text message.
            </summary>
            <example>
            <code>
            // Create and send a message.
            var message = MessageFactory.Text("Hello World");
            await context.SendActivity(message);
            </code>
            </example>
            <param name="text">The text of the message to send.</param>
            <param name="ssml">Optional, text to be spoken by your bot on a speech-enabled
            channel.</param>
            <param name="inputHint">Optional, indicates whether your bot is accepting,
            expecting, or ignoring user input after the message is delivered to the client.
            One of: "acceptingInput", "ignoringInput", or "expectingInput".
            Default is "acceptingInput".</param>
            <returns>A message activity containing the text.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.MessageFactory.SuggestedActions(System.Collections.Generic.IEnumerable{System.String},System.String,System.String,System.String)">
             <summary>
             Returns a message that includes a set of suggested actions and optional text.
             </summary>
             <example>
             <code>
             // Create the activity and add suggested actions.
             var activity = MessageFactory.SuggestedActions(
                 new string[] { "red", "green", "blue" },
                 text: "Choose a color");
            
             // Send the activity as a reply to the user.
             await context.SendActivity(activity);
             </code>
             </example>
             <param name="actions">
             The text of the actions to create.
             </param>
             <param name="text">The text of the message to send.</param>
             <param name="ssml">Optional, text to be spoken by your bot on a speech-enabled
             channel.</param>
             <param name="inputHint">Optional, indicates whether your bot is accepting,
             expecting, or ignoring user input after the message is delivered to the client.
             One of: "acceptingInput", "ignoringInput", or "expectingInput".
             Default is "acceptingInput".</param>
             <returns>A message activity containing the suggested actions.</returns>
             <exception cref="T:System.ArgumentNullException">
             <paramref name="actions"/> is <c>null</c>.</exception>
             <remarks>This method creates a suggested action for each string in <paramref name="actions"/>.
             The created action uses the text for the <see cref="P:Microsoft.Bot.Schema.CardAction.Value"/> and
             <see cref="P:Microsoft.Bot.Schema.CardAction.Title"/> and sets the <see cref="P:Microsoft.Bot.Schema.CardAction.Type"/> to
             <see cref="F:Microsoft.Bot.Schema.ActionTypes.ImBack"/>.
             </remarks>
             <seealso cref="M:Microsoft.Bot.Builder.MessageFactory.SuggestedActions(System.Collections.Generic.IEnumerable{Microsoft.Bot.Schema.CardAction},System.String,System.String,System.String)"/>
        </member>
        <member name="M:Microsoft.Bot.Builder.MessageFactory.SuggestedActions(System.Collections.Generic.IEnumerable{Microsoft.Bot.Schema.CardAction},System.String,System.String,System.String)">
             <summary>
             Returns a message that includes a set of suggested actions and optional text.
             </summary>
             <example>
             <code>
             // Create the activity and add suggested actions.
             var activity = MessageFactory.SuggestedActions(
                 new CardAction[]
                 {
                     new CardAction(title: "red", type: ActionTypes.ImBack, value: "red"),
                     new CardAction( title: "green", type: ActionTypes.ImBack, value: "green"),
                     new CardAction(title: "blue", type: ActionTypes.ImBack, value: "blue")
                 }, text: "Choose a color");
            
             // Send the activity as a reply to the user.
             await context.SendActivity(activity);
             </code>
             </example>
             <param name="cardActions">
             The card actions to include.
             </param>
             <param name="text">Optional, the text of the message to send.</param>
             <param name="ssml">Optional, text to be spoken by your bot on a speech-enabled
             channel.</param>
             <param name="inputHint">Optional, indicates whether your bot is accepting,
             expecting, or ignoring user input after the message is delivered to the client.
             One of: "acceptingInput", "ignoringInput", or "expectingInput".
             Default is "acceptingInput".</param>
             <returns>A message activity that contains the suggested actions.</returns>
             <exception cref="T:System.ArgumentNullException">
             <paramref name="cardActions"/> is <c>null</c>.</exception>
             <seealso cref="M:Microsoft.Bot.Builder.MessageFactory.SuggestedActions(System.Collections.Generic.IEnumerable{System.String},System.String,System.String,System.String)"/>
        </member>
        <member name="M:Microsoft.Bot.Builder.MessageFactory.Attachment(Microsoft.Bot.Schema.Attachment,System.String,System.String,System.String)">
            <summary>
            Returns a message activity that contains an attachment.
            </summary>
            <param name="attachment">Attachment to include in the message.</param>
            <param name="text">Optional, the text of the message to send.</param>
            <param name="ssml">Optional, text to be spoken by your bot on a speech-enabled
            channel.</param>
            <param name="inputHint">Optional, indicates whether your bot is accepting,
            expecting, or ignoring user input after the message is delivered to the client.
            One of: "acceptingInput", "ignoringInput", or "expectingInput".
            Default is "acceptingInput".</param>
            <returns>A message activity containing the attachment.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="attachment"/> is <c>null</c>.</exception>
            <seealso cref="M:Microsoft.Bot.Builder.MessageFactory.Attachment(System.Collections.Generic.IEnumerable{Microsoft.Bot.Schema.Attachment},System.String,System.String,System.String)"/>
            <seealso cref="M:Microsoft.Bot.Builder.MessageFactory.Carousel(System.Collections.Generic.IEnumerable{Microsoft.Bot.Schema.Attachment},System.String,System.String,System.String)"/>
        </member>
        <member name="M:Microsoft.Bot.Builder.MessageFactory.Attachment(System.Collections.Generic.IEnumerable{Microsoft.Bot.Schema.Attachment},System.String,System.String,System.String)">
            <summary>
            Returns a message activity that contains a collection of attachments, in a list.
            </summary>
            <param name="attachments">The attachments to include in the message.</param>
            <param name="text">Optional, the text of the message to send.</param>
            <param name="ssml">Optional, text to be spoken by your bot on a speech-enabled
            channel.</param>
            <param name="inputHint">Optional, indicates whether your bot is accepting,
            expecting, or ignoring user input after the message is delivered to the client.
            One of: "acceptingInput", "ignoringInput", or "expectingInput".
            Default is "acceptingInput".</param>
            <returns>A message activity containing the attachment.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="attachments"/> is <c>null</c>.</exception>
            <seealso cref="M:Microsoft.Bot.Builder.MessageFactory.Carousel(System.Collections.Generic.IEnumerable{Microsoft.Bot.Schema.Attachment},System.String,System.String,System.String)"/>
            <seealso cref="M:Microsoft.Bot.Builder.MessageFactory.Attachment(Microsoft.Bot.Schema.Attachment,System.String,System.String,System.String)"/>
        </member>
        <member name="M:Microsoft.Bot.Builder.MessageFactory.Carousel(System.Collections.Generic.IEnumerable{Microsoft.Bot.Schema.Attachment},System.String,System.String,System.String)">
             <summary>
             Returns a message activity that contains a collection of attachments, as a carousel.
             </summary>
             <param name="attachments">The attachments to include in the message.</param>
             <param name="text">Optional, the text of the message to send.</param>
             <param name="ssml">Optional, text to be spoken by your bot on a speech-enabled
             channel.</param>
             <param name="inputHint">Optional, indicates whether your bot is accepting,
             expecting, or ignoring user input after the message is delivered to the client.
             One of: "acceptingInput", "ignoringInput", or "expectingInput".
             Default is "acceptingInput".</param>
             <returns>A message activity containing the attachment.</returns>
             <exception cref="T:System.ArgumentNullException">
             <paramref name="attachments"/> is <c>null</c>.</exception>
             <example>This code creates and sends a carousel of HeroCards.
             <code>
             // Create the activity and attach a set of Hero cards.
             var activity = MessageFactory.Carousel(
             new Attachment[]
             {
                 new HeroCard(
                     title: "title1",
                     images: new CardImage[] { new CardImage(url: "imageUrl1.png") },
                     buttons: new CardAction[]
                     {
                         new CardAction(title: "button1", type: ActionTypes.ImBack, value: "item1")
                     })
                 .ToAttachment(),
                 new HeroCard(
                     title: "title2",
                     images: new CardImage[] { new CardImage(url: "imageUrl2.png") },
                     buttons: new CardAction[]
                     {
                         new CardAction(title: "button2", type: ActionTypes.ImBack, value: "item2")
                     })
                 .ToAttachment(),
                 new HeroCard(
                     title: "title3",
                     images: new CardImage[] { new CardImage(url: "imageUrl3.png") },
                     buttons: new CardAction[]
                     {
                         new CardAction(title: "button3", type: ActionTypes.ImBack, value: "item3")
                     })
                 .ToAttachment()
             });
            
             // Send the activity as a reply to the user.
             await context.SendActivity(activity);
             </code>
             </example>
             <seealso cref="M:Microsoft.Bot.Builder.MessageFactory.Attachment(System.Collections.Generic.IEnumerable{Microsoft.Bot.Schema.Attachment},System.String,System.String,System.String)"/>
        </member>
        <member name="M:Microsoft.Bot.Builder.MessageFactory.ContentUrl(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Returns a message activity that contains a single image or video.
            </summary>
            <param name="url">The URL of the image or video to send.</param>
            <param name="contentType">The MIME type of the image or video.</param>
            <param name="name">Optional, the name of the image or video file.</param>
            <param name="text">Optional, the text of the message to send.</param>
            <param name="ssml">Optional, text to be spoken by your bot on a speech-enabled
            channel.</param>
            <param name="inputHint">Optional, indicates whether your bot is accepting,
            expecting, or ignoring user input after the message is delivered to the client.
            One of: "acceptingInput", "ignoringInput", or "expectingInput".
            Default is null.</param>
            <returns>A message activity containing the attachment.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="url"/> or <paramref name="contentType"/> is <c>null</c>,
            empty, or white space.</exception>
            <example>This code creates a message activity that contains an image.
            <code>
            IMessageActivity message =
                MessageFactory.ContentUrl("https://{domainName}/cat.jpg", MediaTypeNames.Image.Jpeg, "Cat Picture");
            </code>
            </example>
        </member>
        <member name="T:Microsoft.Bot.Builder.MiddlewareSet">
            <summary>
            Contains an ordered set of <see cref="T:Microsoft.Bot.Builder.IMiddleware"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Builder.MiddlewareSet.Use(Microsoft.Bot.Builder.IMiddleware)">
            <summary>
            Adds a middleware object to the end of the set.
            </summary>
            <param name="middleware">The middleware to add.</param>
            <returns>The updated middleware set.</returns>
            <see cref="M:Microsoft.Bot.Builder.BotAdapter.Use(Microsoft.Bot.Builder.IMiddleware)"/>
        </member>
        <member name="M:Microsoft.Bot.Builder.MiddlewareSet.OnTurnAsync(Microsoft.Bot.Builder.ITurnContext,Microsoft.Bot.Builder.NextDelegate,System.Threading.CancellationToken)">
            <summary>
            Processes an incoming activity.
            </summary>
            <param name="turnContext">The context object for this turn.</param>
            <param name="next">The delegate to call to continue the bot middleware pipeline.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.MiddlewareSet.ReceiveActivityWithStatusAsync(Microsoft.Bot.Builder.ITurnContext,Microsoft.Bot.Builder.BotCallbackHandler,System.Threading.CancellationToken)">
            <summary>
            Processes an activity.
            </summary>
            <param name="turnContext">The context object for the turn.</param>
            <param name="callback">The delegate to call when the set finishes processing the activity.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.MiddlewareSet.GetEnumerator">
            <summary>
            Gets an enumerator that iterates over a collection of implementations of <see cref="T:Microsoft.Bot.Builder.IMiddleware"/> objects.
            </summary>
            <returns>An enumerator that can be used to iterate over the collection.</returns>
        </member>
        <member name="T:Microsoft.Bot.Builder.NormalizeMentionsMiddleware">
            <summary>
             Middleware to normalize mention Entities from channels that apply &lt;at&gt; markup tags since they don't conform to expected values.
             Bots that interact with Skype and/or teams should use this middleware if mentions are used.
            </summary>
            <description>
             This will 
             * remove mentions if they mention the recipient (aka the bot) as that text can cause confusion with intent processing.
             * remove extra &lt;at&gt; markup tags on mentions and in the activity.text.
            </description>
        </member>
        <member name="M:Microsoft.Bot.Builder.NormalizeMentionsMiddleware.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Builder.NormalizeMentionsMiddleware"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Builder.NormalizeMentionsMiddleware.RemoveRecipientMention">
            <summary>
            Gets or sets a value indicating whether the any recipient mentions should be removed.
            </summary>
            <value>If true, @mentions of the recipient will be completely stripped from the .text and .entities.</value>
        </member>
        <member name="M:Microsoft.Bot.Builder.NormalizeMentionsMiddleware.OnTurnAsync(Microsoft.Bot.Builder.ITurnContext,Microsoft.Bot.Builder.NextDelegate,System.Threading.CancellationToken)">
            <summary>
            Middleware implementation which corrects Enity.Mention.Text to a value RemoveMentionText can work with.
            </summary>
            <param name="turnContext">turn context.</param>
            <param name="next">next middleware.</param>
            <param name="cancellationToken">cancellationToken.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.NormalizeMentionsMiddleware.NormalizeActivity(Microsoft.Bot.Schema.Activity)">
            <summary>
            Normalize the activity.
            </summary>
            <param name="activity">activity.</param>
        </member>
        <member name="T:Microsoft.Bot.Builder.NullBotTelemetryClient">
            <summary>
            A null bot telemtry client that implements <see cref="T:Microsoft.Bot.Builder.IBotTelemetryClient"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Builder.NullBotTelemetryClient.Instance">
            <summary>
            Gets a new instance of NullBotTelemetryClient.
            </summary>
            <value>
            A new instance of NullBotTelemetryClient.
            </value>
        </member>
        <member name="M:Microsoft.Bot.Builder.NullBotTelemetryClient.Flush">
            <summary>
            Flushes the in-memory buffer and any metrics being pre-aggregated.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Builder.NullBotTelemetryClient.TrackAvailability(System.String,System.DateTimeOffset,System.TimeSpan,System.String,System.Boolean,System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.IDictionary{System.String,System.Double})">
            <summary>
            Send information about availability of an application.
            </summary>
            <param name="name">Availability test name.</param>
            <param name="timeStamp">The time when the availability was captured.</param>
            <param name="duration">The time taken for the availability test to run.</param>
            <param name="runLocation">Name of the location the availability test was run from.</param>
            <param name="success">True if the availability test ran successfully.</param>
            <param name="message">Error message on availability test run failure.</param>
            <param name="properties">Named string values you can use to classify and search for this availability telemetry.</param>
            <param name="metrics">Additional values associated with this availability telemetry.</param>
        </member>
        <member name="M:Microsoft.Bot.Builder.NullBotTelemetryClient.TrackDependency(System.String,System.String,System.String,System.String,System.DateTimeOffset,System.TimeSpan,System.String,System.Boolean)">
            <summary>
            Send information about an external dependency (outgoing call) in the application.
            </summary>
            <param name="dependencyTypeName">Name of the command initiated with this dependency call. Low cardinality value.
            Examples are SQL, Azure table, and HTTP.</param>
            <param name="target">External dependency target.</param>
            <param name="dependencyName">Name of the command initiated with this dependency call. Low cardinality value.
            Examples are stored procedure name and URL path template.</param>
            <param name="data">Command initiated by this dependency call. Examples are SQL statement and HTTP
            URL's with all query parameters.</param>
            <param name="startTime">The time when the dependency was called.</param>
            <param name="duration">The time taken by the external dependency to handle the call.</param>
            <param name="resultCode">Result code of dependency call execution.</param>
            <param name="success">True if the dependency call was handled successfully.</param>
        </member>
        <member name="M:Microsoft.Bot.Builder.NullBotTelemetryClient.TrackEvent(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.IDictionary{System.String,System.Double})">
            <summary>
            Logs custom events with extensible named fields.
            </summary>
            <param name="eventName">A name for the event.</param>
            <param name="properties">Named string values you can use to search and classify events.</param>
            <param name="metrics">Measurements associated with this event.</param>
        </member>
        <member name="M:Microsoft.Bot.Builder.NullBotTelemetryClient.TrackException(System.Exception,System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.IDictionary{System.String,System.Double})">
            <summary>
            Logs a system exception.
            </summary>
            <param name="exception">The exception to log.</param>
            <param name="properties">Named string values you can use to classify and search for this exception.</param>
            <param name="metrics">Additional values associated with this exception.</param>
        </member>
        <member name="M:Microsoft.Bot.Builder.NullBotTelemetryClient.TrackTrace(System.String,Microsoft.Bot.Builder.Severity,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Send a trace message.
            </summary>
            <param name="message">Message to display.</param>
            <param name="severityLevel">Trace severity level <see cref="T:Microsoft.Bot.Builder.Severity"/>.</param>
            <param name="properties">Named string values you can use to search and classify events.</param>
        </member>
        <member name="M:Microsoft.Bot.Builder.NullBotTelemetryClient.TrackPageView(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.IDictionary{System.String,System.Double})">
            <summary>
            Logs an Application Insights page view.
            </summary>
            <param name="dialogName">The name of the dialog to log the entry / start for.</param>
            <param name="properties">Named string values you can use to search and classify events.</param>
            <param name="metrics">Measurements associated with this event.</param>
        </member>
        <member name="T:Microsoft.Bot.Builder.OAuth.IConnectorClientBuilder">
            <summary>
            Abstraction to build connector clients.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Builder.OAuth.IConnectorClientBuilder.CreateConnectorClientAsync(System.String,System.Security.Claims.ClaimsIdentity,System.String,System.Threading.CancellationToken)">
            <summary>
            Creates the connector client asynchronous.
            </summary>
            <param name="serviceUrl">The service URL.</param>
            <param name="claimsIdentity">The claims claimsIdentity.</param>
            <param name="audience">The target audience for the connector.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>ConnectorClient instance.</returns>
            <exception cref="T:System.NotSupportedException">ClaimsIdentity cannot be null. Pass Anonymous ClaimsIdentity if authentication is turned off.</exception>
        </member>
        <member name="T:Microsoft.Bot.Builder.IExtendedUserTokenProvider">
            <summary>
            Methods to call methods on the Token Service.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Builder.IExtendedUserTokenProvider.GetUserTokenAsync(Microsoft.Bot.Builder.ITurnContext,Microsoft.Bot.Connector.Authentication.AppCredentials,System.String,System.String,System.Threading.CancellationToken)">
            <summary>Attempts to retrieve the token for a user that's in a login flow, using customized AppCredentials.
            </summary>
            <param name="turnContext">Context for the current turn of conversation with the user.</param>
            <param name="oAuthAppCredentials">AppCredentials for OAuth.</param>
            <param name="connectionName">Name of the auth connection to use.</param>
            <param name="magicCode">(Optional) Optional user entered code to validate.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>Token Response.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.IExtendedUserTokenProvider.GetOauthSignInLinkAsync(Microsoft.Bot.Builder.ITurnContext,Microsoft.Bot.Connector.Authentication.AppCredentials,System.String,System.Threading.CancellationToken)">
            <summary>
            Get the raw signin link to be sent to the user for signin for a connection name, using customized AppCredentials.
            </summary>
            <param name="turnContext">Context for the current turn of conversation with the user.</param>
            <param name="oAuthAppCredentials">AppCredentials for OAuth.</param>
            <param name="connectionName">Name of the auth connection to use.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <remarks>If the task completes successfully, the result contains the raw signin link.</remarks>
        </member>
        <member name="M:Microsoft.Bot.Builder.IExtendedUserTokenProvider.GetOauthSignInLinkAsync(Microsoft.Bot.Builder.ITurnContext,Microsoft.Bot.Connector.Authentication.AppCredentials,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Get the raw signin link to be sent to the user for signin for a connection name, using customized AppCredentials.
            </summary>
            <param name="turnContext">Context for the current turn of conversation with the user.</param>
            <param name="oAuthAppCredentials">AppCredentials for OAuth.</param>
            <param name="connectionName">Name of the auth connection to use.</param>
            <param name="userId">The user id that will be associated with the token.</param>
            <param name="finalRedirect">The final URL that the OAuth flow will redirect to.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <remarks>If the task completes successfully, the result contains the raw signin link.</remarks>
        </member>
        <member name="M:Microsoft.Bot.Builder.IExtendedUserTokenProvider.SignOutUserAsync(Microsoft.Bot.Builder.ITurnContext,Microsoft.Bot.Connector.Authentication.AppCredentials,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Signs the user out with the token server, using customized AppCredentials.
            </summary>
            <param name="turnContext">Context for the current turn of conversation with the user.</param>
            <param name="oAuthAppCredentials">AppCredentials for OAuth.</param>
            <param name="connectionName">Name of the auth connection to use.</param>
            <param name="userId">User id of user to sign out.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.IExtendedUserTokenProvider.GetTokenStatusAsync(Microsoft.Bot.Builder.ITurnContext,Microsoft.Bot.Connector.Authentication.AppCredentials,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Retrieves the token status for each configured connection for the given user, using customized AppCredentials.
            </summary>
            <param name="context">Context for the current turn of conversation with the user.</param>
            <param name="oAuthAppCredentials">AppCredentials for OAuth.</param>
            <param name="userId">The user Id for which token status is retrieved.</param>
            <param name="includeFilter">Optional comma separated list of connection's to include. Blank will return token status for all configured connections.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>Array of TokenStatus.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.IExtendedUserTokenProvider.GetAadTokensAsync(Microsoft.Bot.Builder.ITurnContext,Microsoft.Bot.Connector.Authentication.AppCredentials,System.String,System.String[],System.String,System.Threading.CancellationToken)">
            <summary>
            Retrieves Azure Active Directory tokens for particular resources on a configured connection, using customized AppCredentials.
            </summary>
            <param name="context">Context for the current turn of conversation with the user.</param>
            <param name="oAuthAppCredentials">AppCredentials for OAuth.</param>
            <param name="connectionName">The name of the Azure Active Directory connection configured with this bot.</param>
            <param name="resourceUrls">The list of resource URLs to retrieve tokens for.</param>
            <param name="userId">The user Id for which tokens are retrieved. If passing in null the userId is taken from the Activity in the ITurnContext.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>Dictionary of resourceUrl to the corresponding TokenResponse.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.IExtendedUserTokenProvider.GetSignInResourceAsync(Microsoft.Bot.Builder.ITurnContext,System.String,System.Threading.CancellationToken)">
            <summary>
            Get the raw signin link to be sent to the user for signin for a connection name.
            </summary>
            <param name="turnContext">Context for the current turn of conversation with the user.</param>
            <param name="connectionName">Name of the auth connection to use.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <remarks>If the task completes successfully, the result contains the raw signin link.</remarks>
        </member>
        <member name="M:Microsoft.Bot.Builder.IExtendedUserTokenProvider.GetSignInResourceAsync(Microsoft.Bot.Builder.ITurnContext,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Get the raw signin link to be sent to the user for signin for a connection name.
            </summary>
            <param name="turnContext">Context for the current turn of conversation with the user.</param>
            <param name="connectionName">Name of the auth connection to use.</param>
            <param name="userId">The user id that will be associated with the token.</param>
            <param name="finalRedirect">The final URL that the OAuth flow will redirect to.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <remarks>If the task completes successfully, the result contains the raw signin link.</remarks>
        </member>
        <member name="M:Microsoft.Bot.Builder.IExtendedUserTokenProvider.GetSignInResourceAsync(Microsoft.Bot.Builder.ITurnContext,Microsoft.Bot.Connector.Authentication.AppCredentials,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Get the raw signin link to be sent to the user for signin for a connection name.
            </summary>
            <param name="turnContext">Context for the current turn of conversation with the user.</param>
            <param name="oAuthAppCredentials">Credentials for OAuth.</param>
            <param name="connectionName">Name of the auth connection to use.</param>
            <param name="userId">The user id that will be associated with the token.</param>
            <param name="finalRedirect">The final URL that the OAuth flow will redirect to.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <remarks>If the task completes successfully, the result contains the raw signin link.</remarks>
        </member>
        <member name="M:Microsoft.Bot.Builder.IExtendedUserTokenProvider.ExchangeTokenAsync(Microsoft.Bot.Builder.ITurnContext,System.String,System.String,Microsoft.Bot.Schema.TokenExchangeRequest,System.Threading.CancellationToken)">
            <summary>
            Performs a token exchange operation such as for single sign-on.
            </summary>
            <param name="turnContext">Context for the current turn of conversation with the user.</param>
            <param name="connectionName">Name of the auth connection to use.</param>
            <param name="userId">The user id associated with the token..</param>
            <param name="exchangeRequest">The exchange request details, either a token to exchange or a uri to exchange.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>If the task completes, the exchanged token is returned.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.IExtendedUserTokenProvider.ExchangeTokenAsync(Microsoft.Bot.Builder.ITurnContext,Microsoft.Bot.Connector.Authentication.AppCredentials,System.String,System.String,Microsoft.Bot.Schema.TokenExchangeRequest,System.Threading.CancellationToken)">
            <summary>
            Performs a token exchange operation such as for single sign-on.
            </summary>
            <param name="turnContext">Context for the current turn of conversation with the user.</param>
            <param name="oAuthAppCredentials">AppCredentials for OAuth.</param>
            <param name="connectionName">Name of the auth connection to use.</param>
            <param name="userId">The user id associated with the token..</param>
            <param name="exchangeRequest">The exchange request details, either a token to exchange or a uri to exchange.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>If the task completes, the exchanged token is returned.</returns>
        </member>
        <member name="T:Microsoft.Bot.Builder.IUserTokenProvider">
            <summary>
            A contract for user token provider classes.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Builder.IUserTokenProvider.GetUserTokenAsync(Microsoft.Bot.Builder.ITurnContext,System.String,System.String,System.Threading.CancellationToken)">
            <summary>Attempts to retrieve the token for a user that's in a login flow, using the bot's AppCredentials.
            </summary>
            <param name="turnContext">Context for the current turn of conversation with the user.</param>
            <param name="connectionName">Name of the auth connection to use.</param>
            <param name="magicCode">(Optional) Optional user entered code to validate.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>Token Response.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.IUserTokenProvider.GetOauthSignInLinkAsync(Microsoft.Bot.Builder.ITurnContext,System.String,System.Threading.CancellationToken)">
            <summary>
            Get the raw signin link to be sent to the user for signin for a connection name, using the bot's AppCredentials.
            </summary>
            <param name="turnContext">Context for the current turn of conversation with the user.</param>
            <param name="connectionName">Name of the auth connection to use.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <remarks>If the task completes successfully, the result contains the raw signin link.</remarks>
        </member>
        <member name="M:Microsoft.Bot.Builder.IUserTokenProvider.GetOauthSignInLinkAsync(Microsoft.Bot.Builder.ITurnContext,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Get the raw signin link to be sent to the user for signin for a connection name, using the bot's AppCredentials.
            </summary>
            <param name="turnContext">Context for the current turn of conversation with the user.</param>
            <param name="connectionName">Name of the auth connection to use.</param>
            <param name="userId">The user id that will be associated with the token.</param>
            <param name="finalRedirect">The final URL that the OAuth flow will redirect to.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <remarks>If the task completes successfully, the result contains the raw signin link.</remarks>
        </member>
        <member name="M:Microsoft.Bot.Builder.IUserTokenProvider.SignOutUserAsync(Microsoft.Bot.Builder.ITurnContext,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Signs the user out with the token server, using the bot's AppCredentials.
            </summary>
            <param name="turnContext">Context for the current turn of conversation with the user.</param>
            <param name="connectionName">Name of the auth connection to use.</param>
            <param name="userId">User id of user to sign out.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.IUserTokenProvider.GetTokenStatusAsync(Microsoft.Bot.Builder.ITurnContext,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Retrieves the token status for each configured connection for the given user, using the bot's AppCredentials.
            </summary>
            <param name="context">Context for the current turn of conversation with the user.</param>
            <param name="userId">The user Id for which token status is retrieved.</param>
            <param name="includeFilter">Optional comma separated list of connection's to include. Blank will return token status for all configured connections.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>Array of TokenStatus.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.IUserTokenProvider.GetAadTokensAsync(Microsoft.Bot.Builder.ITurnContext,System.String,System.String[],System.String,System.Threading.CancellationToken)">
            <summary>
            Retrieves Azure Active Directory tokens for particular resources on a configured connection, using the bot's AppCredentials.
            </summary>
            <param name="context">Context for the current turn of conversation with the user.</param>
            <param name="connectionName">The name of the Azure Active Directory connection configured with this bot.</param>
            <param name="resourceUrls">The list of resource URLs to retrieve tokens for.</param>
            <param name="userId">The user Id for which tokens are retrieved. If passing in null the userId is taken from the Activity in the ITurnContext.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>Dictionary of resourceUrl to the corresponding TokenResponse.</returns>
        </member>
        <member name="T:Microsoft.Bot.Builder.PagedResult`1">
            <summary>
            Page of results from an enumeration.
            </summary>
            <typeparam name="T">The type of items in the results.</typeparam>
        </member>
        <member name="P:Microsoft.Bot.Builder.PagedResult`1.Items">
            <summary>
            Gets or sets the page of items.
            </summary>
            <value>
            The array of items.
            </value>
        </member>
        <member name="P:Microsoft.Bot.Builder.PagedResult`1.ContinuationToken">
            <summary>
            Gets or sets a token for retrieving the next page of results.
            </summary>
            <value>
            The Continuation Token to pass to get the next page of results.
            </value>
        </member>
        <member name="T:Microsoft.Bot.Builder.PathUtils">
            <summary>
            A utilities class of file path operations.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Builder.PathUtils.NormalizePath(System.String)">
            <summary>
            Normalizes authored path to OS-compatible path.
            </summary>
            <remarks>
            Path is from authored content which doesn't know what OS it is running on.
            This method treats / and \ both as separators regardless of OS, for Windows that means
            changing all `/` characters to `/`, and for Linux/Mac `\` to `/`.
            This allows author to use ../foo.lg or ..\foo.lg as equivalents for importing.
            </remarks>
            <param name="ambiguousPath">authoredPath.</param>
            <returns>path expressed as OS path.</returns>
        </member>
        <member name="T:Microsoft.Bot.Builder.PrivateConversationState">
            <summary>
            Defines a state management object for private conversation state.
            </summary>
            <remarks>
            Private conversation state is scoped to both the specific conversation and to that specific user.
            </remarks>
        </member>
        <member name="M:Microsoft.Bot.Builder.PrivateConversationState.#ctor(Microsoft.Bot.Builder.IStorage)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Builder.PrivateConversationState"/> class.
            </summary>
            <param name="storage">The storage layer to use.</param>
        </member>
        <member name="M:Microsoft.Bot.Builder.PrivateConversationState.GetStorageKey(Microsoft.Bot.Builder.ITurnContext)">
            <summary>
            Gets the key to use when reading and writing state to and from storage.
            </summary>
            <param name="turnContext">The context object for this turn.</param>
            <returns>The storage key.</returns>
            <remarks>
            Private conversation state includes the channel ID, conversation ID, and user ID as part
            of its storage key.
            </remarks>
            <exception cref="T:System.ArgumentNullException">The <see cref="P:Microsoft.Bot.Builder.ITurnContext.Activity"/> for the
            current turn is missing <see cref="P:Microsoft.Bot.Schema.Activity.ChannelId"/>,
            <see cref="P:Microsoft.Bot.Schema.Activity.Conversation"/>, or
            <see cref="P:Microsoft.Bot.Schema.Activity.From"/> information; or
            the conversation's or sender's <see cref="P:Microsoft.Bot.Schema.ConversationAccount.Id"/> is missing.
            </exception>
        </member>
        <member name="T:Microsoft.Bot.Builder.QueueStorage">
            <summary>
            A base class for enqueueing an Activity for later processing.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Builder.QueueStorage.QueueActivityAsync(Microsoft.Bot.Schema.Activity,System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan},System.Threading.CancellationToken)">
            <summary>
            Enqueues an Activity for later processing. The visibility timeout specifies how long the message should be invisible
            to Dequeue and Peek operations. 
            </summary>
            <param name="activity">The <see cref="T:Microsoft.Bot.Schema.Activity"/> to be queued for later processing.</param>
            <param name="visibilityTimeout"> Visibility timeout.  Optional with a default value of 0.  Cannot be larger than 7 days. </param>
            <param name="timeToLive">Specifies the time-to-live interval for the message.</param>
            <param name="cancellationToken">Cancellation token for the async operation.</param>
            <returns>A result string.</returns>
        </member>
        <member name="T:Microsoft.Bot.Builder.RecognizerResult">
            <summary>
            Contains recognition results generated by an <see cref="T:Microsoft.Bot.Builder.IRecognizer"/>.
            </summary>
            <seealso cref="M:Microsoft.Bot.Builder.IRecognizer.RecognizeAsync(Microsoft.Bot.Builder.ITurnContext,System.Threading.CancellationToken)"/>
        </member>
        <member name="P:Microsoft.Bot.Builder.RecognizerResult.Text">
            <summary>
            Gets or sets the input text to recognize.
            </summary>
            <value>
            Original text to recognizer.
            </value>
        </member>
        <member name="P:Microsoft.Bot.Builder.RecognizerResult.AlteredText">
            <summary>
            Gets or sets the input text as modified by the recognizer, for example for spelling correction.
            </summary>
            <value>
            Text modified by recognizer.
            </value>
        </member>
        <member name="P:Microsoft.Bot.Builder.RecognizerResult.Intents">
            <summary>
            Gets or sets the recognized intents, with the intent as key and the confidence as value.
            </summary>
            <value>
            Mapping from intent to information about the intent.
            </value>
        </member>
        <member name="P:Microsoft.Bot.Builder.RecognizerResult.Entities">
            <summary>
            Gets or sets the recognized top-level entities.
            </summary>
            <value>
            Object with each top-level recognized entity as a key.
            </value>
        </member>
        <member name="P:Microsoft.Bot.Builder.RecognizerResult.Properties">
            <summary>
            Gets or sets properties that are not otherwise defined by the <see cref="T:Microsoft.Bot.Builder.RecognizerResult"/> type but that
            might appear in the REST JSON object.
            </summary>
            <value>The extended properties for the object.</value>
            <remarks>With this, properties not represented in the defined type are not dropped when
            the JSON object is deserialized, but are instead stored in this property. Such properties
            will be written to a JSON object when the instance is serialized.</remarks>
        </member>
        <member name="M:Microsoft.Bot.Builder.RecognizerResult.Convert(System.Object)">
            <summary>
            Convert recognizer result.
            </summary>
            <param name="result">Result to convert.</param>
        </member>
        <member name="T:Microsoft.Bot.Builder.RecognizerResultExtensions">
            <summary>
            Contains helper methods for working with <see cref="T:Microsoft.Bot.Builder.RecognizerResult"/> objects.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Builder.RecognizerResultExtensions.GetTopScoringIntent(Microsoft.Bot.Builder.RecognizerResult)">
            <summary>
            Return the top scoring intent and its score.
            </summary>
            <param name="result">Recognizer result.</param>
            <returns>Intent and score.</returns>
        </member>
        <member name="T:Microsoft.Bot.Builder.RegisterClassMiddleware`1">
            <summary>
            Middleware for adding an object to or registering a service with the current turn context.
            </summary>
            <typeparam name="T">The type of object or service to add.</typeparam>
        </member>
        <member name="M:Microsoft.Bot.Builder.RegisterClassMiddleware`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Builder.RegisterClassMiddleware`1"/> class.
            </summary>
            <param name="service">The object or service to add.</param>
        </member>
        <member name="M:Microsoft.Bot.Builder.RegisterClassMiddleware`1.#ctor(`0,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Builder.RegisterClassMiddleware`1"/> class.
            </summary>
            <param name="service">The object or service to add.</param>
            <param name="key">optional key for service object in turn state (default is instance.GetType().FullName).</param>
        </member>
        <member name="P:Microsoft.Bot.Builder.RegisterClassMiddleware`1.Service">
            <summary>
            Gets or sets the object or service to add to the turn context.
            </summary>
            <value>
            The object or service to add.
            </value>
        </member>
        <member name="M:Microsoft.Bot.Builder.RegisterClassMiddleware`1.OnTurnAsync(Microsoft.Bot.Builder.ITurnContext,Microsoft.Bot.Builder.NextDelegate,System.Threading.CancellationToken)">
            <summary>
            Adds the associated object or service to the current turn context.
            </summary>
            <param name="turnContext">The context object for this turn.</param>
            <param name="nextTurn">The delegate to call to continue the bot middleware pipeline.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <seealso cref="T:Microsoft.Bot.Builder.ITurnContext"/>
            <seealso cref="T:Microsoft.Bot.Schema.IActivity"/>
        </member>
        <member name="T:Microsoft.Bot.Builder.SetSpeakMiddleware">
            <summary>
            Support the DirectLine speech and telephony channels to ensure the appropriate SSML tags are set 
            on the Activity Speak property.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Builder.SetSpeakMiddleware.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Builder.SetSpeakMiddleware"/> class.
            </summary>
            <param name="voiceName">The SSML voice name attribute value.</param>
            <param name="fallbackToTextForSpeak">true if an empt Activity.Speak is populated with Activity.Text.</param>
        </member>
        <member name="M:Microsoft.Bot.Builder.SetSpeakMiddleware.OnTurnAsync(Microsoft.Bot.Builder.ITurnContext,Microsoft.Bot.Builder.NextDelegate,System.Threading.CancellationToken)">
            <summary>
            Processes an incoming activity.
            </summary>
            <param name="turnContext">The context object for this turn.</param>
            <param name="next">The delegate to call to continue the bot middleware pipeline.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <seealso cref="T:Microsoft.Bot.Builder.ITurnContext"/>
            <seealso cref="T:Microsoft.Bot.Schema.IActivity"/>
        </member>
        <member name="T:Microsoft.Bot.Builder.Severity">
            <summary>
            Defines trace severity levels for use with a <see cref="T:Microsoft.Bot.Builder.IBotTelemetryClient"/> object.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Builder.Severity.Verbose">
            <summary>
            Verbose severity level.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Builder.Severity.Information">
            <summary>
            Information severity level.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Builder.Severity.Warning">
            <summary>
            Warning severity level.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Builder.Severity.Error">
            <summary>
            Error severity level.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Builder.Severity.Critical">
            <summary>
            Critical severity level.
            </summary>
        </member>
        <member name="T:Microsoft.Bot.Builder.ShowTypingMiddleware">
            <summary>
            When added, this middleware will send typing activities back to the user when a Message activity
            is received to let them know that the bot has received the message and is working on the response.
            You can specify a delay in milliseconds before the first typing activity is sent and then a frequency,
            also in milliseconds which determines how often another typing activity is sent. Typing activities
            will continue to be sent until your bot sends another message back to the user.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Builder.ShowTypingMiddleware.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Builder.ShowTypingMiddleware"/> class.
            </summary>
            <param name="delay">Initial delay before sending first typing indicator. Defaults to 500ms.</param>
            <param name="period">Rate at which additional typing indicators will be sent. Defaults to every 2000ms.</param>
        </member>
        <member name="M:Microsoft.Bot.Builder.ShowTypingMiddleware.OnTurnAsync(Microsoft.Bot.Builder.ITurnContext,Microsoft.Bot.Builder.NextDelegate,System.Threading.CancellationToken)">
            <summary>
            Processes an incoming activity.
            </summary>
            <param name="turnContext">The context object for this turn.</param>
            <param name="next">The delegate to call to continue the bot middleware pipeline.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <remarks>Spawns a thread that sends the periodic typing activities until the turn ends.
            </remarks>
            <seealso cref="T:Microsoft.Bot.Builder.ITurnContext"/>
            <seealso cref="T:Microsoft.Bot.Schema.IActivity"/>
        </member>
        <member name="T:Microsoft.Bot.Builder.Skills.BotFrameworkSkill">
            <summary>
            Registration for a BotFrameworkHttpProtocol based Skill endpoint.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Builder.Skills.BotFrameworkSkill.Id">
            <summary>
            Gets or sets Id of the skill.
            </summary>
            <value>
            Id of the skill.
            </value>
        </member>
        <member name="P:Microsoft.Bot.Builder.Skills.BotFrameworkSkill.AppId">
            <summary>
            Gets or sets appId of the skill.
            </summary>
            <value>
            AppId of the skill.
            </value>
        </member>
        <member name="P:Microsoft.Bot.Builder.Skills.BotFrameworkSkill.SkillEndpoint">
            <summary>
            Gets or sets /api/messages endpoint for the skill.
            </summary>
            <value>
            /api/messages endpoint for the skill.
            </value>
        </member>
        <member name="T:Microsoft.Bot.Builder.Skills.CloudSkillHandler">
            <summary>
            A Bot Framework Handler for skills.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Builder.Skills.CloudSkillHandler.SkillConversationReferenceKey">
            <summary>
            The skill conversation reference.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Builder.Skills.CloudSkillHandler.#ctor(Microsoft.Bot.Builder.BotAdapter,Microsoft.Bot.Builder.IBot,Microsoft.Bot.Builder.Skills.SkillConversationIdFactoryBase,Microsoft.Bot.Connector.Authentication.BotFrameworkAuthentication,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Builder.Skills.CloudSkillHandler"/> class using BotFrameworkAuth.
            </summary>
            <param name="adapter">An instance of the <see cref="T:Microsoft.Bot.Builder.BotAdapter"/> that will handle the request.</param>
            <param name="bot">The <see cref="T:Microsoft.Bot.Builder.IBot"/> instance.</param>
            <param name="conversationIdFactory">A <see cref="T:Microsoft.Bot.Builder.Skills.SkillConversationIdFactoryBase"/> to unpack the conversation ID and map it to the calling bot.</param>
            <param name="auth">auth.</param>
            <param name="logger">The ILogger implementation this adapter should use.</param>
        </member>
        <member name="M:Microsoft.Bot.Builder.Skills.CloudSkillHandler.OnSendToConversationAsync(System.Security.Claims.ClaimsIdentity,System.String,Microsoft.Bot.Schema.Activity,System.Threading.CancellationToken)">
             <summary>
             SendToConversation() API for Skill.
             </summary>
             <remarks>
             This method allows you to send an activity to the end of a conversation.
            
             This is slightly different from ReplyToActivity().
             * SendToConversation(conversationId) - will append the activity to the end
             of the conversation according to the timestamp or semantics of the channel.
             * ReplyToActivity(conversationId,ActivityId) - adds the activity as a reply
             to another activity, if the channel supports it. If the channel does not
             support nested replies, ReplyToActivity falls back to SendToConversation.
            
             Use ReplyToActivity when replying to a specific activity in the
             conversation.
            
             Use SendToConversation in all other cases.
             </remarks>
             <param name="claimsIdentity">claimsIdentity for the bot, should have AudienceClaim, AppIdClaim and ServiceUrlClaim.</param>
             <param name='conversationId'>conversationId.</param> 
             <param name='activity'>Activity to send.</param>
             <param name='cancellationToken'>The cancellation token.</param>
             <returns>task for a resource response.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.Skills.CloudSkillHandler.OnReplyToActivityAsync(System.Security.Claims.ClaimsIdentity,System.String,System.String,Microsoft.Bot.Schema.Activity,System.Threading.CancellationToken)">
             <summary>
             ReplyToActivity() API for Skill.
             </summary>
             <remarks>
             This method allows you to reply to an activity.
            
             This is slightly different from SendToConversation().
             * SendToConversation(conversationId) - will append the activity to the end
             of the conversation according to the timestamp or semantics of the channel.
             * ReplyToActivity(conversationId,ActivityId) - adds the activity as a reply
             to another activity, if the channel supports it. If the channel does not
             support nested replies, ReplyToActivity falls back to SendToConversation.
            
             Use ReplyToActivity when replying to a specific activity in the
             conversation.
            
             Use SendToConversation in all other cases.
             </remarks>
             <param name="claimsIdentity">claimsIdentity for the bot, should have AudienceClaim, AppIdClaim and ServiceUrlClaim.</param>
             <param name='conversationId'>Conversation ID.</param>
             <param name='activityId'>activityId the reply is to (OPTIONAL).</param>
             <param name='activity'>Activity to send.</param>
             <param name='cancellationToken'>The cancellation token.</param>
             <returns>task for a resource response.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.Skills.CloudSkillHandler.OnDeleteActivityAsync(System.Security.Claims.ClaimsIdentity,System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Bot.Builder.Skills.CloudSkillHandler.OnUpdateActivityAsync(System.Security.Claims.ClaimsIdentity,System.String,System.String,Microsoft.Bot.Schema.Activity,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.Bot.Builder.Skills.SkillConversationIdFactory">
            <summary>
            A <see cref="T:Microsoft.Bot.Builder.Skills.SkillConversationIdFactory"/> that uses <see cref="T:Microsoft.Bot.Builder.IStorage"/> to store
            and retrieve <see cref="T:Microsoft.Bot.Builder.Skills.SkillConversationReference"/> instances.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Builder.Skills.SkillConversationIdFactory.#ctor(Microsoft.Bot.Builder.IStorage)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Builder.Skills.SkillConversationIdFactory"/> class.
            </summary>
            <param name="storage">
            <see cref="T:Microsoft.Bot.Builder.IStorage"/> instance to write and read <see cref="T:Microsoft.Bot.Builder.Skills.SkillConversationReference"/>s from and to.
            </param>
        </member>
        <member name="M:Microsoft.Bot.Builder.Skills.SkillConversationIdFactory.CreateSkillConversationIdAsync(Microsoft.Bot.Builder.Skills.SkillConversationIdFactoryOptions,System.Threading.CancellationToken)">
            <summary>
            Creates a new <see cref="T:Microsoft.Bot.Builder.Skills.SkillConversationReference"/>.
            </summary>
            <param name="options">Creation options to use when creating the <see cref="T:Microsoft.Bot.Builder.Skills.SkillConversationReference"/>.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>ID of the created <see cref="T:Microsoft.Bot.Builder.Skills.SkillConversationReference"/>.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.Skills.SkillConversationIdFactory.GetSkillConversationReferenceAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Retrieve a <see cref="T:Microsoft.Bot.Builder.Skills.SkillConversationReference"/> with the specified ID.
            </summary>
            <param name="skillConversationId">The ID of the <see cref="T:Microsoft.Bot.Builder.Skills.SkillConversationReference"/> to retrieve.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns><see cref="T:Microsoft.Bot.Builder.Skills.SkillConversationReference"/> for the specified ID; null if not found.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.Skills.SkillConversationIdFactory.DeleteConversationReferenceAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Deletes the <see cref="T:Microsoft.Bot.Builder.Skills.SkillConversationReference"/> with the specified ID.
            </summary>
            <param name="skillConversationId">The ID of the <see cref="T:Microsoft.Bot.Builder.Skills.SkillConversationReference"/> to be deleted.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>Task to complete the deletion operation asynchronously.</returns>
        </member>
        <member name="T:Microsoft.Bot.Builder.Skills.SkillConversationIdFactoryBase">
            <summary>
            Defines the interface of a factory that is used to create unique conversation IDs for skill conversations.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Builder.Skills.SkillConversationIdFactoryBase.CreateSkillConversationIdAsync(Microsoft.Bot.Schema.ConversationReference,System.Threading.CancellationToken)">
            <summary>
            Creates a conversation ID for a skill conversation based on the caller's <see cref="T:Microsoft.Bot.Schema.ConversationReference"/>.
            </summary>
            <param name="conversationReference">The skill's caller <see cref="T:Microsoft.Bot.Schema.ConversationReference"/>.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>A unique conversation ID used to communicate with the skill.</returns>
            <remarks>
            It should be possible to use the returned string on a request URL and it should not contain special characters. 
            </remarks>
        </member>
        <member name="M:Microsoft.Bot.Builder.Skills.SkillConversationIdFactoryBase.CreateSkillConversationIdAsync(Microsoft.Bot.Builder.Skills.SkillConversationIdFactoryOptions,System.Threading.CancellationToken)">
            <summary>
            Creates a conversation id for a skill conversation.
            </summary>
            <param name="options">A <see cref="T:Microsoft.Bot.Builder.Skills.SkillConversationIdFactoryOptions"/> instance containing parameters for creating the conversation ID.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>A unique conversation ID used to communicate with the skill.</returns>
            <remarks>
            It should be possible to use the returned string on a request URL and it should not contain special characters. 
            </remarks>
        </member>
        <member name="M:Microsoft.Bot.Builder.Skills.SkillConversationIdFactoryBase.GetConversationReferenceAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the <see cref="T:Microsoft.Bot.Schema.ConversationReference"/> created using <see cref="M:Microsoft.Bot.Builder.Skills.SkillConversationIdFactoryBase.CreateSkillConversationIdAsync(Microsoft.Bot.Schema.ConversationReference,System.Threading.CancellationToken)"/> for a skillConversationId.
            </summary>
            <param name="skillConversationId">A skill conversationId created using <see cref="M:Microsoft.Bot.Builder.Skills.SkillConversationIdFactoryBase.CreateSkillConversationIdAsync(Microsoft.Bot.Schema.ConversationReference,System.Threading.CancellationToken)"/>.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>The caller's <see cref="T:Microsoft.Bot.Schema.ConversationReference"/> for a skillConversationId. null if not found.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.Skills.SkillConversationIdFactoryBase.GetSkillConversationReferenceAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the <see cref="T:Microsoft.Bot.Builder.Skills.SkillConversationReference"/> used during <see cref="M:Microsoft.Bot.Builder.Skills.SkillConversationIdFactoryBase.CreateSkillConversationIdAsync(Microsoft.Bot.Builder.Skills.SkillConversationIdFactoryOptions,System.Threading.CancellationToken)"/> for a skillConversationId.
            </summary>
            <param name="skillConversationId">A skill conversationId created using <see cref="M:Microsoft.Bot.Builder.Skills.SkillConversationIdFactoryBase.CreateSkillConversationIdAsync(Microsoft.Bot.Builder.Skills.SkillConversationIdFactoryOptions,System.Threading.CancellationToken)"/>.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>The caller's <see cref="T:Microsoft.Bot.Schema.ConversationReference"/> for a skillConversationId, with originatingAudience. Null if not found.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.Skills.SkillConversationIdFactoryBase.DeleteConversationReferenceAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Deletes a <see cref="T:Microsoft.Bot.Schema.ConversationReference"/>.
            </summary>
            <param name="skillConversationId">A skill conversationId created using <see cref="M:Microsoft.Bot.Builder.Skills.SkillConversationIdFactoryBase.CreateSkillConversationIdAsync(Microsoft.Bot.Builder.Skills.SkillConversationIdFactoryOptions,System.Threading.CancellationToken)"/>.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="T:Microsoft.Bot.Builder.Skills.SkillConversationIdFactoryOptions">
            <summary>
            A class defining the parameters used in <see cref="M:Microsoft.Bot.Builder.Skills.SkillConversationIdFactoryBase.CreateSkillConversationIdAsync(Microsoft.Bot.Builder.Skills.SkillConversationIdFactoryOptions,System.Threading.CancellationToken)"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Builder.Skills.SkillConversationIdFactoryOptions.FromBotOAuthScope">
            <summary>
            Gets or sets the oauth audience scope, used during token retrieval (either https://api.botframework.com or bot app id).
            </summary>
            <value>
            The oauth audience scope, used during token retrieval (either https://api.botframework.com or bot app id if this is a skill calling another skill).
            </value>
        </member>
        <member name="P:Microsoft.Bot.Builder.Skills.SkillConversationIdFactoryOptions.FromBotId">
            <summary>
            Gets or sets the id of the parent bot that is messaging the skill.
            </summary>
            <value>
            The id of the parent bot that is messaging the skill.
            </value>
        </member>
        <member name="P:Microsoft.Bot.Builder.Skills.SkillConversationIdFactoryOptions.Activity">
            <summary>
            Gets or sets the activity which will be sent to the skill.
            </summary>
            <value>
            The activity which will be sent to the skill.
            </value>
        </member>
        <member name="P:Microsoft.Bot.Builder.Skills.SkillConversationIdFactoryOptions.BotFrameworkSkill">
            <summary>
            Gets or sets the skill to create the conversation Id for.
            </summary>
            <value>
            The skill to create the conversation Id for.
            </value>
        </member>
        <member name="T:Microsoft.Bot.Builder.Skills.SkillConversationReference">
            <summary>
            A conversation reference type for skills.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Builder.Skills.SkillConversationReference.ConversationReference">
            <summary>
            Gets or sets the conversation reference.
            </summary>
            <value>
            The conversation reference.
            </value>
        </member>
        <member name="P:Microsoft.Bot.Builder.Skills.SkillConversationReference.OAuthScope">
            <summary>
            Gets or sets the OAuth scope.
            </summary>
            <value>
            The OAuth scope.
            </value>
        </member>
        <member name="T:Microsoft.Bot.Builder.Skills.SkillHandler">
            <summary>
            A Bot Framework Handler for skills.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Builder.Skills.SkillHandler.SkillConversationReferenceKey">
            <summary>
            The skill conversation reference.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Builder.Skills.SkillHandler.#ctor(Microsoft.Bot.Builder.BotAdapter,Microsoft.Bot.Builder.IBot,Microsoft.Bot.Builder.Skills.SkillConversationIdFactoryBase,Microsoft.Bot.Connector.Authentication.ICredentialProvider,Microsoft.Bot.Connector.Authentication.AuthenticationConfiguration,Microsoft.Bot.Connector.Authentication.IChannelProvider,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Builder.Skills.SkillHandler"/> class,
            using a credential provider.
            </summary>
            <param name="adapter">An instance of the <see cref="T:Microsoft.Bot.Builder.BotAdapter"/> that will handle the request.</param>
            <param name="bot">The <see cref="T:Microsoft.Bot.Builder.IBot"/> instance.</param>
            <param name="conversationIdFactory">A <see cref="T:Microsoft.Bot.Builder.Skills.SkillConversationIdFactoryBase"/> to unpack the conversation ID and map it to the calling bot.</param>
            <param name="credentialProvider">The credential provider.</param>
            <param name="authConfig">The authentication configuration.</param>
            <param name="channelProvider">The channel provider.</param>
            <param name="logger">The ILogger implementation this adapter should use.</param>
            <exception cref="T:System.ArgumentNullException">throw ArgumentNullException.</exception>
            <remarks>Use a <see cref="T:Microsoft.Bot.Builder.MiddlewareSet"/> object to add multiple middleware
            components in the constructor. Use the Use(<see cref="T:Microsoft.Bot.Builder.IMiddleware"/>) method to
            add additional middleware to the adapter after construction.
            </remarks>
        </member>
        <member name="M:Microsoft.Bot.Builder.Skills.SkillHandler.OnSendToConversationAsync(System.Security.Claims.ClaimsIdentity,System.String,Microsoft.Bot.Schema.Activity,System.Threading.CancellationToken)">
             <summary>
             SendToConversation() API for Skill.
             </summary>
             <remarks>
             This method allows you to send an activity to the end of a conversation.
            
             This is slightly different from ReplyToActivity().
             * SendToConversation(conversationId) - will append the activity to the end
             of the conversation according to the timestamp or semantics of the channel.
             * ReplyToActivity(conversationId,ActivityId) - adds the activity as a reply
             to another activity, if the channel supports it. If the channel does not
             support nested replies, ReplyToActivity falls back to SendToConversation.
            
             Use ReplyToActivity when replying to a specific activity in the
             conversation.
            
             Use SendToConversation in all other cases.
             </remarks>
             <param name="claimsIdentity">claimsIdentity for the bot, should have AudienceClaim, AppIdClaim and ServiceUrlClaim.</param>
             <param name='conversationId'>conversationId.</param> 
             <param name='activity'>Activity to send.</param>
             <param name='cancellationToken'>The cancellation token.</param>
             <returns>task for a resource response.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.Skills.SkillHandler.OnReplyToActivityAsync(System.Security.Claims.ClaimsIdentity,System.String,System.String,Microsoft.Bot.Schema.Activity,System.Threading.CancellationToken)">
             <summary>
             ReplyToActivity() API for Skill.
             </summary>
             <remarks>
             This method allows you to reply to an activity.
            
             This is slightly different from SendToConversation().
             * SendToConversation(conversationId) - will append the activity to the end
             of the conversation according to the timestamp or semantics of the channel.
             * ReplyToActivity(conversationId,ActivityId) - adds the activity as a reply
             to another activity, if the channel supports it. If the channel does not
             support nested replies, ReplyToActivity falls back to SendToConversation.
            
             Use ReplyToActivity when replying to a specific activity in the
             conversation.
            
             Use SendToConversation in all other cases.
             </remarks>
             <param name="claimsIdentity">claimsIdentity for the bot, should have AudienceClaim, AppIdClaim and ServiceUrlClaim.</param>
             <param name='conversationId'>Conversation ID.</param>
             <param name='activityId'>activityId the reply is to (OPTIONAL).</param>
             <param name='activity'>Activity to send.</param>
             <param name='cancellationToken'>The cancellation token.</param>
             <returns>task for a resource response.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.Skills.SkillHandler.OnDeleteActivityAsync(System.Security.Claims.ClaimsIdentity,System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Bot.Builder.Skills.SkillHandler.OnUpdateActivityAsync(System.Security.Claims.ClaimsIdentity,System.String,System.String,Microsoft.Bot.Schema.Activity,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.Bot.Builder.Skills.SkillHandlerImpl">
            <summary>
            This class inherited all the implementations of <see cref="T:Microsoft.Bot.Builder.Skills.SkillHandler"/> class since we needed similar code for <see cref="T:Microsoft.Bot.Builder.Skills.CloudSkillHandler"/>.
            The <see cref="T:Microsoft.Bot.Builder.Skills.CloudSkillHandler"/> class differs from <see cref="T:Microsoft.Bot.Builder.Skills.SkillHandler"/> class only in authentication by making use of <see cref="T:Microsoft.Bot.Connector.Authentication.BotFrameworkAuthentication"/> class.
            This class is internal since it is only used in skill handler classes.
            </summary>
        </member>
        <member name="T:Microsoft.Bot.Builder.SkypeMentionNormalizeMiddleware">
            <summary>
             Middleware to patch mention Entities from Skype since they don't conform to expected values.
             Bots that interact with Skype should use this middleware if mentions are used.
            </summary>
            <description>
             A Skype mention "text" field is of the format:
               &lt;at id=\"28:2bc5b54d-5d48-4ff1-bd25-03dcbb5ce918\">botname&lt;/at&gt;
             But Activity.Text doesn't contain those tags and RemoveMentionText can't remove
             the entity from Activity.Text.
             This will remove the &lt;at&gt; nodes, leaving just the name.
            </description>
        </member>
        <member name="M:Microsoft.Bot.Builder.SkypeMentionNormalizeMiddleware.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Builder.SkypeMentionNormalizeMiddleware"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Builder.SkypeMentionNormalizeMiddleware.NormalizeSkypMentionText(Microsoft.Bot.Schema.Activity)">
            <summary>
            Performs the normalization of Skype mention Entities.
            </summary>
            <param name="activity">The activity containing the mentions to normalize.</param>
        </member>
        <member name="M:Microsoft.Bot.Builder.SkypeMentionNormalizeMiddleware.OnTurnAsync(Microsoft.Bot.Builder.ITurnContext,Microsoft.Bot.Builder.NextDelegate,System.Threading.CancellationToken)">
            <summary>
            Middleware implementation which corrects Enity.Mention.Text to a value RemoveMentionText can work with.
            </summary>
            <param name="turnContext">turn context.</param>
            <param name="next">next middleware.</param>
            <param name="cancellationToken">cancellationToken.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="T:Microsoft.Bot.Builder.Streaming.BotFrameworkHttpAdapterBase">
            <summary>
            An HTTP adapter base class.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Builder.Streaming.BotFrameworkHttpAdapterBase.#ctor(Microsoft.Bot.Connector.Authentication.ICredentialProvider,Microsoft.Bot.Connector.Authentication.AuthenticationConfiguration,Microsoft.Bot.Connector.Authentication.IChannelProvider,Microsoft.Rest.TransientFaultHandling.RetryPolicy,System.Net.Http.HttpClient,Microsoft.Bot.Builder.IMiddleware,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Builder.Streaming.BotFrameworkHttpAdapterBase"/> class.
            </summary>
            <param name="credentialProvider">The credential provider.</param>
            <param name="authConfig">The authentication configuration.</param>
            <param name="channelProvider">The channel provider.</param>
            <param name="connectorClientRetryPolicy">Retry policy for retyring HTTP operations.</param>
            <param name="customHttpClient">The HTTP client.</param>
            <param name="middleware">The middleware to initially add to the adapter.</param>
            <param name="logger">The ILogger implementation this adapter should use.</param>
        </member>
        <member name="M:Microsoft.Bot.Builder.Streaming.BotFrameworkHttpAdapterBase.#ctor(Microsoft.Bot.Connector.Authentication.ICredentialProvider,Microsoft.Bot.Connector.Authentication.IChannelProvider,Microsoft.Extensions.Logging.ILogger{Microsoft.Bot.Builder.Streaming.BotFrameworkHttpAdapterBase})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Builder.Streaming.BotFrameworkHttpAdapterBase"/> class.
            </summary>
            <param name="credentialProvider">The credential provider.</param>
            <param name="channelProvider">The channel provider.</param>
            <param name="logger">The ILogger implementation this adapter should use.</param>
        </member>
        <member name="M:Microsoft.Bot.Builder.Streaming.BotFrameworkHttpAdapterBase.#ctor(Microsoft.Bot.Connector.Authentication.ICredentialProvider,Microsoft.Bot.Connector.Authentication.IChannelProvider,System.Net.Http.HttpClient,Microsoft.Extensions.Logging.ILogger{Microsoft.Bot.Builder.Streaming.BotFrameworkHttpAdapterBase})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Builder.Streaming.BotFrameworkHttpAdapterBase"/> class.
            </summary>
            <param name="credentialProvider">The credential provider.</param>
            <param name="channelProvider">The channel provider.</param>
            <param name="httpClient">The HTTP client.</param>
            <param name="logger">The ILogger implementation this adapter should use.</param>
        </member>
        <member name="P:Microsoft.Bot.Builder.Streaming.BotFrameworkHttpAdapterBase.ConnectedBot">
            <summary>
            Gets or sets the bot connected to this adapter.
            </summary>
            <value>
            The bot connected to this adapter.
            </value>
        </member>
        <member name="P:Microsoft.Bot.Builder.Streaming.BotFrameworkHttpAdapterBase.ClaimsIdentity">
            <summary>
            Gets or sets the claims identity for this adapter.
            </summary>
            <value>
            The claims identity for this adapter.
            </value>
        </member>
        <member name="P:Microsoft.Bot.Builder.Streaming.BotFrameworkHttpAdapterBase.RequestHandlers">
            <summary>
            Gets or sets the request handlers for this adapter.
            </summary>
            <value>
            The request handlers for this adapter.
            </value>
        </member>
        <member name="M:Microsoft.Bot.Builder.Streaming.BotFrameworkHttpAdapterBase.ProcessStreamingActivityAsync(Microsoft.Bot.Schema.Activity,Microsoft.Bot.Builder.BotCallbackHandler,System.Threading.CancellationToken)">
            <summary>
            Primary adapter method for processing activities sent from streaming channel.
            Creates a turn context and runs the middleware pipeline for an incoming activity.
            Throws <see cref="T:System.ArgumentNullException"/> on null arguments.
            </summary>
            <param name="activity">The <see cref="T:Microsoft.Bot.Schema.Activity"/> to process.</param>
            <param name="callbackHandler">The <see cref="T:Microsoft.Bot.Builder.BotCallbackHandler"/> that will handle the activity.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute. If the activity type
            was 'Invoke' and the corresponding key (channelId + activityId) was found
            then an InvokeResponse is returned, otherwise null is returned.</returns>
            <remarks>Call this method to reactively send a message to a conversation.
            If the task completes successfully, then if the activity's <see cref="P:Microsoft.Bot.Schema.Activity.Type"/>
            is <see cref="F:Microsoft.Bot.Schema.ActivityTypes.Invoke"/> and the corresponding key
            (<see cref="P:Microsoft.Bot.Schema.Activity.ChannelId"/> + <see cref="P:Microsoft.Bot.Schema.Activity.Id"/>) is found
            then an <see cref="T:Microsoft.Bot.Builder.InvokeResponse"/> is returned, otherwise null is returned.
            <para>This method registers the following services for the turn.<list type="bullet"/></para>
            </remarks>
        </member>
        <member name="M:Microsoft.Bot.Builder.Streaming.BotFrameworkHttpAdapterBase.SendStreamingActivityAsync(Microsoft.Bot.Schema.Activity,System.Threading.CancellationToken)">
            <summary>
            Sends an activity.
            </summary>
            <param name="activity">>The <see cref="T:Microsoft.Bot.Schema.Activity"/> to send.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task representing the asynchronous operation.</returns>
            <remarks>If the task completes successfully, the result contains a the resource response object.</remarks>
        </member>
        <member name="M:Microsoft.Bot.Builder.Streaming.BotFrameworkHttpAdapterBase.ConnectNamedPipeAsync(System.String,Microsoft.Bot.Builder.IBot,System.String)">
            <summary>
            Creates a new StreamingRequestHandler to listen to the specified Named Pipe
            and pass requests to this adapter.
            </summary>
            <param name="pipeName">The name of the Named Pipe to connect to.</param>
            <param name="bot">The bot to use when processing activities received over the Named Pipe.</param>
            <param name="audience">The specified recipient of all outgoing activities.</param>
            <returns>A task that completes only once the StreamingRequestHandler has stopped listening
            for incoming requests on the Named Pipe.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.Streaming.BotFrameworkHttpAdapterBase.CanProcessOutgoingActivity(Microsoft.Bot.Schema.Activity)">
            <summary>
            Evaluates if processing an outgoing activity is possible.
            </summary>
            <remarks>If returns true, <see cref="M:Microsoft.Bot.Builder.Streaming.BotFrameworkHttpAdapterBase.ProcessOutgoingActivityAsync(Microsoft.Bot.Builder.ITurnContext,Microsoft.Bot.Schema.Activity,System.Threading.CancellationToken)"/> will be responsible for sending 
            the outgoing activity.</remarks>
            <param name="activity">The outgoing activity.</param>
            <returns>Whether should call ProcessOutgoingActivityAsync to send the outgoing activity.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.Streaming.BotFrameworkHttpAdapterBase.ProcessOutgoingActivityAsync(Microsoft.Bot.Builder.ITurnContext,Microsoft.Bot.Schema.Activity,System.Threading.CancellationToken)">
            <summary>
            Sends an outgoing activity.
            </summary>
            <param name="turnContext">The context object for the turn.</param>
            <param name="activity">The activity to be processed.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The result of processing the activity.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.Streaming.BotFrameworkHttpAdapterBase.CreateStreamingConnectorClient(Microsoft.Bot.Schema.Activity,Microsoft.Bot.Builder.Streaming.StreamingRequestHandler)">
            <summary>
            Creates a streaming specific connector client.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Builder.Streaming.BotFrameworkHttpAdapterBase.GetAudienceFromCallerId(Microsoft.Bot.Schema.Activity)">
            <summary>
            Attempts to get an audience from the <see cref="P:Microsoft.Bot.Schema.Activity.CallerId"/>.
            </summary>
            <param name="activity">The incoming activity to be processed by a <see cref="T:Microsoft.Bot.Builder.Streaming.StreamingRequestHandler"/>.</param>
        </member>
        <member name="T:Microsoft.Bot.Builder.Streaming.IStreamingActivityProcessor">
            <summary>
            Interface for classes that process streaming activities.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Builder.Streaming.IStreamingActivityProcessor.ProcessStreamingActivityAsync(Microsoft.Bot.Schema.Activity,Microsoft.Bot.Builder.BotCallbackHandler,System.Threading.CancellationToken)">
            <summary>
            Defines the contract for processing streaming activities.
            </summary>
            <param name="activity">The <see cref="T:Microsoft.Bot.Schema.Activity"/> to process.</param>
            <param name="botCallbackHandler">The <see cref="T:Microsoft.Bot.Builder.BotCallbackHandler"/> that will handle the activity.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task returning an <see cref="T:Microsoft.Bot.Builder.InvokeResponse"/> object.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.Streaming.StreamingHttpClient.#ctor(Microsoft.Bot.Builder.Streaming.StreamingRequestHandler,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Builder.Streaming.StreamingHttpClient"/> class.
            An implementation of <see cref="T:System.Net.Http.HttpClient"/> that adds compatibility with streaming connections.
            </summary>
            <param name="requestHandler">The <see cref="T:Microsoft.Bot.Builder.Streaming.StreamingRequestHandler"/> to send requests through.</param>
            <param name="logger">A logger.</param>
        </member>
        <member name="T:Microsoft.Bot.Builder.Streaming.StreamingRequestHandler">
            <summary>
            A request handler that processes incoming requests sent over an IStreamingTransport 
            and adheres to the Bot Framework Protocol v3 with Streaming Extensions.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Builder.Streaming.StreamingRequestHandler.#ctor(Microsoft.Bot.Builder.IBot,Microsoft.Bot.Builder.Streaming.IStreamingActivityProcessor,System.Net.WebSockets.WebSocket,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Builder.Streaming.StreamingRequestHandler"/> class and
            establishes a connection over a WebSocket to a streaming channel.
            </summary>
            <param name="bot">The bot for which we handle requests.</param>
            <param name="activityProcessor">The processor for incoming requests.</param>
            <param name="socket">The base socket to use when connecting to the channel.</param>
            <param name="logger">Logger implementation for tracing and debugging information.</param>
        </member>
        <member name="M:Microsoft.Bot.Builder.Streaming.StreamingRequestHandler.#ctor(Microsoft.Bot.Builder.IBot,Microsoft.Bot.Builder.Streaming.IStreamingActivityProcessor,System.Net.WebSockets.WebSocket,System.String,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Builder.Streaming.StreamingRequestHandler"/> class and
            establishes a connection over a WebSocket to a streaming channel.
            </summary>
            <remarks>
            The audience represents the recipient at the other end of the StreamingRequestHandler's
            streaming connection. Some acceptable audience values are as follows:
            <list>
            <item>- For Public Azure channels, use <see cref="F:Microsoft.Bot.Connector.Authentication.AuthenticationConstants.ToChannelFromBotOAuthScope"/>.</item>
            <item>- For Azure Government channels, use <see cref="F:Microsoft.Bot.Connector.Authentication.GovernmentAuthenticationConstants.ToChannelFromBotOAuthScope"/>.</item>
            </list>
            </remarks>
            <param name="bot">The bot for which we handle requests.</param>
            <param name="activityProcessor">The processor for incoming requests.</param>
            <param name="socket">The base socket to use when connecting to the channel.</param>
            <param name="logger">Logger implementation for tracing and debugging information.</param>
            <param name="audience">The specified recipient of all outgoing activities.</param>
        </member>
        <member name="M:Microsoft.Bot.Builder.Streaming.StreamingRequestHandler.#ctor(Microsoft.Bot.Builder.IBot,Microsoft.Bot.Builder.Streaming.IStreamingActivityProcessor,System.String,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Builder.Streaming.StreamingRequestHandler"/> class and
            establishes a connection over a Named Pipe to a streaming channel.
            </summary>
            <param name="bot">The bot for which we handle requests.</param>
            <param name="activityProcessor">The processor for incoming requests.</param>
            <param name="pipeName">The name of the Named Pipe to use when connecting to the channel.</param>
            <param name="logger">Logger implementation for tracing and debugging information.</param>
        </member>
        <member name="M:Microsoft.Bot.Builder.Streaming.StreamingRequestHandler.#ctor(Microsoft.Bot.Builder.IBot,Microsoft.Bot.Builder.Streaming.IStreamingActivityProcessor,System.String,System.String,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Builder.Streaming.StreamingRequestHandler"/> class and
            establishes a connection over a Named Pipe to a streaming channel.
            </summary>
            <remarks>
            The audience represents the recipient at the other end of the StreamingRequestHandler's
            streaming connection. Some acceptable audience values are as follows:
            <list>
            <item>- For Public Azure channels, use <see cref="F:Microsoft.Bot.Connector.Authentication.AuthenticationConstants.ToChannelFromBotOAuthScope"/>.</item>
            <item>- For Azure Government channels, use <see cref="F:Microsoft.Bot.Connector.Authentication.GovernmentAuthenticationConstants.ToChannelFromBotOAuthScope"/>.</item>
            </list>
            </remarks>
            <param name="bot">The bot for which we handle requests.</param>
            <param name="activityProcessor">The processor for incoming requests.</param>
            <param name="pipeName">The name of the Named Pipe to use when connecting to the channel.</param>
            <param name="logger">Logger implementation for tracing and debugging information.</param>
            <param name="audience">The specified recipient of all outgoing activities.</param>
        </member>
        <member name="P:Microsoft.Bot.Builder.Streaming.StreamingRequestHandler.ServiceUrl">
            <summary>
            Gets the URL of the channel endpoint this StreamingRequestHandler receives requests from.
            </summary>
            <value>
            The URL of the channel endpoint this StreamingRequestHandler receives requests from.
            </value>
        </member>
        <member name="P:Microsoft.Bot.Builder.Streaming.StreamingRequestHandler.Audience">
            <summary>
            Gets the intended recipient of <see cref="T:Microsoft.Bot.Schema.Activity">Activities</see> sent from this StreamingRequestHandler.
            </summary>
            <value>
            The intended recipient of Activities sent from this StreamingRequestHandler.
            </value>
        </member>
        <member name="M:Microsoft.Bot.Builder.Streaming.StreamingRequestHandler.ListenAsync">
            <summary>
            Begins listening for incoming requests over this StreamingRequestHandler's server.
            </summary>
            <returns>A task that completes once the server is no longer listening.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.Streaming.StreamingRequestHandler.HasConversation(System.String)">
            <summary>
            Checks to see if the set of conversations this StreamingRequestHandler has
            received requests for contains the passed in conversation ID.
            </summary>
            <param name="conversationId">The ID of the conversation to check for.</param>
            <returns>True if the conversation ID was found in this StreamingRequestHandler's conversation set.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.Streaming.StreamingRequestHandler.ConversationAddedTime(System.String)">
            <summary>
            Gets the <see cref="T:System.DateTime"/> when the conversation was added to this request handler.
            </summary>
            <param name="conversationId">The id of the conversation.</param>
            <returns><see cref="F:System.DateTime.MinValue"/> if conversation is not found, otherwise the <see cref="T:System.DateTime"/>
            the conversation was added to this <see cref="T:Microsoft.Bot.Builder.Streaming.StreamingRequestHandler"/>.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.Streaming.StreamingRequestHandler.ForgetConversation(System.String)">
            <summary>
            Removes the given conversation from this instance of the StreamingRequestHandler's collection
            of tracked conversations.
            </summary>
            <param name="conversationId">The ID of the conversation to remove.</param>
        </member>
        <member name="M:Microsoft.Bot.Builder.Streaming.StreamingRequestHandler.ProcessRequestAsync(Microsoft.Bot.Streaming.ReceiveRequest,Microsoft.Extensions.Logging.ILogger{Microsoft.Bot.Streaming.RequestHandler},System.Object,System.Threading.CancellationToken)">
            <summary>
            Handles incoming requests.
            </summary>
            <param name="request">A <see cref="T:Microsoft.Bot.Streaming.ReceiveRequest"/> for this handler to process.</param>
            <param name="logger">Logger.</param>
            <param name="context">Optional context to process the request within.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that will produce a <see cref="T:Microsoft.Bot.Streaming.StreamingResponse"/> on successful completion.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.Streaming.StreamingRequestHandler.SendActivityAsync(Microsoft.Bot.Schema.Activity,System.Threading.CancellationToken)">
            <summary>
            Converts an <see cref="T:Microsoft.Bot.Schema.Activity"/> into a <see cref="T:Microsoft.Bot.Streaming.StreamingRequest"/> and sends it to the
            channel this StreamingRequestHandler is connected to.
            </summary>
            <param name="activity">The activity to send.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>A task that resolves to a <see cref="T:Microsoft.Bot.Schema.ResourceResponse"/>.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.Streaming.StreamingRequestHandler.SendStreamingRequestAsync(Microsoft.Bot.Streaming.StreamingRequest,System.Threading.CancellationToken)">
            <summary>
            Sends a <see cref="T:Microsoft.Bot.Streaming.StreamingRequest"/> to the connected streaming channel.
            </summary>
            <param name="request">The request to send.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>A task that resolves to a <see cref="T:Microsoft.Bot.Streaming.ReceiveResponse"/>.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.Streaming.StreamingRequestHandler.GetUserAgent">
            <summary>
            Build and return versioning information used for telemetry, including:
            The Schema version is 3.1, put into the Microsoft-BotFramework header,
            Protocol Extension Info,
            The Client SDK Version
             https://github.com/Microsoft/botbuilder-dotnet/blob/d342cd66d159a023ac435aec0fdf791f93118f5f/doc/UserAgents.md,
            Additional Info.
            https://github.com/Microsoft/botbuilder-dotnet/blob/d342cd66d159a023ac435aec0fdf791f93118f5f/doc/UserAgents.md.
            </summary>
            <returns>A string containing versioning information.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.Streaming.StreamingRequestHandler.HandleCustomPaths(Microsoft.Bot.Streaming.ReceiveRequest,Microsoft.Bot.Streaming.StreamingResponse)">
            <summary>
            Checks the validity of the request and attempts to map it the correct custom endpoint,
            then generates and returns a response if appropriate.
            </summary>
            <param name="request">A ReceiveRequest from the connected channel.</param>
            <param name="response">The <see cref="T:Microsoft.Bot.Streaming.StreamingResponse"/> instance.</param>
            <returns>A response if the given request matches against a defined path.</returns>
        </member>
        <member name="T:Microsoft.Bot.Builder.Streaming.VersionInfo">
            <summary>
            A class containing version information.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Builder.Streaming.VersionInfo.UserAgent">
            <summary>
            Gets or sets the user agent value.
            </summary>
            <value>
            The user agent value.
            </value>
        </member>
        <member name="T:Microsoft.Bot.Builder.StringUtils">
            <summary>
            Helper class containing string utility methods.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Builder.StringUtils.Ellipsis(System.String,System.Int32)">
            <summary>
            Truncate string with ...
            </summary>
            <param name="text">text.</param>
            <param name="length">length to truncate text.</param>
            <returns>string length + ...</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.StringUtils.Hash(System.String)">
            <summary>
            UniqueHash - create a unique hash from a string.
            </summary>
            <param name="text">text to hash.</param>
            <returns>string which is unique SHA256 hash.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.StringUtils.EllipsisHash(System.String,System.Int32)">
            <summary>
            EllipsisHash - return truncated string with unique hash for the truncated part.
            </summary>
            <param name="text">text to truncate.</param>
            <param name="length">length to truncate at.</param>
            <returns>prefix up to length + ... + uniquehash(text).</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.StringUtils.Ellipsis(System.Text.StringBuilder,System.Int32)">
            <summary>
            Truncate stringbuilder string with ...
            </summary>
            <param name="sb">stringbuilder which will be truncated.</param>
            <param name="length">length to truncate text.</param>
            <returns>original stringbuilder modified.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.StringUtils.EllipsisHash(System.Text.StringBuilder,System.Int32)">
            <summary>
            EllipsisHash - return truncated string with unique hash for the truncated part.
            </summary>
            <param name="sb">text to truncate.</param>
            <param name="length">length to truncate at.</param>
            <returns>original stringbuilder modified.</returns>
        </member>
        <member name="T:Microsoft.Bot.Builder.Teams.TeamsActivityExtensions">
            <summary>
            The TeamsActivityExtensions
            provides helpers to make interacting with Microsoft Teams objects easier. 
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Builder.Teams.TeamsActivityExtensions.TeamsGetMeetingInfo(Microsoft.Bot.Schema.IActivity)">
            <summary>
            Gets the TeamsMeetingInfo object from the current activity.
            </summary>
            <param name="activity">This activity.</param>
            <returns>The current activity's team's meeting, or null.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.Teams.TeamsActivityExtensions.TeamsGetChannelId(Microsoft.Bot.Schema.IActivity)">
            <summary>
            Gets the Team's channel id from the current activity.
            </summary>
            <param name="activity"> The current activity. </param>
            <returns>The current activity's team's channel, or empty string.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.Teams.TeamsActivityExtensions.TeamsGetTeamInfo(Microsoft.Bot.Schema.IActivity)">
            <summary>
            Gets the TeamsInfo object from the current activity.
            </summary>
            <param name="activity">This activity.</param>
            <returns>The current activity's team's Id, or an empty string.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.Teams.TeamsActivityExtensions.TeamsNotifyUser(Microsoft.Bot.Schema.IActivity,System.Boolean,System.String)">
            <summary>
            Configures the current activity to generate a notification within Teams.
            </summary>
            <param name="activity">The current activity. </param>
            <param name="alertInMeeting">Sent to a meeting chat, this will cause the Teams client to 
            render it in a notification popup as well as in the chat thread.</param>
            <param name="externalResourceUrl">Url to external resource. Must be included in manifest's valid domains.</param>
        </member>
        <member name="M:Microsoft.Bot.Builder.Teams.TeamsActivityExtensions.TeamsNotifyUser(Microsoft.Bot.Schema.IActivity)">
            <summary>
            Configures the current activity to generate a notification within Teams.
            </summary>
            <param name="activity">The current activity.</param>
        </member>
        <member name="T:Microsoft.Bot.Builder.Teams.TeamsActivityHandler">
            <summary>
            The TeamsActivityHandler is derived from ActivityHandler. It adds support for 
            the Microsoft Teams specific events and interactions.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Builder.Teams.TeamsActivityHandler.OnInvokeActivityAsync(Microsoft.Bot.Builder.ITurnContext{Microsoft.Bot.Schema.IInvokeActivity},System.Threading.CancellationToken)">
            <summary>
            Invoked when an invoke activity is received from the connector.
            Invoke activities can be used to communicate many different things.
            </summary>
            <param name="turnContext">A strongly-typed context object for this turn.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <remarks>
            Invoke activities communicate programmatic commands from a client or channel to a bot.
            The meaning of an invoke activity is defined by the <see cref="P:Microsoft.Bot.Schema.IInvokeActivity.Name"/> property,
            which is meaningful within the scope of a channel.
            </remarks>
        </member>
        <member name="M:Microsoft.Bot.Builder.Teams.TeamsActivityHandler.OnTeamsCardActionInvokeAsync(Microsoft.Bot.Builder.ITurnContext{Microsoft.Bot.Schema.IInvokeActivity},System.Threading.CancellationToken)">
            <summary>
            Invoked when an card action invoke activity is received from the connector.
            </summary>
            <param name="turnContext">A strongly-typed context object for this turn.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.Teams.TeamsActivityHandler.OnSignInInvokeAsync(Microsoft.Bot.Builder.ITurnContext{Microsoft.Bot.Schema.IInvokeActivity},System.Threading.CancellationToken)">
            <summary>
            Invoked when a signIn invoke activity is received from the connector.
            </summary>
            <param name="turnContext">A strongly-typed context object for this turn.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.Teams.TeamsActivityHandler.OnTeamsSigninVerifyStateAsync(Microsoft.Bot.Builder.ITurnContext{Microsoft.Bot.Schema.IInvokeActivity},System.Threading.CancellationToken)">
            <summary>
            Invoked when a signIn verify state activity is received from the connector.
            </summary>
            <param name="turnContext">A strongly-typed context object for this turn.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.Teams.TeamsActivityHandler.OnTeamsFileConsentAsync(Microsoft.Bot.Builder.ITurnContext{Microsoft.Bot.Schema.IInvokeActivity},Microsoft.Bot.Schema.Teams.FileConsentCardResponse,System.Threading.CancellationToken)">
            <summary>
            Invoked when a file consent card activity is received from the connector.
            </summary>
            <param name="turnContext">A strongly-typed context object for this turn.</param>
            <param name="fileConsentCardResponse">The response representing the value of the invoke activity sent when the user acts on
            a file consent card.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>An InvokeResponse depending on the action of the file consent card.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.Teams.TeamsActivityHandler.OnTeamsFileConsentAcceptAsync(Microsoft.Bot.Builder.ITurnContext{Microsoft.Bot.Schema.IInvokeActivity},Microsoft.Bot.Schema.Teams.FileConsentCardResponse,System.Threading.CancellationToken)">
            <summary>
            Invoked when a file consent card is accepted by the user.
            </summary>
            <param name="turnContext">A strongly-typed context object for this turn.</param>
            <param name="fileConsentCardResponse">The response representing the value of the invoke activity sent when the user accepts
            a file consent card.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.Teams.TeamsActivityHandler.OnTeamsFileConsentDeclineAsync(Microsoft.Bot.Builder.ITurnContext{Microsoft.Bot.Schema.IInvokeActivity},Microsoft.Bot.Schema.Teams.FileConsentCardResponse,System.Threading.CancellationToken)">
            <summary>
            Invoked when a file consent card is declined by the user.
            </summary>
            <param name="turnContext">A strongly-typed context object for this turn.</param>
            <param name="fileConsentCardResponse">The response representing the value of the invoke activity sent when the user declines
            a file consent card.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.Teams.TeamsActivityHandler.OnTeamsMessagingExtensionQueryAsync(Microsoft.Bot.Builder.ITurnContext{Microsoft.Bot.Schema.IInvokeActivity},Microsoft.Bot.Schema.Teams.MessagingExtensionQuery,System.Threading.CancellationToken)">
            <summary>
            Invoked when a Messaging Extension Query activity is received from the connector.
            </summary>
            <param name="turnContext">A strongly-typed context object for this turn.</param>
            <param name="query">The query for the search command.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>The Messaging Extension Response for the query.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.Teams.TeamsActivityHandler.OnTeamsO365ConnectorCardActionAsync(Microsoft.Bot.Builder.ITurnContext{Microsoft.Bot.Schema.IInvokeActivity},Microsoft.Bot.Schema.Teams.O365ConnectorCardActionQuery,System.Threading.CancellationToken)">
            <summary>
            Invoked when a O365 Connector Card Action activity is received from the connector.
            </summary>
            <param name="turnContext">A strongly-typed context object for this turn.</param>
            <param name="query">The O365 connector card HttpPOST invoke query.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.Teams.TeamsActivityHandler.OnTeamsAppBasedLinkQueryAsync(Microsoft.Bot.Builder.ITurnContext{Microsoft.Bot.Schema.IInvokeActivity},Microsoft.Bot.Schema.Teams.AppBasedLinkQuery,System.Threading.CancellationToken)">
            <summary>
            Invoked when an app based link query activity is received from the connector.
            </summary>
            <param name="turnContext">A strongly-typed context object for this turn.</param>
            <param name="query">The invoke request body type for app-based link query.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>The Messaging Extension Response for the query.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.Teams.TeamsActivityHandler.OnTeamsMessagingExtensionSelectItemAsync(Microsoft.Bot.Builder.ITurnContext{Microsoft.Bot.Schema.IInvokeActivity},Newtonsoft.Json.Linq.JObject,System.Threading.CancellationToken)">
            <summary>
            Invoked when a messaging extension select item activity is received from the connector.
            </summary>
            <param name="turnContext">A strongly-typed context object for this turn.</param>
            <param name="query">The object representing the query.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>The Messaging Extension Response for the query.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.Teams.TeamsActivityHandler.OnTeamsMessagingExtensionFetchTaskAsync(Microsoft.Bot.Builder.ITurnContext{Microsoft.Bot.Schema.IInvokeActivity},Microsoft.Bot.Schema.Teams.MessagingExtensionAction,System.Threading.CancellationToken)">
            <summary>
            Invoked when a Messaging Extension Fetch activity is received from the connector.
            </summary>
            <param name="turnContext">A strongly-typed context object for this turn.</param>
            <param name="action">The messaging extension action.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>The Messaging Extension Action Response for the action.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.Teams.TeamsActivityHandler.OnTeamsMessagingExtensionSubmitActionDispatchAsync(Microsoft.Bot.Builder.ITurnContext{Microsoft.Bot.Schema.IInvokeActivity},Microsoft.Bot.Schema.Teams.MessagingExtensionAction,System.Threading.CancellationToken)">
            <summary>
            Invoked when a messaging extension submit action dispatch activity is received from the connector.
            </summary>
            <param name="turnContext">A strongly-typed context object for this turn.</param>
            <param name="action">The messaging extension action.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>The Messaging Extension Action Response for the action.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.Teams.TeamsActivityHandler.OnTeamsMessagingExtensionSubmitActionAsync(Microsoft.Bot.Builder.ITurnContext{Microsoft.Bot.Schema.IInvokeActivity},Microsoft.Bot.Schema.Teams.MessagingExtensionAction,System.Threading.CancellationToken)">
            <summary>
            Invoked when a messaging extension submit action activity is received from the connector.
            </summary>
            <param name="turnContext">A strongly-typed context object for this turn.</param>
            <param name="action">The messaging extension action.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>The Messaging Extension Action Response for the action.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.Teams.TeamsActivityHandler.OnTeamsMessagingExtensionBotMessagePreviewEditAsync(Microsoft.Bot.Builder.ITurnContext{Microsoft.Bot.Schema.IInvokeActivity},Microsoft.Bot.Schema.Teams.MessagingExtensionAction,System.Threading.CancellationToken)">
            <summary>
            Invoked when a messaging extension bot message preview edit activity is received from the connector.
            </summary>
            <param name="turnContext">A strongly-typed context object for this turn.</param>
            <param name="action">The messaging extension action.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>The Messaging Extension Action Response for the action.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.Teams.TeamsActivityHandler.OnTeamsMessagingExtensionBotMessagePreviewSendAsync(Microsoft.Bot.Builder.ITurnContext{Microsoft.Bot.Schema.IInvokeActivity},Microsoft.Bot.Schema.Teams.MessagingExtensionAction,System.Threading.CancellationToken)">
            <summary>
            Invoked when a messaging extension bot message preview send activity is received from the connector.
            </summary>
            <param name="turnContext">A strongly-typed context object for this turn.</param>
            <param name="action">The messaging extension action.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>The Messaging Extension Action Response for the action.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.Teams.TeamsActivityHandler.OnTeamsMessagingExtensionConfigurationQuerySettingUrlAsync(Microsoft.Bot.Builder.ITurnContext{Microsoft.Bot.Schema.IInvokeActivity},Microsoft.Bot.Schema.Teams.MessagingExtensionQuery,System.Threading.CancellationToken)">
            <summary>
            Invoked when a messaging extension configuration query setting url activity is received from the connector.
            </summary>
            <param name="turnContext">A strongly-typed context object for this turn.</param>
            <param name="query">The Messaging extension query.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>The Messaging Extension Response for the query.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.Teams.TeamsActivityHandler.OnTeamsMessagingExtensionConfigurationSettingAsync(Microsoft.Bot.Builder.ITurnContext{Microsoft.Bot.Schema.IInvokeActivity},Newtonsoft.Json.Linq.JObject,System.Threading.CancellationToken)">
            <summary>
            Override this in a derived class to provide logic for when a configuration is set for a messaging extension.
            </summary>
            <param name="turnContext">A strongly-typed context object for this turn.</param>
            <param name="settings">Object representing the configuration settings.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.Teams.TeamsActivityHandler.OnTeamsMessagingExtensionCardButtonClickedAsync(Microsoft.Bot.Builder.ITurnContext{Microsoft.Bot.Schema.IInvokeActivity},Newtonsoft.Json.Linq.JObject,System.Threading.CancellationToken)">
            <summary>
            Override this in a derived class to provide logic for when a card button is clicked in a messaging extension.
            </summary>
            <param name="turnContext">A strongly-typed context object for this turn.</param>
            <param name="cardData">Object representing the card data.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.Teams.TeamsActivityHandler.OnTeamsTaskModuleFetchAsync(Microsoft.Bot.Builder.ITurnContext{Microsoft.Bot.Schema.IInvokeActivity},Microsoft.Bot.Schema.Teams.TaskModuleRequest,System.Threading.CancellationToken)">
            <summary>
            Override this in a derived class to provide logic for when a task module is fetched.
            </summary>
            <param name="turnContext">A strongly-typed context object for this turn.</param>
            <param name="taskModuleRequest">The task module invoke request value payload.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A Task Module Response for the request.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.Teams.TeamsActivityHandler.OnTeamsTaskModuleSubmitAsync(Microsoft.Bot.Builder.ITurnContext{Microsoft.Bot.Schema.IInvokeActivity},Microsoft.Bot.Schema.Teams.TaskModuleRequest,System.Threading.CancellationToken)">
            <summary>
            Override this in a derived class to provide logic for when a task module is submited.
            </summary>
            <param name="turnContext">A strongly-typed context object for this turn.</param>
            <param name="taskModuleRequest">The task module invoke request value payload.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A Task Module Response for the request.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.Teams.TeamsActivityHandler.OnTeamsTabFetchAsync(Microsoft.Bot.Builder.ITurnContext{Microsoft.Bot.Schema.IInvokeActivity},Microsoft.Bot.Schema.Teams.TabRequest,System.Threading.CancellationToken)">
            <summary>
            Override this in a derived class to provide logic for when a tab is fetched.
            </summary>
            <param name="turnContext">A strongly-typed context object for this turn.</param>
            <param name="tabRequest">The tab invoke request value payload.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A Tab Response for the request.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.Teams.TeamsActivityHandler.OnTeamsTabSubmitAsync(Microsoft.Bot.Builder.ITurnContext{Microsoft.Bot.Schema.IInvokeActivity},Microsoft.Bot.Schema.Teams.TabSubmit,System.Threading.CancellationToken)">
            <summary>
            Override this in a derived class to provide logic for when a tab is submitted.
            </summary>
            <param name="turnContext">A strongly-typed context object for this turn.</param>
            <param name="tabSubmit">The tab submit invoke request value payload.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A Tab Response for the request.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.Teams.TeamsActivityHandler.OnConversationUpdateActivityAsync(Microsoft.Bot.Builder.ITurnContext{Microsoft.Bot.Schema.IConversationUpdateActivity},System.Threading.CancellationToken)">
            <summary>
            Invoked when a conversation update activity is received from the channel.
            Conversation update activities are useful when it comes to responding to users being added to or removed from the channel.
            For example, a bot could respond to a user being added by greeting the user.
            </summary>
            <param name="turnContext">A strongly-typed context object for this turn.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <remarks>
            In a derived class, override this method to add logic that applies to all conversation update activities.
            </remarks>
        </member>
        <member name="M:Microsoft.Bot.Builder.Teams.TeamsActivityHandler.OnTeamsMembersAddedDispatchAsync(System.Collections.Generic.IList{Microsoft.Bot.Schema.ChannelAccount},Microsoft.Bot.Schema.Teams.TeamInfo,Microsoft.Bot.Builder.ITurnContext{Microsoft.Bot.Schema.IConversationUpdateActivity},System.Threading.CancellationToken)">
            <summary>
            Override this in a derived class to provide logic for when members other than the bot
            join the channel, such as your bot's welcome logic.
            UseIt will get the associated members with the provided accounts.
            </summary>
            <param name="membersAdded">A list of all the accounts added to the channel, as
            described by the conversation update activity.</param>
            <param name="teamInfo">The team info object representing the team.</param>
            <param name="turnContext">A strongly-typed context object for this turn.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.Teams.TeamsActivityHandler.OnTeamsMembersRemovedDispatchAsync(System.Collections.Generic.IList{Microsoft.Bot.Schema.ChannelAccount},Microsoft.Bot.Schema.Teams.TeamInfo,Microsoft.Bot.Builder.ITurnContext{Microsoft.Bot.Schema.IConversationUpdateActivity},System.Threading.CancellationToken)">
            <summary>
            Override this in a derived class to provide logic for when members other than the bot
            leave the channel, such as your bot's good-bye logic.
            It will get the associated members with the provided accounts.
            </summary>
            <param name="membersRemoved">A list of all the accounts removed from the channel, as
            described by the conversation update activity.</param>
            <param name="teamInfo">The team info object representing the team.</param>
            <param name="turnContext">A strongly-typed context object for this turn.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.Teams.TeamsActivityHandler.OnTeamsMembersAddedAsync(System.Collections.Generic.IList{Microsoft.Bot.Schema.Teams.TeamsChannelAccount},Microsoft.Bot.Schema.Teams.TeamInfo,Microsoft.Bot.Builder.ITurnContext{Microsoft.Bot.Schema.IConversationUpdateActivity},System.Threading.CancellationToken)">
            <summary>
            Override this in a derived class to provide logic for when members other than the bot
            join the channel, such as your bot's welcome logic.
            </summary>
            <param name="teamsMembersAdded">A list of all the members added to the channel, as
            described by the conversation update activity.</param>
            <param name="teamInfo">The team info object representing the team.</param>
            <param name="turnContext">A strongly-typed context object for this turn.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.Teams.TeamsActivityHandler.OnTeamsMembersRemovedAsync(System.Collections.Generic.IList{Microsoft.Bot.Schema.Teams.TeamsChannelAccount},Microsoft.Bot.Schema.Teams.TeamInfo,Microsoft.Bot.Builder.ITurnContext{Microsoft.Bot.Schema.IConversationUpdateActivity},System.Threading.CancellationToken)">
            <summary>
            Override this in a derived class to provide logic for when members other than the bot
            leave the channel, such as your bot's good-bye logic.
            </summary>
            <param name="teamsMembersRemoved">A list of all the members removed from the channel, as
            described by the conversation update activity.</param>
            <param name="teamInfo">The team info object representing the team.</param>
            <param name="turnContext">A strongly-typed context object for this turn.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.Teams.TeamsActivityHandler.OnTeamsChannelCreatedAsync(Microsoft.Bot.Schema.Teams.ChannelInfo,Microsoft.Bot.Schema.Teams.TeamInfo,Microsoft.Bot.Builder.ITurnContext{Microsoft.Bot.Schema.IConversationUpdateActivity},System.Threading.CancellationToken)">
            <summary>
            Invoked when a Channel Created event activity is received from the connector.
            Channel Created correspond to the user creating a new channel.
            </summary>
            <param name="channelInfo">The channel info object which describes the channel.</param>
            <param name="teamInfo">The team info object representing the team.</param>
            <param name="turnContext">A strongly-typed context object for this turn.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.Teams.TeamsActivityHandler.OnTeamsChannelDeletedAsync(Microsoft.Bot.Schema.Teams.ChannelInfo,Microsoft.Bot.Schema.Teams.TeamInfo,Microsoft.Bot.Builder.ITurnContext{Microsoft.Bot.Schema.IConversationUpdateActivity},System.Threading.CancellationToken)">
            <summary>
            Invoked when a Channel Deleted event activity is received from the connector.
            Channel Deleted correspond to the user deleting an existing channel.
            </summary>
            <param name="channelInfo">The channel info object which describes the channel.</param>
            <param name="teamInfo">The team info object representing the team.</param>
            <param name="turnContext">A strongly-typed context object for this turn.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.Teams.TeamsActivityHandler.OnTeamsChannelRenamedAsync(Microsoft.Bot.Schema.Teams.ChannelInfo,Microsoft.Bot.Schema.Teams.TeamInfo,Microsoft.Bot.Builder.ITurnContext{Microsoft.Bot.Schema.IConversationUpdateActivity},System.Threading.CancellationToken)">
            <summary>
            Invoked when a Channel Renamed event activity is received from the connector.
            Channel Renamed correspond to the user renaming an existing channel.
            </summary>
            <param name="channelInfo">The channel info object which describes the channel.</param>
            <param name="teamInfo">The team info object representing the team.</param>
            <param name="turnContext">A strongly-typed context object for this turn.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.Teams.TeamsActivityHandler.OnTeamsChannelRestoredAsync(Microsoft.Bot.Schema.Teams.ChannelInfo,Microsoft.Bot.Schema.Teams.TeamInfo,Microsoft.Bot.Builder.ITurnContext{Microsoft.Bot.Schema.IConversationUpdateActivity},System.Threading.CancellationToken)">
            <summary>
            Invoked when a Channel Restored event activity is received from the connector.
            Channel Restored correspond to the user restoring a previously deleted channel.
            </summary>
            <param name="channelInfo">The channel info object which describes the channel.</param>
            <param name="teamInfo">The team info object representing the team.</param>
            <param name="turnContext">A strongly-typed context object for this turn.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.Teams.TeamsActivityHandler.OnTeamsTeamArchivedAsync(Microsoft.Bot.Schema.Teams.TeamInfo,Microsoft.Bot.Builder.ITurnContext{Microsoft.Bot.Schema.IConversationUpdateActivity},System.Threading.CancellationToken)">
            <summary>
            Invoked when a Team Archived event activity is received from the connector.
            Team Archived correspond to the user archiving a team.
            </summary>
            <param name="teamInfo">The team info object representing the team.</param>
            <param name="turnContext">A strongly-typed context object for this turn.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.Teams.TeamsActivityHandler.OnTeamsTeamDeletedAsync(Microsoft.Bot.Schema.Teams.TeamInfo,Microsoft.Bot.Builder.ITurnContext{Microsoft.Bot.Schema.IConversationUpdateActivity},System.Threading.CancellationToken)">
            <summary>
            Invoked when a Team Deleted event activity is received from the connector.
            Team Deleted corresponds to the user deleting a team.
            </summary>
            <param name="teamInfo">The team info object representing the team.</param>
            <param name="turnContext">A strongly-typed context object for this turn.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.Teams.TeamsActivityHandler.OnTeamsTeamHardDeletedAsync(Microsoft.Bot.Schema.Teams.TeamInfo,Microsoft.Bot.Builder.ITurnContext{Microsoft.Bot.Schema.IConversationUpdateActivity},System.Threading.CancellationToken)">
            <summary>
            Invoked when a Team Hard Deleted event activity is received from the connector.
            Team Hard Deleted corresponds to the user hard deleting a team.
            </summary>
            <param name="teamInfo">The team info object representing the team.</param>
            <param name="turnContext">A strongly-typed context object for this turn.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.Teams.TeamsActivityHandler.OnTeamsTeamRenamedAsync(Microsoft.Bot.Schema.Teams.TeamInfo,Microsoft.Bot.Builder.ITurnContext{Microsoft.Bot.Schema.IConversationUpdateActivity},System.Threading.CancellationToken)">
            <summary>
            Invoked when a Team Renamed event activity is received from the connector.
            Team Renamed correspond to the user renaming an existing team.
            </summary>
            <param name="teamInfo">The team info object representing the team.</param>
            <param name="turnContext">A strongly-typed context object for this turn.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.Teams.TeamsActivityHandler.OnTeamsTeamRestoredAsync(Microsoft.Bot.Schema.Teams.TeamInfo,Microsoft.Bot.Builder.ITurnContext{Microsoft.Bot.Schema.IConversationUpdateActivity},System.Threading.CancellationToken)">
            <summary>
            Invoked when a Team Restored event activity is received from the connector.
            Team Restored corresponds to the user restoring a team.
            </summary>
            <param name="teamInfo">The team info object representing the team.</param>
            <param name="turnContext">A strongly-typed context object for this turn.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.Teams.TeamsActivityHandler.OnTeamsTeamUnarchivedAsync(Microsoft.Bot.Schema.Teams.TeamInfo,Microsoft.Bot.Builder.ITurnContext{Microsoft.Bot.Schema.IConversationUpdateActivity},System.Threading.CancellationToken)">
            <summary>
            Invoked when a Team Unarchived event activity is received from the connector.
            Team Unarchived correspond to the user unarchiving a team.
            </summary>
            <param name="teamInfo">The team info object representing the team.</param>
            <param name="turnContext">A strongly-typed context object for this turn.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.Teams.TeamsActivityHandler.SafeCast``1(System.Object)">
            <summary>
            Safely casts an object to an object of type <typeparamref name="T"/> .
            </summary>
            <param name="value">The object to be casted.</param>
            <returns>The object casted in the new type.</returns>
        </member>
        <member name="T:Microsoft.Bot.Builder.Teams.TeamsInfo">
            <summary>
            The TeamsInfo
            provides utility methods for the events and interactions that occur within Microsoft Teams.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Builder.Teams.TeamsInfo.GetMeetingParticipantAsync(Microsoft.Bot.Builder.ITurnContext,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the details for the given meeting participant. This only works in teams meeting scoped conversations. 
            </summary>
            <param name="turnContext">Turn context.</param>
            <param name="meetingId">The id of the Teams meeting. TeamsChannelData.Meeting.Id will be used if none provided.</param>
            <param name="participantId">The id of the Teams meeting participant. From.AadObjectId will be used if none provided.</param>
            <param name="tenantId">The id of the Teams meeting Tenant. TeamsChannelData.Tenant.Id will be used if none provided.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <remarks>InvalidOperationException will be thrown if meetingId, participantId or tenantId have not been
            provided, and also cannot be retrieved from turnContext.Activity.</remarks>
            <returns>Team participant channel account.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.Teams.TeamsInfo.GetTeamDetailsAsync(Microsoft.Bot.Builder.ITurnContext,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the details for the given team id. This only works in teams scoped conversations. 
            </summary>
            <param name="turnContext"> Turn context. </param>
            <param name="teamId"> The id of the Teams team. </param>
            <param name="cancellationToken"> Cancellation token. </param>
            <returns>Team Details.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.Teams.TeamsInfo.GetTeamChannelsAsync(Microsoft.Bot.Builder.ITurnContext,System.String,System.Threading.CancellationToken)">
            <summary>
            Returns a list of channels in a Team. 
            This only works in teams scoped conversations.
            </summary>
            <param name="turnContext"> Turn context. </param>
            <param name="teamId"> ID of the Teams team. </param>
            <param name="cancellationToken"> cancellation token. </param>
            <returns>Team Details.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.Teams.TeamsInfo.GetTeamMembersAsync(Microsoft.Bot.Builder.ITurnContext,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the list of TeamsChannelAccounts within a team. 
            This only works in teams scoped conversations.
            </summary>
            <param name="turnContext"> Turn context. </param>
            <param name="teamId"> ID of the Teams team. </param>
            <param name="cancellationToken"> cancellation token. </param>
            <returns>TeamsChannelAccount.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.Teams.TeamsInfo.GetMembersAsync(Microsoft.Bot.Builder.ITurnContext,System.Threading.CancellationToken)">
            <summary>
            Gets the conversation members of a one-on-one or group chat.
            </summary>
            <param name="turnContext"> Turn context. </param>
            <param name="cancellationToken"> Cancellation token. </param>
            <returns>TeamsChannelAccount.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.Teams.TeamsInfo.GetPagedTeamMembersAsync(Microsoft.Bot.Builder.ITurnContext,System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets a paginated list of members of a team. 
            This only works in teams scoped conversations.
            </summary>
            <param name="turnContext"> Turn context. </param>
            <param name="teamId"> ID of the Teams team. </param>
            <param name="continuationToken"> continuationToken token. </param>
            <param name="pageSize"> number of entries on the page. </param>
            /// <param name="cancellationToken"> cancellation token. </param>
            <returns>TeamsPagedMembersResult.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.Teams.TeamsInfo.GetPagedMembersAsync(Microsoft.Bot.Builder.ITurnContext,System.Nullable{System.Int32},System.String,System.Threading.CancellationToken)">
            <summary>
            Gets a paginated list of members of one-on-one, group, or team conversation.
            </summary>
            <param name="turnContext"> Turn context. </param>
            <param name="pageSize"> Suggested number of entries on a page. </param>
            <param name="continuationToken"> ContinuationToken token. </param>
            /// <param name="cancellationToken"> Cancellation token. </param>
            <returns>TeamsPagedMembersResult.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.Teams.TeamsInfo.GetTeamMemberAsync(Microsoft.Bot.Builder.ITurnContext,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the member of a teams scoped conversation.
            </summary>
            <param name="turnContext"> Turn context. </param>
            <param name="userId"> user id. </param>
            <param name="teamId"> ID of the Teams team. </param>
            <param name="cancellationToken"> cancellation token. </param>
            <returns>Team Details.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.Teams.TeamsInfo.GetMemberAsync(Microsoft.Bot.Builder.ITurnContext,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the account of a single conversation member. 
            This works in one-on-one, group, and teams scoped conversations.
            </summary>
            <param name="turnContext"> Turn context. </param>
            <param name="userId"> ID of the user in question. </param>
            <param name="cancellationToken"> cancellation token. </param>
            <returns>Team Details.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.Teams.TeamsInfo.SendMessageToTeamsChannelAsync(Microsoft.Bot.Builder.ITurnContext,Microsoft.Bot.Schema.IActivity,System.String,Microsoft.Bot.Connector.Authentication.MicrosoftAppCredentials,System.Threading.CancellationToken)">
            <summary>
            Creates a new thread in a team chat and sends an activity to that new thread.
            </summary>
            <param name="turnContext"> Turn context. </param>
            <param name="activity"> ID of the Teams team. </param>
            <param name="teamsChannelId"> cancellation token. </param>
            <param name="credentials"> Microsoft app credentials. </param>
            <param name="cancellationToken"> The cancellation token. </param>
            <returns>Team Details.</returns>
        </member>
        <member name="T:Microsoft.Bot.Builder.Teams.TeamsSSOTokenExchangeMiddleware">
            <summary>
            If the activity name is signin/tokenExchange, this middleware will attempt to
            exchange the token, and deduplicate the incoming call, ensuring only one
            exchange request is processed.
            </summary>
            <remarks>
            If a user is signed into multiple Teams clients, the Bot could receive a
            "signin/tokenExchange" from each client. Each token exchange request for a
            specific user login will have an identical Activity.Value.Id.
            
            Only one of these token exchange requests should be processed by the bot.
            The others return <see cref="F:System.Net.HttpStatusCode.PreconditionFailed"/>.
            For a distributed bot in production, this requires a distributed storage
            ensuring only one token exchange is processed. This middleware supports
            CosmosDb storage found in Microsoft.Bot.Builder.Azure, or MemoryStorage for
            local development. IStorage's ETag implementation for token exchange activity
            deduplication.
            </remarks>
        </member>
        <member name="M:Microsoft.Bot.Builder.Teams.TeamsSSOTokenExchangeMiddleware.#ctor(Microsoft.Bot.Builder.IStorage,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Builder.Teams.TeamsSSOTokenExchangeMiddleware"/> class.
            </summary>
            <param name="storage">The <see cref="T:Microsoft.Bot.Builder.IStorage"/> to use for deduplication.</param>
            <param name="connectionName">The connection name to use for the single
            sign on token exchange.</param>
        </member>
        <member name="M:Microsoft.Bot.Builder.Teams.TeamsSSOTokenExchangeMiddleware.OnTurnAsync(Microsoft.Bot.Builder.ITurnContext,Microsoft.Bot.Builder.NextDelegate,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.Bot.Builder.TelemetryConstants">
            <summary>
            Defines names of common properties for use with a <see cref="T:Microsoft.Bot.Builder.IBotTelemetryClient"/> object.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Builder.TelemetryConstants.ChannelIdProperty">
            <summary>
            The telemetry property value for channel id.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Builder.TelemetryConstants.ConversationIdProperty">
            <summary>
            The telemetry property value for conversation id.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Builder.TelemetryConstants.ConversationNameProperty">
            <summary>
            The telemetry property value for conversation name.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Builder.TelemetryConstants.DialogIdProperty">
            <summary>
            The telemetry property value for dialog id.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Builder.TelemetryConstants.FromIdProperty">
            <summary>
            The telemetry property value for from id.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Builder.TelemetryConstants.FromNameProperty">
            <summary>
            The telemetry property value for from name.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Builder.TelemetryConstants.LocaleProperty">
            <summary>
            The telemetry property value for locale.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Builder.TelemetryConstants.RecipientIdProperty">
            <summary>
            The telemetry property value for recipient id.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Builder.TelemetryConstants.RecipientNameProperty">
            <summary>
            The telemetry property value for recipient name.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Builder.TelemetryConstants.ReplyActivityIDProperty">
            <summary>
            The telemetry property value for reply activity id.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Builder.TelemetryConstants.TextProperty">
            <summary>
            The telemetry property value for text.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Builder.TelemetryConstants.SpeakProperty">
            <summary>
            The telemetry property value for speak.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Builder.TelemetryConstants.UserIdProperty">
            <summary>
            The telemetry property value for user id.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Builder.TelemetryConstants.AttachmentsProperty">
            <summary>
            The telemetry property value for attachments.
            </summary>
        </member>
        <member name="T:Microsoft.Bot.Builder.TelemetryLoggerConstants">
            <summary>
            Defines names of common events for use with a <see cref="T:Microsoft.Bot.Builder.IBotTelemetryClient"/> object.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Builder.TelemetryLoggerConstants.BotMsgReceiveEvent">
            <summary>
            The name of the event when a new message is received from the user.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Builder.TelemetryLoggerConstants.BotMsgSendEvent">
            <summary>
            The name of the event when logged when a message is sent from the bot to the user.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Builder.TelemetryLoggerConstants.BotMsgUpdateEvent">
            <summary>
            The name of the event when a message is updated by the bot.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Builder.TelemetryLoggerConstants.BotMsgDeleteEvent">
            <summary>
            The name of the event when a message is deleted by the bot.
            </summary>
        </member>
        <member name="T:Microsoft.Bot.Builder.TelemetryLoggerMiddleware">
            <summary>
            Uses a <see cref="T:Microsoft.Bot.Builder.IBotTelemetryClient"/> object to log incoming, outgoing, updated, or deleted message activities.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Builder.TelemetryLoggerMiddleware.#ctor(Microsoft.Bot.Builder.IBotTelemetryClient,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Builder.TelemetryLoggerMiddleware"/> class.
            </summary>
            <param name="telemetryClient">The telemetry client to send telemetry events to.</param>
            <param name="logPersonalInformation">`true` to include personally identifiable information; otherwise, `false`.</param>
        </member>
        <member name="P:Microsoft.Bot.Builder.TelemetryLoggerMiddleware.LogPersonalInformation">
            <summary>
            Gets a value indicating whether to include personal information that came from the user.
            </summary>
            <value>`true` to include personally identifiable information; otherwise, `false`.</value>
            <remarks>
            If true, personal information is included in calls to the telemetry client's
            <see cref="M:Microsoft.Bot.Builder.IBotTelemetryClient.TrackEvent(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.IDictionary{System.String,System.Double})"/> method;
            otherwise this information is filtered out.
            </remarks>
        </member>
        <member name="P:Microsoft.Bot.Builder.TelemetryLoggerMiddleware.TelemetryClient">
            <summary>
            Gets The telemetry client to send telemetry events to.
            </summary>
            <value>
            The <see cref="T:Microsoft.Bot.Builder.IBotTelemetryClient"/> this middleware uses to log events.
            </value>
        </member>
        <member name="M:Microsoft.Bot.Builder.TelemetryLoggerMiddleware.OnTurnAsync(Microsoft.Bot.Builder.ITurnContext,Microsoft.Bot.Builder.NextDelegate,System.Threading.CancellationToken)">
            <summary>
            Logs events for incoming, outgoing, updated, or deleted message activities, using the <see cref="P:Microsoft.Bot.Builder.TelemetryLoggerMiddleware.TelemetryClient"/>.
            </summary>
            <param name="context">The context object for this turn.</param>
            <param name="nextTurn">The delegate to call to continue the bot middleware pipeline.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <seealso cref="T:Microsoft.Bot.Builder.ITurnContext"/>
            <seealso cref="T:Microsoft.Bot.Schema.IActivity"/>
        </member>
        <member name="M:Microsoft.Bot.Builder.TelemetryLoggerMiddleware.OnReceiveActivityAsync(Microsoft.Bot.Schema.Activity,System.Threading.CancellationToken)">
            <summary>
            Uses the telemetry client's
            <see cref="M:Microsoft.Bot.Builder.IBotTelemetryClient.TrackEvent(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.IDictionary{System.String,System.Double})"/> method to
            log telemetry data when a message is received from the user.
            The event name is <see cref="F:Microsoft.Bot.Builder.TelemetryLoggerConstants.BotMsgReceiveEvent"/>.
            </summary>
            <param name="activity">Current activity sent from user.</param>
            <param name="cancellation">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.TelemetryLoggerMiddleware.OnSendActivityAsync(Microsoft.Bot.Schema.Activity,System.Threading.CancellationToken)">
            <summary>
            Uses the telemetry client's
            <see cref="M:Microsoft.Bot.Builder.IBotTelemetryClient.TrackEvent(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.IDictionary{System.String,System.Double})"/> method to
            log telemetry data when the bot sends the user a message. It uses the telemetry client's
            The event name is <see cref="F:Microsoft.Bot.Builder.TelemetryLoggerConstants.BotMsgSendEvent"/>.
            </summary>
            <param name="activity">Current activity sent from user.</param>
            <param name="cancellation">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.TelemetryLoggerMiddleware.OnUpdateActivityAsync(Microsoft.Bot.Schema.Activity,System.Threading.CancellationToken)">
            <summary>
            Uses the telemetry client's
            <see cref="M:Microsoft.Bot.Builder.IBotTelemetryClient.TrackEvent(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.IDictionary{System.String,System.Double})"/> method to
            log telemetry data when the bot updates a message it sent previously.
            The event name is <see cref="F:Microsoft.Bot.Builder.TelemetryLoggerConstants.BotMsgUpdateEvent"/>.
            </summary>
            <param name="activity">Current activity sent from user.</param>
            <param name="cancellation">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.TelemetryLoggerMiddleware.OnDeleteActivityAsync(Microsoft.Bot.Schema.Activity,System.Threading.CancellationToken)">
            <summary>
            Uses the telemetry client's
            <see cref="M:Microsoft.Bot.Builder.IBotTelemetryClient.TrackEvent(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.IDictionary{System.String,System.Double})"/> method to
            log telemetry data when the bot deletes a message it sent previously.
            The event name is <see cref="F:Microsoft.Bot.Builder.TelemetryLoggerConstants.BotMsgDeleteEvent"/>.
            </summary>
            <param name="activity">Current activity sent from user.</param>
            <param name="cancellation">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.TelemetryLoggerMiddleware.FillReceiveEventPropertiesAsync(Microsoft.Bot.Schema.Activity,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Fills event properties for the <see cref="F:Microsoft.Bot.Builder.TelemetryLoggerConstants.BotMsgReceiveEvent"/> event.
            If the <see cref="P:Microsoft.Bot.Builder.TelemetryLoggerMiddleware.LogPersonalInformation"/> is true, filters out the sender's name and the
            message's text and speak fields.
            </summary>
            <param name="activity">The message activity sent from user.</param>
            <param name="additionalProperties">Additional properties to add to the event.</param>
            <returns>The properties and their values to log when a message is received from the user.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.TelemetryLoggerMiddleware.FillSendEventPropertiesAsync(Microsoft.Bot.Schema.Activity,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Fills event properties for the <see cref="F:Microsoft.Bot.Builder.TelemetryLoggerConstants.BotMsgSendEvent"/> event.
            If the <see cref="P:Microsoft.Bot.Builder.TelemetryLoggerMiddleware.LogPersonalInformation"/> is true, filters out the recipient's name and the
            message's text and speak fields.
            </summary>
            <param name="activity">The user's activity to which the bot is responding.</param>
            <param name="additionalProperties">Additional properties to add to the event.</param>
            <returns>The properties and their values to log when the bot sends the user a message.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.TelemetryLoggerMiddleware.FillUpdateEventPropertiesAsync(Microsoft.Bot.Schema.Activity,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Fills event properties for the <see cref="F:Microsoft.Bot.Builder.TelemetryLoggerConstants.BotMsgUpdateEvent"/> event.
            If the <see cref="P:Microsoft.Bot.Builder.TelemetryLoggerMiddleware.LogPersonalInformation"/> is true, filters out the message's text field.
            </summary>
            <param name="activity">Last activity sent from user.</param>
            <param name="additionalProperties">Additional properties to add to the event.</param>
            <returns>The properties and their values to log when the bot updates a message it sent previously.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.TelemetryLoggerMiddleware.FillDeleteEventPropertiesAsync(Microsoft.Bot.Schema.IMessageDeleteActivity,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Fills event properties for the <see cref="F:Microsoft.Bot.Builder.TelemetryLoggerConstants.BotMsgDeleteEvent"/> event.
            </summary>
            <param name="activity">The Activity object deleted by bot.</param>
            <param name="additionalProperties">Additional properties to add to the event.</param>
            <returns>The properties and their values to log when the bot deletes a message it sent previously.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.TokenResolver.CheckForOAuthCards(Microsoft.Bot.Builder.BotAdapter,Microsoft.Extensions.Logging.ILogger,Microsoft.Bot.Builder.ITurnContext,Microsoft.Bot.Schema.Activity,System.Threading.CancellationToken)">
            <summary>
            Inspects outgoing Activities for <see cref="T:Microsoft.Bot.Schema.OAuthCard">OAuthCards</see>.
            </summary>
            <param name="adapter">The BotFrameworkAdapter used for polling the token service.</param>
            <param name="logger">The ILogger implementation this TokenResolver should use.</param>
            <param name="turnContext">The context object for the turn.</param>
            <param name="activity">The activity to send.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <remarks>If an <see cref="T:Microsoft.Bot.Schema.OAuthCard"/> is found in an outgoing activity, the <see cref="T:Microsoft.Bot.Builder.TokenResolver"/> polls the Bot Framework Token Service in the background.
            When the user completes the login flow, the TokenResolver will retrieve the user's token from the service and create a <see cref="F:Microsoft.Bot.Schema.SignInConstants.TokenResponseEventName">TokenResponse</see> activity to "send" to the bot, mimicking non-streaming OAuth flows.
            <para />
            All bots using OAuth should query the service to ensure the user is successfully logged in before utilizing a user's token. The bot should never store the user's token.
            </remarks>
        </member>
        <member name="T:Microsoft.Bot.Builder.TraceTranscriptLogger">
            <summary>
            Represents a transcript logger that writes activities to a <see cref="T:System.Diagnostics.Trace"/> object.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Builder.TraceTranscriptLogger.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Builder.TraceTranscriptLogger"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Builder.TraceTranscriptLogger.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Builder.TraceTranscriptLogger"/> class.
            </summary>
            <param name="traceActivity">Indicates if trace information should be logged.</param>
        </member>
        <member name="M:Microsoft.Bot.Builder.TraceTranscriptLogger.LogActivityAsync(Microsoft.Bot.Schema.IActivity)">
            <summary>
            Log an activity to the transcript.
            </summary>
            <param name="activity">The activity to transcribe.</param>
            <returns>A task that represents the work queued to execute.</returns>
        </member>
        <member name="T:Microsoft.Bot.Builder.TranscriptInfo">
            <summary>
            Represents a copy of a conversation.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Builder.TranscriptInfo.ChannelId">
            <summary>
            Gets or sets the ID of the channel in which the conversation occurred.
            </summary>
            <value>The ID of the channel in which the conversation occurred.</value>
        </member>
        <member name="P:Microsoft.Bot.Builder.TranscriptInfo.Id">
            <summary>
            Gets or sets the ID of the conversation.
            </summary>
            <value>The ID of the conversation.</value>
        </member>
        <member name="P:Microsoft.Bot.Builder.TranscriptInfo.Created">
            <summary>
            Gets or sets the date the conversation began.
            </summary>
            <value>The date then conversation began.</value>
        </member>
        <member name="T:Microsoft.Bot.Builder.TranscriptLoggerMiddleware">
            <summary>
            Middleware for logging incoming and outgoing activities to an <see cref="T:Microsoft.Bot.Builder.ITranscriptStore"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Builder.TranscriptLoggerMiddleware.#ctor(Microsoft.Bot.Builder.ITranscriptLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Builder.TranscriptLoggerMiddleware"/> class.
            </summary>
            <param name="transcriptLogger">The conversation store to use.</param>
        </member>
        <member name="M:Microsoft.Bot.Builder.TranscriptLoggerMiddleware.OnTurnAsync(Microsoft.Bot.Builder.ITurnContext,Microsoft.Bot.Builder.NextDelegate,System.Threading.CancellationToken)">
            <summary>
            Records incoming and outgoing activities to the conversation store.
            </summary>
            <param name="turnContext">The context object for this turn.</param>
            <param name="nextTurn">The delegate to call to continue the bot middleware pipeline.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <seealso cref="T:Microsoft.Bot.Builder.ITurnContext"/>
            <seealso cref="T:Microsoft.Bot.Schema.IActivity"/>
        </member>
        <member name="M:Microsoft.Bot.Builder.TranscriptLoggerMiddleware.TryLogTranscriptAsync(Microsoft.Bot.Builder.ITranscriptLogger,System.Collections.Generic.Queue{Microsoft.Bot.Schema.IActivity})">
            <summary>
            Helper to sequentially flush the transcript queue to the log.
            </summary>
        </member>
        <member name="T:Microsoft.Bot.Builder.TurnContext">
            <summary>
            Provides context for a turn of a bot.
            </summary>
            <remarks>Context provides information needed to process an incoming activity.
            The context object is created by a <see cref="T:Microsoft.Bot.Builder.BotAdapter"/> and persists for the
            length of the turn.</remarks>
            <seealso cref="T:Microsoft.Bot.Builder.IBot"/>
            <seealso cref="T:Microsoft.Bot.Builder.IMiddleware"/>
        </member>
        <member name="M:Microsoft.Bot.Builder.TurnContext.#ctor(Microsoft.Bot.Builder.BotAdapter,Microsoft.Bot.Schema.Activity)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Builder.TurnContext"/> class.
            </summary>
            <param name="adapter">The adapter creating the context.</param>
            <param name="activity">The incoming activity for the turn;
            or <c>null</c> for a turn for a proactive message.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="activity"/> or
            <paramref name="adapter"/> is <c>null</c>.</exception>
            <remarks>For use by bot adapter implementations only.</remarks>
        </member>
        <member name="M:Microsoft.Bot.Builder.TurnContext.#ctor(Microsoft.Bot.Builder.ITurnContext,Microsoft.Bot.Schema.Activity)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Builder.TurnContext"/> class from another turncontext class to target an alternate Activity.
            </summary>
            <remarks>
            For supporting calling legacy systems that always assume turncontext.Activity is the activity should be processed.
            This class clones the turncontext and then replaces the original.activity with the passed in activity.
            </remarks>
            <param name="turnContext">context to clone.</param>
            <param name="activity">activity to put into the new turn context.</param>
        </member>
        <member name="P:Microsoft.Bot.Builder.TurnContext.Adapter">
            <summary>
            Gets the bot adapter that created this context object.
            </summary>
            <value>The bot adapter that created this context object.</value>
        </member>
        <member name="P:Microsoft.Bot.Builder.TurnContext.TurnState">
            <summary>
            Gets the services registered on this context object.
            </summary>
            <value>The services registered on this context object.</value>
        </member>
        <member name="P:Microsoft.Bot.Builder.TurnContext.Locale">
            <summary>
            Gets or sets the locale on this context object.
            </summary>
            <value>The string of locale on this context object.</value>
        </member>
        <member name="P:Microsoft.Bot.Builder.TurnContext.Activity">
            <summary>
            Gets the activity associated with this turn; or <c>null</c> when processing
            a proactive message.
            </summary>
            <value>The activity associated with this turn.</value>
        </member>
        <member name="P:Microsoft.Bot.Builder.TurnContext.Responded">
            <summary>
            Gets a value indicating whether at least one response was sent for the current turn.
            </summary>
            <value><c>true</c> if at least one response was sent for the current turn.</value>
            <remarks><see cref="T:Microsoft.Bot.Schema.ITraceActivity"/> activities on their own do not set this flag.</remarks>
        </member>
        <member name="P:Microsoft.Bot.Builder.TurnContext.BufferedReplyActivities">
            <summary>
            Gets a list of activities to send when `context.Activity.DeliveryMode == 'expectReplies'.
            </summary>
            <value>A list of activities.</value>
        </member>
        <member name="M:Microsoft.Bot.Builder.TurnContext.OnSendActivities(Microsoft.Bot.Builder.SendActivitiesHandler)">
            <summary>
            Adds a response handler for send activity operations.
            </summary>
            <param name="handler">The handler to add to the context object.</param>
            <returns>The updated context object.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="handler"/> is <c>null</c>.</exception>
            <remarks>When the context's <see cref="M:Microsoft.Bot.Builder.TurnContext.SendActivityAsync(Microsoft.Bot.Schema.IActivity,System.Threading.CancellationToken)"/>
            or <see cref="M:Microsoft.Bot.Builder.TurnContext.SendActivitiesAsync(Microsoft.Bot.Schema.IActivity[],System.Threading.CancellationToken)"/> methods are called,
            the adapter calls the registered handlers in the order in which they were
            added to the context object.
            </remarks>
        </member>
        <member name="M:Microsoft.Bot.Builder.TurnContext.OnUpdateActivity(Microsoft.Bot.Builder.UpdateActivityHandler)">
            <summary>
            Adds a response handler for update activity operations.
            </summary>
            <param name="handler">The handler to add to the context object.</param>
            <returns>The updated context object.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="handler"/> is <c>null</c>.</exception>
            <remarks>When the context's <see cref="M:Microsoft.Bot.Builder.TurnContext.UpdateActivityAsync(Microsoft.Bot.Schema.IActivity,System.Threading.CancellationToken)"/> is called,
            the adapter calls the registered handlers in the order in which they were
            added to the context object.
            </remarks>
        </member>
        <member name="M:Microsoft.Bot.Builder.TurnContext.OnDeleteActivity(Microsoft.Bot.Builder.DeleteActivityHandler)">
            <summary>
            Adds a response handler for delete activity operations.
            </summary>
            <param name="handler">The handler to add to the context object.</param>
            <returns>The updated context object.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="handler"/> is <c>null</c>.</exception>
            <remarks>When the context's <see cref="M:Microsoft.Bot.Builder.TurnContext.DeleteActivityAsync(Microsoft.Bot.Schema.ConversationReference,System.Threading.CancellationToken)"/>
            or <see cref="M:Microsoft.Bot.Builder.TurnContext.DeleteActivityAsync(System.String,System.Threading.CancellationToken)"/> is called,
            the adapter calls the registered handlers in the order in which they were
            added to the context object.
            </remarks>
        </member>
        <member name="M:Microsoft.Bot.Builder.TurnContext.SendActivityAsync(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Sends a message activity to the sender of the incoming activity.
            </summary>
            <param name="textReplyToSend">The text of the message to send.</param>
            <param name="speak">Optional, text to be spoken by your bot on a speech-enabled
            channel.</param>
            <param name="inputHint">Optional, indicates whether your bot is accepting,
            expecting, or ignoring user input after the message is delivered to the client.
            One of: "acceptingInput", "ignoringInput", or "expectingInput".
            Default is null.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="textReplyToSend"/> is <c>null</c> or whitespace.</exception>
            <remarks>If the activity is successfully sent, the task result contains
            a <see cref="T:Microsoft.Bot.Schema.ResourceResponse"/> object containing the ID that the receiving
            channel assigned to the activity.
            <para>See the channel's documentation for limits imposed upon the contents of
            <paramref name="textReplyToSend"/>.</para>
            <para>To control various characteristics of your bot's speech such as voice,
            rate, volume, pronunciation, and pitch, specify <paramref name="speak"/> in
            Speech Synthesis Markup Language (SSML) format.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.Bot.Builder.TurnContext.SendActivityAsync(Microsoft.Bot.Schema.IActivity,System.Threading.CancellationToken)">
            <summary>
            Sends an activity to the sender of the incoming activity.
            </summary>
            <param name="activity">The activity to send.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="activity"/> is <c>null</c>.</exception>
            <remarks>If the activity is successfully sent, the task result contains
            a <see cref="T:Microsoft.Bot.Schema.ResourceResponse"/> object containing the ID that the receiving
            channel assigned to the activity.</remarks>
        </member>
        <member name="M:Microsoft.Bot.Builder.TurnContext.SendActivitiesAsync(Microsoft.Bot.Schema.IActivity[],System.Threading.CancellationToken)">
            <summary>
            Sends a set of activities to the sender of the incoming activity.
            </summary>
            <param name="activities">The activities to send.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <remarks>If the activities are successfully sent, the task result contains
            an array of <see cref="T:Microsoft.Bot.Schema.ResourceResponse"/> objects containing the IDs that
            the receiving channel assigned to the activities.</remarks>
        </member>
        <member name="M:Microsoft.Bot.Builder.TurnContext.UpdateActivityAsync(Microsoft.Bot.Schema.IActivity,System.Threading.CancellationToken)">
            <summary>
            Replaces an existing activity.
            </summary>
            <param name="activity">New replacement activity.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <exception cref="T:Microsoft.Bot.Schema.ErrorResponseException">
            The HTTP operation failed and the response contained additional information.</exception>
            <exception cref="T:System.AggregateException">
            One or more exceptions occurred during the operation.</exception>
            <remarks>If the activity is successfully sent, the task result contains
            a <see cref="T:Microsoft.Bot.Schema.ResourceResponse"/> object containing the ID that the receiving
            channel assigned to the activity.
            <para>Before calling this, set the ID of the replacement activity to the ID
            of the activity to replace.</para></remarks>
        </member>
        <member name="M:Microsoft.Bot.Builder.TurnContext.DeleteActivityAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Deletes an existing activity.
            </summary>
            <param name="activityId">The ID of the activity to delete.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <exception cref="T:Microsoft.Bot.Schema.ErrorResponseException">
            The HTTP operation failed and the response contained additional information.</exception>
        </member>
        <member name="M:Microsoft.Bot.Builder.TurnContext.DeleteActivityAsync(Microsoft.Bot.Schema.ConversationReference,System.Threading.CancellationToken)">
            <summary>
            Deletes an existing activity.
            </summary>
            <param name="conversationReference">The conversation containing the activity to delete.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <exception cref="T:Microsoft.Bot.Schema.ErrorResponseException">
            The HTTP operation failed and the response contained additional information.</exception>
            <remarks>The conversation reference's <see cref="P:Microsoft.Bot.Schema.ConversationReference.ActivityId"/>
            indicates the activity in the conversation to delete.</remarks>
        </member>
        <member name="M:Microsoft.Bot.Builder.TurnContext.Dispose">
            <summary>
            Frees resources.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Builder.TurnContext.Dispose(System.Boolean)">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <param name="disposing">Boolean value that determines whether to free resources or not.</param>
        </member>
        <member name="T:Microsoft.Bot.Builder.TurnContextStateCollection">
            <summary>
            Values persisted for the lifetime of the turn as part of the <see cref="T:Microsoft.Bot.Builder.ITurnContext"/>.
            </summary>
            <remarks>
            Typical values which are stored here are objects which are needed for the lifetime of a turn, such
            as IStorage, BotState, ConversationState, ILanguageGenerator, ResourceExplorer etc.
            </remarks>
        </member>
        <member name="M:Microsoft.Bot.Builder.TurnContextStateCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Builder.TurnContextStateCollection"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Builder.TurnContextStateCollection.Get``1(System.String)">
            <summary>
            Gets a cached value by name from the turn's context.
            </summary>
            <typeparam name="T">The type of the object.</typeparam>
            <param name="key">The name of the object.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is null.</exception>
            <returns>The object; or null if no service is registered by the key, or
            the retrieved object does not match the object type.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.TurnContextStateCollection.Get``1">
            <summary>
            Gets the default value by type from the turn's context.
            </summary>
            <typeparam name="T">The type of the object.</typeparam>
            <returns>The object; or null if no default service of the type is registered.</returns>
            <remarks>The default service key is the <see cref="P:System.Type.FullName"/> of the object type.</remarks>
        </member>
        <member name="M:Microsoft.Bot.Builder.TurnContextStateCollection.Add``1(System.String,``0)">
            <summary>
            Adds a value to the turn's context.
            </summary>
            <typeparam name="T">The type of the object.</typeparam>
            <param name="key">The name of the object.</param>
            <param name="value">The value to add.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> or <paramref name="value"/>is null.</exception>
        </member>
        <member name="M:Microsoft.Bot.Builder.TurnContextStateCollection.Add``1(``0)">
            <summary>
            Adds a value to the turn's context.
            </summary>
            <typeparam name="T">The type of the object.</typeparam>
            <param name="value">The object to add.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/>is null.</exception>
            <remarks>The default service key is the <see cref="P:System.Type.FullName"/> of the object type.</remarks>
        </member>
        <member name="M:Microsoft.Bot.Builder.TurnContextStateCollection.Set``1(System.String,``0)">
            <summary>
            Set a value to the turn's context.
            </summary>
            <typeparam name="T">The type of the object.</typeparam>
            <param name="key">The name of the object.</param>
            <param name="value">The value to add.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> or <paramref name="value"/>is null.</exception>
        </member>
        <member name="M:Microsoft.Bot.Builder.TurnContextStateCollection.Set``1(``0)">
            <summary>
            Set a value to the turn's context.
            </summary>
            <typeparam name="T">The type of the object.</typeparam>
            <param name="value">The value to add.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/>is null.</exception>
        </member>
        <member name="M:Microsoft.Bot.Builder.TurnContextStateCollection.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Builder.TurnContextStateCollection.Dispose(System.Boolean)">
            <summary>
            Frees resources if the disposing parameter is set to true.
            </summary>
            <param name="disposing">Boolean value that indicates if freeing resources should be performed.</param>
        </member>
        <member name="T:Microsoft.Bot.Builder.TurnStateConstants">
            <summary>
            Constants used in TurnState.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Builder.TurnStateConstants.OAuthLoginTimeoutKey">
            <summary>
            TurnState key for the OAuth login timeout.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Builder.TurnStateConstants.TokenPollingSettingsKey">
            <summary>
            Name of the token polling settings key.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Builder.TurnStateConstants.OAuthLoginTimeoutValue">
            <summary>
            Default amount of time an OAuthCard will remain active (clickable and actively waiting for a token).
            After this time:
            (1) the OAuthCard will not allow the user to click on it.
            (2) any polling triggered by the OAuthCard will stop.
            </summary>
        </member>
        <member name="T:Microsoft.Bot.Builder.UserState">
            <summary>
            Defines a state management object for user state.
            </summary>
            <remarks>
            User state is available in any turn that the bot is conversing with that user on that
            channel, regardless of the conversation.
            </remarks>
        </member>
        <member name="M:Microsoft.Bot.Builder.UserState.#ctor(Microsoft.Bot.Builder.IStorage)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Builder.UserState"/> class.
            </summary>
            <param name="storage">The storage layer to use.</param>
        </member>
        <member name="M:Microsoft.Bot.Builder.UserState.GetStorageKey(Microsoft.Bot.Builder.ITurnContext)">
            <summary>
            Gets the key to use when reading and writing state to and from storage.
            </summary>
            <param name="turnContext">The context object for this turn.</param>
            <returns>The storage key.</returns>
            <remarks>
            User state includes the channel ID and user ID as part of its storage key.
            </remarks>
            <exception cref="T:System.ArgumentNullException">The <see cref="P:Microsoft.Bot.Builder.ITurnContext.Activity"/> for the
            current turn is missing <see cref="P:Microsoft.Bot.Schema.Activity.ChannelId"/> or
            <see cref="P:Microsoft.Bot.Schema.Activity.From"/> information, or the sender's
            <see cref="P:Microsoft.Bot.Schema.ConversationAccount.Id"/> is missing.</exception>
        </member>
        <member name="T:Microsoft.Bot.Schema.HandoffEventNames">
            <summary>
            Defines values for handoff event names.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Schema.HandoffEventNames.InitiateHandoff">
            <summary>
            The value of handoff events for initiate handoff.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Schema.HandoffEventNames.HandoffStatus">
            <summary>
            The value of handoff events for handoff status.
            </summary>
        </member>
    </members>
</doc>
